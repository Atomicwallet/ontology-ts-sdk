{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"babel-runtime/helpers/createClass\"","webpack:///external \"babel-runtime/helpers/classCallCheck\"","webpack:///external \"babel-runtime/core-js/json/stringify\"","webpack:///external \"babel-runtime/regenerator\"","webpack:///external \"babel-runtime/core-js/get-iterator\"","webpack:///external \"axios\"","webpack:///external \"babel-runtime/helpers/asyncToGenerator\"","webpack:///external \"crypto-js\"","webpack:///external \"bignumber.js\"","webpack:///external \"babel-runtime/core-js/object/get-prototype-of\"","webpack:///external \"babel-runtime/helpers/inherits\"","webpack:///external \"babel-runtime/helpers/possibleConstructorReturn\"","webpack:///external \"babel-runtime/core-js/map\"","webpack:///external \"elliptic\"","webpack:///external \"bip39\"","webpack:///external \"base64-url\"","webpack:///external \"sm.js\"","webpack:///external \"crypto\"","webpack:///external \"babel-runtime/helpers/extends\"","webpack:///external \"base-58\"","webpack:///external \"long\"","webpack:///external \"babel-runtime/helpers/get\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"js-sha3\"","webpack:///external \"babel-runtime/core-js/object/assign\"","webpack:///external \"babel-runtime/core-js/object/keys\"","webpack:///external \"secure-random\"","webpack:///external \"babel-runtime/helpers/defineProperty\"","webpack:///external \"babel-runtime/helpers/typeof\"","webpack:///external \"@ont-community/hdkey-secp256r1\"","webpack:///external \"pkcs7\"","webpack:///external \"wif\"","webpack:///external \"uuid\"","webpack:///external \"babel-runtime/helpers/objectWithoutProperties\"","webpack:///external \"websocket-as-promised\"","webpack:///external \"@ont-community/html5-websocket\"","webpack:///external \"milagro-crypto-js\"","webpack:///external \"scrypt-async\"","webpack:///external \"babel-runtime/core-js/number/is-safe-integer\"","webpack:///external \"babel-runtime/core-js/array/from\"","webpack:///./src/error.ts","webpack:///./src/transaction/opcode.ts","webpack:///./src/consts.ts","webpack:///./src/utils.ts","webpack:///./src/common/bigInt.ts","webpack:///./src/crypto/SignatureScheme.ts","webpack:///./src/crypto/KeyType.ts","webpack:///./src/crypto/CurveLabel.ts","webpack:///./src/crypto/Key.ts","webpack:///./src/crypto/PublicKey.ts","webpack:///./src/transaction/program.ts","webpack:///./src/smartcontract/abi/parameter.ts","webpack:///./src/smartcontract/abi/struct.ts","webpack:///./src/transaction/scriptBuilder.ts","webpack:///./src/crypto/address.ts","webpack:///./src/scrypt.ts","webpack:///./src/crypto/Signature.ts","webpack:///./src/crypto/PrivateKey.ts","webpack:///./src/crypto/PrivateKeyFactory.ts","webpack:///./src/transaction/txAttribute.ts","webpack:///./src/crypto/AnonymousCredential.ts","webpack:///./src/crypto/Ecies.ts","webpack:///./src/common/fixed64.ts","webpack:///./src/smartcontract/abi/abiFunction.ts","webpack:///./src/transaction/payload/deployCode.ts","webpack:///./src/transaction/payload/invokeCode.ts","webpack:///./src/transaction/transaction.ts","webpack:///./src/transaction/txSignature.ts","webpack:///./src/transaction/transfer.ts","webpack:///./src/transaction/transactionUtils.ts","webpack:///./src/smartcontract/abi/nativeVmParamsBuilder.ts","webpack:///./src/smartcontract/nativevm/ontAssetTxBuilder.ts","webpack:///./src/smartcontract/nativevm/ontidContractTxBuilder.ts","webpack:///./src/transaction/transactionBuilder.ts","webpack:///./src/account.ts","webpack:///./src/network/rest/urlConsts.ts","webpack:///./src/network/rest/restClient.ts","webpack:///./src/network/websocket/deferred.ts","webpack:///./src/network/websocket/websocketBuilder.ts","webpack:///./src/network/websocket/websocketSender.ts","webpack:///./src/network/websocket/websocketClient.ts","webpack:///./src/smartcontract/abi/abiInfo.ts","webpack:///./src/smartcontract/neovm/attestClaimTxBuilder.ts","webpack:///./src/smartcontract/data/attestClaim.ts","webpack:///./src/claim/attestNotifyEvent.ts","webpack:///./src/claim/message.ts","webpack:///./src/claim/claim.ts","webpack:///./src/transaction/ddo.ts","webpack:///./src/identity.ts","webpack:///./src/neocore/TransactionNeo.ts","webpack:///./src/neocore/InvocationTransaction.ts","webpack:///./src/neocore/NeoRpc.ts","webpack:///./src/neocore/Program.ts","webpack:///./src/neocore/SmartContract.ts","webpack:///./src/neocore/TransactionInput.ts","webpack:///./src/neocore/TransactionOutput.ts","webpack:///./src/network/rpc/rpcClient.ts","webpack:///./src/smartcontract/neovm/oep8TxBuilder.ts","webpack:///./src/wallet.ts","webpack:///./src/smartcontract/neovm/oep4TxBuilder.ts","webpack:///./src/sdk/index.ts","webpack:///./src/smartcontract/nativevm/governanceContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/token.ts","webpack:///./src/smartcontract/neovm/oep5TxBuilder.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","require","ERROR_CODE","OPCODE","ADDR_VERSION","DEFAULT_SCRYPT","cost","blockSize","parallel","size","OEP_HEADER","OEP_FLAG","WEBVIEW_SCHEME","DEFAULT_ALGORITHM","algorithm","parameters","curve","DEFAULT_SM2_ID","TEST_NODE","MAIN_NODE","HTTP_REST_PORT","HTTP_WS_PORT","HTTP_JSON_PORT","REST_API","getBalance","sendRawTx","getMerkleProof","ONT_NETWORK","MAIN","TEST","TEST_ONT_URL","SOCKET_URL","RPC_URL","REST_URL","sendRawTxByRestful","MAIN_ONT_URL","TOKEN_TYPE","ONT","ONG","DEFAULT_GAS_LIMIT","NATIVE_INVOKE_NAME","TX_MAX_SIG_SIZE","ONT_BIP44_PATH","UNBOUND_GENERATION_AMOUNT","UNBOUND_TIME_INTERVAL","ONT_TOTAL_SUPPLY","GENESIS_BLOCK_TIMESTAMP","opcode","hexstring2ab","str","result","length","push","parseInt","substring","ab2hexstring","arr","uint8Arr","Uint8Array","byteLength","toString","ab2str","buf","String","fromCharCode","apply","str2ab","ArrayBuffer","bufView","strLen","charCodeAt","str2hexstr","hexstr2str","hex2VarBytes","hex","num2VarInt","str2VarBytes","bool2VarByte","v","hexXor","str1","str2","Error","result8","substr","utils_num2hexstring","num","arguments","undefined","littleEndian","RangeError","is_safe_integer_default","hexstring","repeat","reverseHex","out","bigIntFromBytes","bytes","buff","Buffer","from","data","from_default","subarray","concat","Array","fill","external_long_","bigIntToBytes","toBytesLE","negData","neg","stop","b","isNegative","pos","slice","utils_StringReader","StringReader","classCallCheck_default","this","createClass_default","key","isEmpty","index","indexOf","bytesToRead","readNextLen","read","len","utils_EventEmitter","EventEmitter","handlers","type","handler","event","utils_sendBackResult2Native","callback","window","prompt","utils_axiosPost","url","params","external_axios_default","a","post","then","res","console","log","catch","err","stringify_default","now","Math","floor","Date","sha256","external_crypto_js_","Hex","parse","ripemd160","hash160","SignatureScript","generateRandomArray","external_secure_random_","randomBytes","generateMnemonic","random","external_bip39_","parseMnemonic","varifyPositiveInt","test","INVALID_PARAMS","isBase64","isHexString","unboundDeadline","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","next","done","return","numInterval","calcUnboundOng","balance","startOffset","endOffset","amount","UNBOUND_DEADLINE","ustart","istart","uend","iend","BigInt","ledgerCompatible","bi","external_bignumber_js_","isInteger","SIZE","SignatureScheme_SignatureScheme","SignatureScheme","label","labelJWS","values","item","find","ECDSAwithSHA224","ECDSAwithSHA256","ECDSAwithSHA384","ECDSAwithSHA512","ECDSAwithSHA3_224","ECDSAwithSHA3_256","ECDSAwithSHA3_384","ECDSAwithSHA3_512","ECDSAwithRIPEMD160","SM2withSM3","EDDSAwithSHA512","KeyType_KeyType","KeyType","defaultSchema","ECDSA","SM2","EDDSA","CurveLabel_CurveLabel","CurveLabel","preset","SECP224R1","SECP256R1","SECP384R1","SECP521R1","SM2P256V1","ED25519","Key_KeyParameters","KeyParameters","json","fromLabel","Key_Key","Key","deserializeJson","msg","scheme","external_js_sha3_","external_sm_js_","sum","schema","serializeJson","PublicKey_PublicKey","_Key","PublicKey","possibleConstructorReturn_default","__proto__","get_prototype_of_default","inherits_default","signature","isSchemaSupported","getSignContent","hash","computeHash","verifySignature","verifyEcDSASignature","verifyEdDSASignature","verifySM2Signature","external_elliptic_","verify","reader","id","readNullTerminated","SM2KeyPair","sr","algorithmHex","curveHex","fromHex","PublicKey_PublicKeyStatus","PublicKeyStatus","hexLabel","comparePublicKeys","ec","paKey","keyFromPublic","pbKey","pa","getPublic","pb","getX","getY","pka","pkb","_pubFromString","Number","pushOpCode","op","pushBigInt","PUSHM1","PUSH0","PUSH1","pushNum","pushBytes","bigInt","toHexstr","hexstr","PUSHBYTES75","PUSHBYTES1","PUSHDATA1","PUSHDATA2","PUSHDATA4","program_programFromPubKey","pk","serializeHex","pushPubKey","CHECKSIG","program_programFromMultiPubKey","pubkeys","sort","CHECKMULTISIG","program_programFromParams","sigs","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","readOpcode","readBytes","code","keylen","readUint32","readUint16","readUint8","readPubKey","pkStr","readNextBytes","deserializeHex","IN_USE","REVOKED","program_ProgramInfo","ProgramInfo","ParameterType","ParameterTypeVal","parameter_Parameter","Parameter","Struct","list","_len","args","_key","scriptBuilder_pushBool","param","PUSHT","PUSHF","scriptBuilder_pushInt","biHex","scriptBuilder_pushHexString","scriptBuilder_pushBigNum","isEqualTo","isGreaterThan","isLessThan","toNumber","scriptBuilder_getStructBytes","val","ByteArray","scriptBuilder_getMapBytes","Map","keys","k","getType","getValue","Integer","Long","scriptBuilder_pushMap","NEWMAP","TOALTSTACK","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","DUPFROMALTSTACK","scriptBuilder_pushParam","SETITEM","FROMALTSTACK","pushParam","Boolean","BOOLOR","convertMap","map_default","PACK","ADD","scriptBuilder_serializeAbiFunction","abiFunction","tmp","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","scriptBuilder_createCodeParamsScript","convertArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","map","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","keys_default","pVal","set","deserializeItem","t","readBoolean","ele","_length","_i","createCodeParamsScript","abi_struct","structBytes","scriptBuilder_buildSmartContractParam","functionName","mapBytes","scriptBuilder_buildWasmContractParam","pList","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","Int","IntArray","LongArray","Params","address_Address","Address","publicKey","ontid","vmCode","publicKeys","fromPubKey","toBase58","hexToBase58","base58ToHex","address","hexEncoded","datas","external_base_58_","base58Encoded","scrypt","keyphrase","addressHash","derived","external_scrypt_async_","normalize","N","dkLen","encryptWithCtr","privateKey","publicKeyEncoded","scryptParams","getB58Checksum","derived1","derived2","iv","assembled","encrypt","mode","CTR","padding","NoPadding","ciphertext","decryptWithCtr","encryptedKey","saltOrAddress","encrypted","salt","ciphertexts","decrypt","checkCtrDecrypted","Decrypto_ERROR","encryptWithEcb","addresshash","xor","ECB","decryptWithEcb","checkEcbDecrypted","decryptedKey","encryptWithGcm","aad","cipher","external_crypto_","setAAD","plainText","update","final","authTag","getAuthTag","decryptWithGcm","decipher","setAuthTag","decrypted","Signature_Signature","Signature","publicKeyId","encoded","external_base64_url_","pgpSignature","Value","deserialzedValue","Algorithm","keyId","PublicKeyId","Format","HDKey","PrivateKey_PrivateKey","PrivateKey","signed","computeSignature","_ref","asyncToGenerator_default","regenerator_default","mark","_callee","wrap","_context","prev","abrupt","sign","_x","_x2","_x3","getEcDSAPublicKey","getEdDSAPublicKey","getSM2PublicKey","getPublicKey","INVALID_ADDR","keyFromPrivate","keyFromSecret","pubToString","computeEcDSASignature","computeEdDSASignature","computeSM2Signature","canonical","toArrayLike","toHex","toLowerCase","external_wif_","keyType","wifkey","mnemonic","derivePath","split","seed","pri","fromMasterSeed","derive","keyDeserializers","defaultKeyDeserializer","DefaultKeyDeserializer","registerKeyDeserializer","deserializer","deserializeFromJson","external","deserialize","TransactionAttributeUsage","AnonymousCredential_Issuer","Issuer","AnonymousCredential_CryptoSuite","sk","AnonymousCredential_SecretKey","Rand","GenerateSk","GenerateIssuerPublicKey","AttributeName","GenerateAttr","Nym","attrs","e","getRandBN","B","ECP","copy","g1","add","PAIR","G1mul","h0","attr","h","A","BIG","invmodp","order","cred","AnonymousCredential_Credential","Set","AnonymousCredential_IssuerPublicKey","COPY","CR","VerifyCredentialRequest","AnonymousCredential_User","User","ipk","nonce","h_sk","t1","C","hashToBN","S","modmul","mod","pi","genAttrBN","Cred","wg2e","ECP2","w","G2mul","g2","sig","affine","left","ate","fexp","right","equals","Copy","D","r1","A_","r3","_e","modneg","_A","r2","_r2","B_","s_","r_a","r_e","r_r2","r_r3","r_s_","r_sk","E","t2","c_","s_sk","s_a","_i2","sub","s_e","s_r2","s_r3","s_s_","proof","O","g2Dup","_t1","_t2","c1","c2","comp","CryptoSuite","ctx","external_milagro_crypto_js_","rng","RAND","getG1Generator","getG2Generator","getOrder","x","y","rcopy","ROM_CURVE","CURVE_Gx","CURVE_Gy","setxy","qx","FP2","qy","CURVE_Pxa","CURVE_Pxb","bset","CURVE_Pya","CURVE_Pyb","CURVE_Order","clean","randomnum","all","points","forEach","isArray","pp","toBytes","H","HASH256","process_array","R","fromBytes","HAttr","getRandG1","AnonymousCredential_CryptoBase","CryptoBase","_CryptoBase","SecretKey","_this","setValue","_g1","_g2","SetBasicValue","_CryptoBase2","IssuerPublicKey","_this2","target","SetAttrValue","_i3","genAttrElement","_C","_CryptoBase3","Credential","_this3","Ecies_Ecies","Ecies","Curve","encAlg","hashAlg","digestSize","keyFormat","compact","keyPair","genKeyPair","alloc","priv","getPrivate","pub","privHex","pubkey","_iv","publicB","tmpKP","gTilde","hTilde","mul","encode","PEH","derivedKeyArray","kdf2","derivedKey","setAutoPadding","msgCipher","external_pkcs7_","iv2","plain","unpad","hashFunc","byteLen","ceil","offset","counter","I2OSP","digest","hEnd","allocUnsafe","writeUIntBE","Fixed64","f","Fixed64Size","AbiFunction","returntype","getName","j","needStorage","version","author","email","description","boolValue","codeVersion","payload_payload","InvokeCode","TxType","txAttribute_TransactionAttribute","TransactionAttribute","usage","Script","DescriptionUrl","Description","Nonce","ss","dataLen","txSignature_TxSignature","TxSignature","invocationScript","sigData","verificationScript","pubKeys","M","getParamsFromProgram","info","end","_sr","getProgramInfo","signAsync","t0","sent","Fee","serialize","payer","fee","fixed64","transaction_Transaction","Transaction","txAttributes","gasPrice","gasLimit","serializeUnsignedData","serializeSignedData","payload","ProgramHexString","ProgramSha256","tx","Invoke","invokeCode","Deploy","deployCode","attributeLength","txAttribute","sigLength","transfer_Transfer","_Transaction","Transfer","makeNativeContractTx","funcName","contractAddr","SYSCALL","createCodeParamScript","obj","SWAP","APPEND","buildNativeCodeScript","NEWSTRUCT","ONT_CONTRACT","ONG_CONTRACT","getTokenContract","tokenType","verifyAmount","lte","ontAssetTxBuilder_makeTransferTx","to","struct","contract","method","makeTransferStateTx","states","structs","state","makeTransferToMany","amounts","makeWithdrawOngTx","ontAssetTxBuilder_makeQueryAllowanceTx","asset","makeQueryBalanceTx","deserializeTransferTx","contractIndex1","lastIndexOf","contractIndex2","contractIndex","max","paramsEnd","methodStr","_methodStr","numTmp","fromHexstr","_from","_to","_numTmp","_amount","ONTID_CONTRACT","ONTID_METHOD","regIDWithPublicKey","regIDWithAttributes","addAttributes","removeAttribute","getAttributes","getDDO","addKey","removeKey","getPublicKeys","addRecovery","changeRecovery","getKeyState","buildRegisterOntidTx","buildRegIdWithAttributes","attributes","attrLen","buildAddAttributeTx","buildRemoveAttributeTx","buildGetAttributesTx","buildGetDDOTx","buildAddControlKeyTx","newPk","userKey","p1","p2","p3","buildRemoveControlKeyTx","pk2Remove","sender","buildGetPublicKeysTx","buildAddRecoveryTx","recovery","buildChangeRecoveryTx","newrecovery","oldrecovery","buildGetPublicKeyStateTx","pkId","Default_params","Action","Version","Type","Op","transactionBuilder_signTransaction","create","signTransactionAsync","createAsync","transactionBuilder_addSign","transactionBuilder_equalPks","pks1","pks2","transactionBuilder_signTx","signData","transactionBuilder_makeInvokeTransaction","abiFunc","abi_abiFunction","APPCALL","makeDeployCodeTransaction","desp","dc","buildTxParam","PreExec","serialized","assign_default","Data","buildRpcParam","jsonrpc","buildRestfulParam","sendRawTxRestfulUrl","preExec","charAt","restUrl","transferStringParameter","pType","transformMapParameter","transformArrayParameter","typeof_default","transformParameter","arg","buildParamsByJson","paramsList","functions","operation","temp","makeTransactionsByJson","action","invokeConfig","contractHash","txList","buildNativeTxFromJson","_tx","funcArgs","_payer","account_HDKey","account_Account","Account","toJsonObj","extends_default","lock","enc-alg","isDefault","signatureScheme","password","exportPrivateKey","encryptedPrivateKey","saltBase64","account","trim","parseJsonObj","JSON","extra","urlConsts","RestClient","encodeURIComponent","hexData","userId","concatParams","body","txHash","codeHash","height","deferred_Deferred","Deferred","resolve","_resolve","reject","reason","_reject","_promise","promise_default","websocketBuilder_sendSubscribe","SubscribeEvent","SubscribeJsonBlock","SubscribeRawBlock","SubscribeBlockTxHashs","websocketBuilder_sendRawTransaction","websocketBuilder_getRawTransaction","Hash","Raw","websocketBuilder_getRawTransactionJson","websocketBuilder_getBlock","Height","websocketBuilder_getBlockJson","websocketBuilder_getBalance","Addr","websocketBuilder_getUnboundOng","websocketBuilder_getContract","websocketBuilder_getContractJson","websocketBuilder_getSmartCodeEvent","websocketBuilder_getBlockHeightByTxHash","websocketBuilder_getStorage","websocketBuilder_getMerkleProof","websocketBuilder_getAllowance","Asset","From","To","websocketBuilder_getGrantOng","websocketBuilder_getMempoolTxState","websocketSender_WebsocketSender","WebsocketSender","debug","wsp","external_websocket_as_promised_","createWebSocket","socketUrl","html5_websocket_","attachRequestId","Id","extractRequestId","packMessage","unpackMessage","message","onOpen","addListener","onClose","onSend","onMessage","onError","response","close","open","sendRequest","requestId","generateReqId","finish","_x4","listener","onUnpackedMessage","websocketClient_WebsocketClient","WebsocketClient","autoClose","promises","notifyListener","bind","raw","send","_ref2","_callee2","subscribeEvent","subscribeJsonBlock","subscribeRawBlock","subscribeBlockTxHashes","_context2","_ref3","_callee3","sendResult","deferred","waitNotify","_context3","Result","promise","_x10","_ref4","_callee4","_context4","_x11","_ref5","_callee5","_context5","_x12","_ref6","_callee6","_context6","_ref7","_callee7","_context7","_ref8","_callee8","_context8","_x13","_ref9","_callee9","_context9","_x14","_ref10","_callee10","_context10","_x15","_ref11","_callee11","_context11","_x16","_ref12","_callee12","_context12","_x17","_ref13","_callee13","_context13","_x18","_ref14","_callee14","_context14","_x19","_ref15","_callee15","_context15","_x20","_ref16","_callee16","_context16","_x21","_x22","_ref17","_callee17","_context17","_x23","_ref18","_callee18","_context18","_x24","_x25","_x26","_ref19","_callee19","_context19","_x27","_ref20","_callee20","_context20","_x28","_ref21","_callee21","_context21","_ref22","_callee22","_context22","_x29","_ref23","_callee23","_context23","_ref24","_callee24","_context24","_x30","_ref25","_callee25","_context25","_ref26","_callee26","_context26","_ref27","_callee27","_context27","_x32","TxHash","delete","warn","AbiInfo","entrypoint","attestClaimTxBuilder_abiInfo","abi_abiInfo","parseJson","events","attestClaimTxBuilder_contractHash","getHash","replace","contractAddress","buildCommitRecordTx","claimId","issuer","subject","getFunction","buildRevokeRecordTx","revokerOntid","name1","type1","buildGetRecordStatusTx","RevocationType","attestNotifyEvent_AttestNotifyEvent","AttestNotifyEvent","Desc","attestNotifyEvent_Result","State","GasConsumed","Notify","ContractAddress","States","ddo_PublicKeyWithId","PublicKeyWithId","ddo_DDOAttribute","DDOAttribute","ddo_DDO","DDO","ddo","pkLen","recoveryLen","message_Message","Message","metadata","messageId","external_uuid_","jwt","creator","parts","header","deserializeHeader","deserializePayload","deserializeJWT","payloadFromJSON","rest","stringified","_JSON$parse","jti","iss","issuedAt","iat","expireAt","exp","objectWithoutProperties_default","alg","fromLabelJWS","kid","retrievePublicKey","serializeUnsigned","verifyKeyOwnership","verifyExpiration","retrievePublicKeyState","_x5","serializeHeader","serializePayload","signatureEncoded","serializeJWT","typ","extractOntId","payloadToJSON","ontId","client","extractKeyId","rest_restClient","sendRawTransaction","_x6","_x7","fromHexLabel","_x8","_x9","Status","claim_Claim","_Message","Claim","useProof","get_default","checkAttest","getStatus","serializeProof","attesterId","subjectId","claim_GetStatusResponse","status","ATTESTED","issuerId","ver","@context","context","clm","content","clm-rev","revocation","GetStatusResponse","NOTFOUND","identity_ControlData","ControlData","_extends2","defineProperty_default","cd","identity_Identity","Identity","controls","control","toJson","identity","generateOntid","fromOntid","fromJson","TransactionNeo_TransactionNeo","TransactionNeo","scripts","serializeExclusiveData","inputs","outputs","getHashData","InvocationTransaction_InvocationTransaction","_TransactionNeo","InvocationTransaction","script","gas","NeoRpc_NeoRpc","NeoRpc","req","makeRequest","toHexString","Program_Program","Program","parameter","program","pks","SmartContract_SmartContract","SmartContract","addr","makeInvocationTransaction","attr1","attr2","TransactionInput_TransactionInput","TransactionInput","prevHash","prevIndex","input","TransactionOutput_TransactionOutput","TransactionOutput","assetId","scriptHash","output","readLong","RpcClient","oep8TxBuilder_Oep8State","Oep8State","tokenId","oep8TxBuilder_TransferFrom","TransferFrom","spender","FunctionNames","oep8TxBuilder_Oep8TxBuilder","Oep8TxBuilder","sendAddr","recvAddr","func","owner","compoundNum","wallet_Wallet","Wallet","defaultOntid","defaultAccountAddress","identities","accounts","createTime","wallet","toISOString","functionNames","oep4TxBuilder_formatBigNumParameter","valHex","oep4TxBuilder_Oep4State","Oep4State","oep4TxBuilder_Oep4TxBuilder","Oep4TxBuilder","sdk_HDKey","CONTRACT_HASH","NEO_NODE","sdk_SDK","SDK","node","SERVER_NODE","port","REST_PORT","restClient","SOCKET_PORT","socketClient","error","transformPassword","addIdentity","errResult","PreExec_ERROR","NETWORK_ERROR","_obj","SUCCESS","UNKNOWN_ONTID","wif","deserializeWIF","_obj2","_obj3","encryptedPrivateKeyObj","importIdentity","getDecryptError","walletStr","mnemonicHex","generateFromMnemonic","mnemonicEnc","decMne","importAccount","claimData","saltHex","claim","path","valueObj","Context","_obj4","serializePgp","addressObj","request","_obj5","token","fromAddress","toAddress","_result","_result2","_result3","_result4","identityDataStr","accountDataStr","_obj6","serializeWIF","keystore","keyStoreObj","_obj7","_obj8","getAllowance","getSmartCodeEvent","requiredSignatureNum","allRelatedPks","pubs","fromMultiPubKeys","_result5","txData","txDada","_result6","signedHash","recv","abiInfo","setParamsValue","makeInvokeTransaction","programFromParams","programFromPubKey","oep8","makeQueryBalanceOfTx","makeQueryBalancesTx","vals","makeQueryTotalBalanceTx","payerAddress","makeTransferTx","makeCompoundTx","oep4","queryBalanceOf","ins","cipherContent","setKeyPair","dec","governanceContractTxBuilder_contractAddress","makeRegisterCandidateTx","peerPubKey","keyNo","userAddr","initPos","makeUnregisterCandidateTx","makeApproveCandidateTx","makeRejectCandidateTx","makeVoteForPeerTx","peerPubKeys","posList","makeUnvoteForPeerTx","makeWithdrawTx","withdrawList","makeQuitNodeTx","makeChangeAuthorizationTx","maxAuthorize","makeSetPeerCostTx","peerCost","makeWithdrawFeeTx","makeAuthorizeForPeerTx","peerPubKeyList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","makeUnauthorizeForPeerTx","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","makeAddInitPosTx","peerPubkey","makeReduceInitPosTx","makeWithdrawPeerUnboundOngTx","getStorage","governanceContractTxBuilder_PeerAttributes","getSplitFeeAddress","governanceContractTxBuilder_SplitFeeAddress","getAuthorizeInfo","governanceContractTxBuilder_AuthorizeInfo","getGovernanceView","viewRes","view","governanceView","governanceContractTxBuilder_GovernanceView","getPeerPoolMap","key1","key2","keyP","readInt","governanceContractTxBuilder_PeerPoolItem","getGlobalParam","governanceContractTxBuilder_GlobalParam","getTotalStake","governanceContractTxBuilder_TotalStake","getPeerUnboundOng","totalStake","blockHeight","block","timeStamp","getBlockHeight","getBlockJson","Header","Timestamp","stake","timeOffset","GovernanceView","txhash","g","PeerPoolItem","totalPos","PeerAttributes","t2PeerCost","t1PeerCost","tPeerCost","field1","field2","field3","field4","pr","SplitFeeAddress","sfa","AuthorizeInfo","consensusPos","freezePos","newPos","withdrawPos","withdrawFreezePos","withdrawUnfreezePos","ai","GlobalParam","gp","feeHexStr","candidateFeeStr","candidateFee","minStr","minInitState","candidateNumStr","candidateNum","posLimitStr","posLimit","aStr","bStr","yStr","yita","pStr","penalty","TotalStake","ts","token_Transfers","Transfers","stateLen","token_State","token_TokenTransfer","TokenTransfer","tf","token_Contract","Contract","token_TransferFrom","oep5TxBuilder_Oep5Param","Oep5Param","toAcct","oep5TxBuilder_FunctionNames","oep5TxBuilder_Oep5TxBuilder","Oep5TxBuilder","oep5Param","oep5Params","src_ONT","TransactionBuilder","transactionBuilder_namespaceObject","OntAssetTxBuilder","ontAssetTxBuilder_namespaceObject","GovernanceTxBuilder","governanceContractTxBuilder_namespaceObject","utils","utils_namespaceObject","scrypt_namespaceObject","CONST","consts_namespaceObject","Token","token_namespaceObject","OntidContract","ontidContractTxBuilder_namespaceObject","rpcClient","Crypto","crypto_namespaceObject","ScriptBuilder","scriptBuilder_namespaceObject","NeoCore","neocore_namespaceObject","Oep4","oep4TxBuilder_namespaceObject","Oep8","oep8TxBuilder_namespaceObject","Oep5","oep5TxBuilder_namespaceObject","__webpack_exports__"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 40);\n","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"babel-runtime/regenerator\");","module.exports = require(\"babel-runtime/core-js/get-iterator\");","module.exports = require(\"axios\");","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","module.exports = require(\"crypto-js\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"babel-runtime/core-js/object/get-prototype-of\");","module.exports = require(\"babel-runtime/helpers/inherits\");","module.exports = require(\"babel-runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"babel-runtime/core-js/map\");","module.exports = require(\"elliptic\");","module.exports = require(\"bip39\");","module.exports = require(\"base64-url\");","module.exports = require(\"sm.js\");","module.exports = require(\"crypto\");","module.exports = require(\"babel-runtime/helpers/extends\");","module.exports = require(\"base-58\");","module.exports = require(\"long\");","module.exports = require(\"babel-runtime/helpers/get\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"js-sha3\");","module.exports = require(\"babel-runtime/core-js/object/assign\");","module.exports = require(\"babel-runtime/core-js/object/keys\");","module.exports = require(\"secure-random\");","module.exports = require(\"babel-runtime/helpers/defineProperty\");","module.exports = require(\"babel-runtime/helpers/typeof\");","module.exports = require(\"@ont-community/hdkey-secp256r1\");","module.exports = require(\"pkcs7\");","module.exports = require(\"wif\");","module.exports = require(\"uuid\");","module.exports = require(\"babel-runtime/helpers/objectWithoutProperties\");","module.exports = require(\"websocket-as-promised\");","module.exports = require(\"@ont-community/html5-websocket\");","module.exports = require(\"milagro-crypto-js\");","module.exports = require(\"scrypt-async\");","module.exports = require(\"babel-runtime/core-js/number/is-safe-integer\");","module.exports = require(\"babel-runtime/core-js/array/from\");","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport enum ERROR_CODE {\n    SUCCESS\t            =     0, // 成功\n    SESSION_EXPIRED     = 41001,   // 会话无效或已过期（ 需要重新登录） |\n    SERVICE_CEILING     = 41002,   // 达到服务上限 |\n    ILLEGAL_DATAFORMAT  = 41003,   // 不合法数据格式 |\n    INVALID_VERSION     = 41004,   // 不合法的版本 |\n    INVALID_METHOD      = 42001,   // 无效的方法 |\n    INVALID_PARAMS      = 42002,   // 无效的参数 |\n    INVALID_TRANSACTION = 43001,   // 无效的交易 |\n    INVALID_ASSET       = 43002,   // 无效的资产 |\n    INVALID_BLOCK       = 43003,   // 无效的块 |\n    UNKNOWN_TRANSACTION = 44001,   // 找不到交易 |\n    UNKNOWN_ASSET       = 44002,   // 找不到资产 |\n    UNKNOWN_BLOCK       = 44003,   // 找不到块 |\n    UNKNWN_CONTRACT     = 44004,   // 找不到合约 |\n    INTERNAL_ERROR      = 45001,   // 内部错误 |\n    SMARTCODE_ERROR     = 47001,   // 智能合约错误 |\n\n    UNKNOWN_ONTID       = 51000,   // 不存在的ONT ID,\n    NETWORK_ERROR       = 52000,   // 网络错误,\n    Decrypto_ERROR      = 53000,    // 解密错误,\n    INVALID_ADDR        = 53001,   // 地址验证失败\n\n    PreExec_ERROR = 54000   // 预执行错误\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nenum OPCODE {\n    // Constants\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\n    PUSHF = PUSH0,\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\n    PUSHBYTES75 = 0x4B,\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\n    PUSHT = PUSH1,\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\n\n    // Flow control\n    NOP = 0x61, // Does nothing.\n    JMP = 0x62,\n    JMPIF = 0x63,\n    JMPIFNOT = 0x64,\n    CALL = 0x65,\n    RET = 0x66,\n    APPCALL = 0x67,\n    SYSCALL = 0x68,\n    TAILCALL = 0x69,\n    DUPFROMALTSTACK = 0x6A,\n\n    // Stack\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\n    XDROP = 0x6D,\n    XSWAP = 0x72,\n    XTUCK = 0x73,\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\n    DROP = 0x75, // Removes the top stack item.\n    DUP = 0x76, // Duplicates the top stack item.\n    NIP = 0x77, // Removes the second-to-top stack item.\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\n    PICK = 0x79, // The item n back in the stack is copied to the top.\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\n    SWAP = 0x7C, // The top two items on the stack are swapped.\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\n\n    // Splice\n    CAT = 0x7E, // Concatenates two strings.\n    SUBSTR = 0x7F, // Returns a section of a string.\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\n    SIZE = 0x82, // Returns the length of the input string.\n\n    // Bitwise logic\n    INVERT = 0x83, // Flips all of the bits in the input.\n    AND = 0x84, // Boolean and between each bit in the inputs.\n    OR = 0x85, // Boolean or between each bit in the inputs.\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\n\n    // Arithmetic\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\n    INC = 0x8B, // 1 is added to the input.\n    DEC = 0x8C, // 1 is subtracted from the input.\n    // SAL           = 0x8D, // The input is multiplied by 2.\n    // SAR           = 0x8E, // The input is divided by 2.\n    NEGATE = 0x8F, // The sign of the input is flipped.\n    ABS = 0x90, // The input is made positive.\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\n    ADD = 0x93, // a is added to b.\n    SUB = 0x94, // b is subtracted from a.\n    MUL = 0x95, // a is multiplied by b.\n    DIV = 0x96, // a is divided by b.\n    MOD = 0x97, // Returns the remainder after dividing a by b.\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\n    MIN = 0xA3, // Returns the smaller of a and b.\n    MAX = 0xA4, // Returns the larger of a and b.\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\n\n    // Crypto\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\n    HASH160 = 0xA9,\n    HASH256 = 0xAA,\n    // tslint:disable-next-line:max-line-length\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\n    // tslint:disable-next-line:max-line-length\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\n\n    // Array\n\t// tslint:disable:indent\n    ARRAYSIZE  = 0xC0,\n\tPACK       = 0xC1,\n\tUNPACK     = 0xC2,\n\tPICKITEM   = 0xC3,\n\tSETITEM    = 0xC4,\n\tNEWARRAY   = 0xC5,\n\tNEWSTRUCT  = 0xC6,\n\tNEWMAP     = 0xC7,\n\tAPPEND     = 0xC8,\n\tREVERSE    = 0xC9,\n\tREMOVE     = 0xCA,\n\tHASKEY     = 0xCB,\n\tKEYS       = 0xCC,\n\tVALUES     = 0xCD,\n\n\t// Exception\n\tTHROW = 0xF0,\n\tTHROWIFNOT = 0xF1\n}\n\nexport default OPCODE;\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// export const ADDR_VERSION = '41';\nexport const ADDR_VERSION = '17';\n\nexport const DEFAULT_SCRYPT = {\n    cost: 4096, // 除以2时间减半\n    blockSize: 8,\n    parallel: 8,\n    size: 64\n};\n\n// specified by oep, same as bip38\nexport const OEP_HEADER = '0142';\n\nexport const OEP_FLAG = 'e0';\n\n// Ont://nativeMethod?param1=xxx&param2=yyy\nexport const WEBVIEW_SCHEME = 'Ont';\n\nexport const DEFAULT_ALGORITHM = {\n    algorithm: 'ECDSA',\n    parameters: {\n        curve: 'P-256' // also called secp256r1\n    }\n};\n\nexport const DEFAULT_SM2_ID = '1234567812345678';\n\nexport const TEST_NODE = 'polaris1.ont.io'; // 0.9\n// export const TEST_NODE = '139.219.129.26'; // 0.81\n// export const TEST_NODE = '192.168.50.74';\n// export const TEST_NODE = '127.0.0.1';\n\nexport const MAIN_NODE = 'dappnode1.ont.io';\n\nexport const HTTP_REST_PORT = '20334';\nexport const HTTP_WS_PORT = '20335';\nexport const HTTP_JSON_PORT = '20336';\n\nexport const REST_API = {\n    getBalance: '/api/v1/balance',\n    sendRawTx: '/api/v1/transaction',\n    getMerkleProof: '/api/v1/merkleproof' // end with /txHash\n};\n\nexport const ONT_NETWORK = {\n    MAIN: 'MainNet',\n    TEST: 'TestNet'\n};\n\nexport const TEST_ONT_URL = {\n    SOCKET_URL: `ws://${TEST_NODE}:${HTTP_WS_PORT}`,\n\n    RPC_URL: `http://${TEST_NODE}:${HTTP_JSON_PORT}`,\n\n    REST_URL: `http://${TEST_NODE}:${HTTP_REST_PORT}`,\n\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\n};\n\nexport const MAIN_ONT_URL = {\n    SOCKET_URL: `ws://${MAIN_NODE}:${HTTP_WS_PORT}`,\n\n    RPC_URL: `http://${MAIN_NODE}:${HTTP_JSON_PORT}/`,\n\n    REST_URL: `http://${MAIN_NODE}:${HTTP_REST_PORT}/`,\n\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\n\n};\n\nexport const TOKEN_TYPE = {\n    ONT: 'ONT',\n    ONG: 'ONG'\n};\n\nexport const DEFAULT_GAS_LIMIT = 30000;\n\nexport const NATIVE_INVOKE_NAME = 'Ontology.Native.Invoke';\n\nexport const TX_MAX_SIG_SIZE = 16;\n\n// tslint:disable-next-line:quotemark\nexport const ONT_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\n\nexport const UNBOUND_GENERATION_AMOUNT = [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n\nexport const UNBOUND_TIME_INTERVAL = 31536000;\n\nexport const ONT_TOTAL_SUPPLY = 1000000000;\n\nexport const GENESIS_BLOCK_TIMESTAMP = 1530316800;\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport axios from 'axios';\nimport * as bip39 from 'bip39';\nimport * as cryptoJS from 'crypto-js';\nimport * as Long from 'long';\nimport * as secureRandom from 'secure-random';\nimport { ONT_TOTAL_SUPPLY, UNBOUND_GENERATION_AMOUNT, UNBOUND_TIME_INTERVAL, WEBVIEW_SCHEME } from './consts';\nimport { ERROR_CODE } from './error';\n/**\n * Turn hex string into array buffer\n * @param str hex string\n */\nexport function hexstring2ab(str: string): number[] {\n    const result = [];\n\n    while (str.length >= 2) {\n        result.push(parseInt(str.substring(0, 2), 16));\n        str = str.substring(2, str.length);\n    }\n\n    return result;\n}\n\n/**\n * Turn array buffer into hex string\n * @param arr Array like value\n */\nexport function ab2hexstring(arr: any): string {\n    let result: string = '';\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\n        let str = uint8Arr[i].toString(16);\n        str = str.length === 0\n            ? '00'\n            : str.length === 1\n                ? '0' + str\n                : str;\n        result += str;\n    }\n    return result;\n}\n\n /**\n  * Turn ArrayBuffer or array-like oject into normal string\n  * @param buf\n  */\nexport function ab2str(buf: ArrayBuffer | number[]): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n\n/**\n * Turn normal string into ArrayBuffer\n * @param str Normal string\n */\nexport function str2ab(str: string) {\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\n\n/**\n * Turn normal string into hex string\n * @param str Normal string\n */\nexport function str2hexstr(str: string) {\n    return ab2hexstring(str2ab(str));\n}\n\n/**\n * Turn hex string into normal string\n * @param str Hex string\n */\nexport function hexstr2str(str: string) {\n    return ab2str(hexstring2ab(str));\n}\n\n/**\n * return the (length of bytes) + bytes\n * @param hex Hex string\n */\nexport function hex2VarBytes(hex: string) {\n    let result = '';\n    result += num2VarInt(hex.length / 2);\n    result += hex;\n    return result;\n}\n\n/**\n * return the length of string(bytes) + string(bytes)\n * @param str Normal string\n */\nexport function str2VarBytes(str: string) {\n    let result = '';\n    const hex = str2hexstr(str);\n    const hexLen = num2VarInt(hex.length / 2);\n    result += hexLen;\n    result += hex;\n    return result;\n}\n\n/**\n * return the byte of boolean value\n * @param v\n */\nexport function bool2VarByte(v: boolean) {\n    return v ? '01' : '00';\n}\n\n/**\n * Do xor operation with two strings\n * @param str1 Hex string\n * @param str2 Hex string\n */\nexport function hexXor(str1: string, str2: string): string {\n    if (str1.length !== str2.length) {\n        throw new Error('strings are disparate lengths');\n    }\n    if (str1.length % 2 !== 0) {\n        throw new Error('strings must be hex');\n    }\n\n    const result = new ArrayBuffer(str1.length / 2);\n    const result8 = new Uint8Array(result);\n    for (let i = 0; i < str1.length; i += 2) {\n        // tslint:disable-next-line:no-bitwise\n        result8[i / 2] = (parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\n    }\n    return ab2hexstring(result);\n}\n\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {number} num\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\n    if (num < 0) {\n        throw new RangeError('num must be >=0');\n    }\n    if (size % 1 !== 0) {\n        throw new Error('size must be a whole integer');\n    }\n    if (!Number.isSafeInteger(num)) {\n        throw new RangeError(`num (${num}) must be a safe integer`);\n    }\n\n    size = size * 2;\n    let hexstring = num.toString(16);\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n    if (littleEndian) {\n        hexstring = reverseHex(hexstring);\n    }\n    return hexstring;\n};\n\n/**\n * Converts a number to a hex\n * @param {number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\nexport const num2VarInt = (num: number) => {\n    if (num < 0xfd) {\n        return num2hexstring(num);\n    } else if (num <= 0xffff) {\n        // uint16\n        return 'fd' + num2hexstring(num, 2, true);\n    } else if (num <= 0xffffffff) {\n        // uint32\n        return 'fe' + num2hexstring(num, 4, true);\n    } else {\n        // uint64\n        return 'ff' + num2hexstring(num, 8, true);\n    }\n};\n\n/**\n * Reverses a hex string, 2 chars as 1 byte\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} reversed hex string.\n */\nexport const reverseHex = (hex: string) => {\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Incorrect Length: ${hex}`);\n    }\n    let out = '';\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\n        out += hex.substr(i, 2);\n    }\n    return out;\n};\n\nexport function bigIntFromBytes(bytes: string): Long {\n    const buff = Buffer.from(bytes, 'hex');\n    let data = Array.from(buff.subarray(0));\n    const b = data[data.length - 1];\n\n    if (b >> 7 === 1) {\n        data = data.concat(Array(8 - data.length).fill(255));\n    }\n    return Long.fromBytesLE(data);\n}\n\nexport function bigIntToBytes(value: Long) {\n    let data = value.toBytesLE();\n    const negData = value.neg().toBytesLE();\n    let stop;\n    if (value.isNegative()) {\n        stop = 255;\n    } else {\n        stop = 0;\n    }\n    let b = stop;\n    let pos = 0;\n    for (let i = data.length - 1; i >= 0; i--) {\n        if (data[i] !== stop) {\n            b = value.isNegative() ? negData[i] : data[i];\n            pos = i + 1;\n            break;\n        }\n    }\n    data = data.slice(0, pos);\n\n    if (b >> 7 === 1) {\n        data.push(value.isNegative() ? 255 : 0);\n    }\n    return new Buffer(data).toString('hex');\n}\n\n/**\n * @class StringReader\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\n * @param {string} str - The string to read.\n */\nexport class StringReader {\n    str: string;\n    pos: number;\n    size: number;\n    constructor(str = '') {\n        if (str.length % 2 !== 0) {\n            throw new Error('Param\\'s length is not even.');\n        }\n        this.str = str;\n        this.pos = 0;\n        this.size = this.str.length / 2;\n    }\n\n    /**\n     * Checks if reached the end of the string.\n     */\n    isEmpty() {\n        return this.pos >= this.str.length;\n    }\n\n    /**\n     * Reads some bytes.\n     * @param {number} bytes - Number of bytes to read\n     */\n    read(bytes: number) {\n        if (this.isEmpty()) {\n            throw new Error('StringReader reached the end.');\n        }\n        const out = this.str.substr(this.pos, bytes * 2);\n        this.pos += bytes * 2;\n        return out;\n    }\n\n    unreadBytes(bytes: number) {\n        if ( (this.pos - bytes * 2) < 0 ) {\n            throw new Error('Can not unread too many bytes.');\n        }\n        this.pos -= bytes * 2;\n        return;\n    }\n\n    /**\n     * Reads string terminated by NULL.\n     */\n    readNullTerminated(): string {\n        const index = this.str.indexOf('00', this.pos);\n        if (index === -1) {\n            throw new Error('No ending NULL found');\n        }\n\n        const out = this.str.substring(this.pos, index);\n        this.pos = index + 2;\n        return out;\n    }\n\n    /**\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\n     */\n    readNextBytes() {\n        const bytesToRead = this.readNextLen();\n        if (bytesToRead === 0) {\n            return '';\n        }\n\n        return this.read(bytesToRead);\n    }\n\n    /**\n     * Reads one byte as int, which may indicates the length of following bytes to read.\n     * @returns {number}\n     */\n    readNextLen() {\n        let len = parseInt(this.read(1), 16);\n\n        if (len === 0xfd) {\n            len = parseInt(reverseHex(this.read(2)), 16);\n        } else if (len === 0xfe) {\n            len = parseInt(reverseHex(this.read(4)), 16);\n        } else if (len === 0xff) {\n            len = parseInt(reverseHex(this.read(8)), 16);\n        }\n\n        return len;\n    }\n\n    /**\n     * Read Uint8\n     */\n    readUint8() {\n        return parseInt(reverseHex(this.read(1)), 16);\n    }\n\n    /**\n     * read 2 bytes as uint16 in littleEndian\n     */\n    readUint16() {\n        return parseInt(reverseHex(this.read(2)), 16);\n    }\n\n    /**\n     * Read 4 bytes as uint32 in littleEndian\n     */\n    readUint32() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 4 bytes as int in littleEndian\n     */\n    readInt() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 8 bytes as long in littleEndian\n     */\n    readLong() {\n        return parseInt(reverseHex(this.read(8)), 16);\n    }\n\n    readBoolean() {\n        return parseInt(this.read(1), 16) !== 0;\n    }\n}\n\nexport class EventEmitter {\n    handlers: any = {};\n\n    // register event type and handler\n    on(type: string, handler: () => void) {\n        if (typeof this.handlers[type] === 'undefined') {\n            this.handlers[type] = [];\n        }\n        this.handlers[type].push(handler);\n    }\n\n    /**\n     * trigger event\n     * @param { string } type\n     * @param { any } event , is the parameter\n     */\n    trigger(type: string, event?: any) {\n        if (this.handlers[type] instanceof Array) {\n            const handlers = this.handlers[type];\n            for (let i = 0, len = handlers.length; i < len; i++) {\n                handlers[i](event);\n            }\n        }\n    }\n\n    // remove event listener\n    off(type: string) {\n        delete this.handlers[type];\n    }\n}\n\nexport const sendBackResult2Native = (result: string, callback: string) => {\n    if (window && window.prompt) {\n        window.prompt(`${WEBVIEW_SCHEME}://${callback}?params=${result}`);\n    }\n};\n\nexport const axiosPost = (url: string, params: any) => {\n    return axios.post(url, params).then((res: any) => {\n        // tslint:disable-next-line:no-console\n        console.log('axios res:' + res);\n        return res;\n    }).catch((err: any) => {\n        // tslint:disable-next-line:no-console\n        console.log('axios res:' + JSON.stringify(err));\n\n        return err;\n    });\n};\n\n/**\n * Gets current time in unix timestamp format.\n */\nexport function now(): number {\n    return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Computes sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function sha256(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const sha = cryptoJS.SHA256(hex).toString();\n    return sha;\n}\n\n/**\n * Computes ripemd-160 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function ripemd160(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\n    return ripemd;\n}\n\n/**\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function hash160(SignatureScript: string): string {\n    return ripemd160(sha256(SignatureScript));\n}\n\n/**\n * Generates random ArrayBuffer of specified length.\n *\n * @param len Length of the array to generate\n */\nexport function generateRandomArray(len: number): ArrayBuffer {\n    return secureRandom(len);\n}\n\n/**\n * Generates random ArrayBuffer of specified length encoded as hex string\n *\n * @param len Length of the array to generate\n */\nexport function randomBytes(len: number) {\n    return ab2hexstring(generateRandomArray(len));\n}\n\nexport function generateMnemonic(size: number = 16): string {\n    const random = ab2hexstring(generateRandomArray(size));\n    return bip39.entropyToMnemonic(random);\n}\n\nexport function parseMnemonic(str: string) {\n    return bip39.mnemonicToEntropy(str);\n}\n\nexport function varifyPositiveInt(v: number) {\n    if (!/^[1-9]\\d*$/.test(v.toString())) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    return;\n}\n\nexport function isBase64(str: string): boolean {\n    return Buffer.from(str, 'base64').toString('base64') === str;\n}\n\nexport function isHexString(str: string): boolean {\n    const regexp = /^[0-9a-fA-F]+$/;\n    return regexp.test(str) && (str.length % 2 === 0);\n}\n\nexport function unboundDeadline() {\n    let count = 0;\n    for (const m of UNBOUND_GENERATION_AMOUNT) {\n        count += m;\n    }\n    count *= UNBOUND_TIME_INTERVAL;\n    const numInterval = UNBOUND_GENERATION_AMOUNT.length;\n    if (UNBOUND_GENERATION_AMOUNT[numInterval - 1] !== 1 ||\n        ! ((count - UNBOUND_TIME_INTERVAL < ONT_TOTAL_SUPPLY) && ONT_TOTAL_SUPPLY <= count)) {\n        throw new Error('incompatible constants setting');\n    }\n    return UNBOUND_TIME_INTERVAL * numInterval - (count - ONT_TOTAL_SUPPLY);\n}\n\nexport function calcUnboundOng(balance: number, startOffset: number, endOffset: number) {\n    let amount = 0;\n    if (startOffset >= endOffset) {\n        return 0;\n    }\n    const UNBOUND_DEADLINE = unboundDeadline();\n    if (startOffset < UNBOUND_DEADLINE) {\n        let ustart = Math.floor(startOffset / UNBOUND_TIME_INTERVAL);\n        let istart = startOffset % UNBOUND_TIME_INTERVAL;\n        if (endOffset >= UNBOUND_DEADLINE) {\n            endOffset = UNBOUND_DEADLINE;\n        }\n        const uend = Math.floor(endOffset / UNBOUND_TIME_INTERVAL);\n        const iend = endOffset % UNBOUND_TIME_INTERVAL;\n        while (ustart < uend) {\n            amount += (UNBOUND_TIME_INTERVAL - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\n            ustart++;\n            istart = 0;\n        }\n        amount += (iend - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\n    }\n    return amount * balance;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport * as Long from 'long';\nimport { ERROR_CODE } from './../error';\nimport { bigIntToBytes, reverseHex } from './../utils';\n\nconst SIZE = 8;\n/**\n * Big positive integer base on BigNumber\n */\nexport default class BigInt {\n    /**\n     * Create BigInt from string\n     * @param hex Byte string value\n     */\n    static fromHexstr(hex: string): BigInt {\n        hex = reverseHex(hex);\n        const bi = new BigNumber(hex, 16).toString();\n        return new BigInt(bi);\n    }\n\n    value: string | number;\n    ledgerCompatible: boolean;\n\n    constructor(value: string | number, ledgerCompatible: boolean = true) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.value = value;\n        this.ledgerCompatible = ledgerCompatible;\n    }\n\n    /**\n     * Create hex string from BigInt\n     */\n    toHexstr(): string {\n        const bi = Long.fromValue(this.value);\n        let hex = bigIntToBytes(bi);\n        if (this.ledgerCompatible && (hex.length % 2 !== 0 || hex.length < 16)) {\n            hex = hex + '0'.repeat(SIZE * 2 - hex.length);\n        }\n        return hex;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Schema used during signing and verification of signature.\n */\nexport class SignatureScheme {\n    static values: SignatureScheme[] = [];\n\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\n\n    /**\n     * Finds Signature schema corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation in JWS.\n     *\n     * @param label Label\n     */\n    static fromLabelJWS(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    labelJWS: string;\n\n    constructor(label: string, hex: number, labelJWS: string) {\n        this.label = label;\n        this.hex = hex;\n        this.labelJWS = labelJWS;\n\n        SignatureScheme.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Type of key. ECDSA is the default one to use.\n */\nexport class KeyType {\n    static values: KeyType[] = [];\n\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\n\n    /**\n     * Finds Key type corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): KeyType {\n        const item = KeyType.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Key type corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): KeyType {\n        const item = KeyType.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    defaultSchema: SignatureScheme;\n\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\n        this.label = label;\n        this.hex = hex;\n        this.defaultSchema = defaultSchema;\n\n        KeyType.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Elliptic curve used.\n */\nexport class CurveLabel {\n    static values: CurveLabel[] = [];\n\n    static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\n    static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\n    static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\n    static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\n    static SM2P256V1 = new CurveLabel('sm2p256v1', 20, 'sm2p256v1');\n    static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\n\n    /**\n     * Finds Curvecorresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): CurveLabel {\n        const item = CurveLabel.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Curve corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): CurveLabel {\n        const item = CurveLabel.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n    hex: number;\n    preset: string;\n\n    constructor(label: string, hex: number, preset: string) {\n        this.label = label;\n        this.hex = hex;\n        this.preset = preset;\n\n        CurveLabel.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\nimport { sm3 } from 'sm.js';\nimport { DEFAULT_ALGORITHM } from '../consts';\nimport { hexstring2ab } from '../utils';\nimport { CurveLabel } from './CurveLabel';\nimport { KeyType } from './KeyType';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Specific parameters for the key type.\n */\nexport class KeyParameters {\n    /**\n     * Create KeyParameters from json.\n     * @param json JsonKeyParameters\n     */\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\n        return new KeyParameters(\n        CurveLabel.fromLabel(json.curve)\n        );\n    }\n    curve: CurveLabel;\n\n    constructor(curve: CurveLabel) {\n        this.curve = curve;\n    }\n\n    /**\n     * Serialize KeyParameters to json.\n     */\n    serializeJson(): JsonKeyParameters {\n        return {\n            curve: this.curve.label\n        };\n    }\n}\n\n/**\n * Common representation of private or public key\n */\nexport class Key {\n    /**\n     * Algorithm used for key generation.\n     */\n    algorithm: KeyType;\n\n    /**\n     * Parameters of the algorithm.\n     */\n    parameters: KeyParameters;\n\n    /**\n     * Key data.\n     */\n    key: string;\n\n    /**\n     * Creates Key.\n     *\n     * If no algorithm or parameters are specified, default values will be used.\n     * This is strongly discurraged, because it will forbid using other Key types.\n     * Therefore use it only for testing.\n     *\n     * @param key Hex encoded key value\n     * @param algorithm Key type\n     * @param parameters Parameters of the key type\n     */\n    constructor(key: string, algorithm?: KeyType, parameters?: KeyParameters) {\n        this.key = key;\n\n        if (algorithm === undefined) {\n            algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n        }\n\n        if (parameters === undefined) {\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n        }\n\n        this.algorithm = algorithm;\n        this.parameters = parameters;\n    }\n\n    /**\n     * Computes hash of message using hashing function of signature schema.\n     *\n     * @param msg Hex encoded input data\n     * @param scheme Signing schema to use\n     */\n    computeHash(msg: string, scheme: SignatureScheme): string {\n        switch (scheme) {\n        case SignatureScheme.ECDSAwithSHA224:\n            return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA256:\n            return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA384:\n            return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.EDDSAwithSHA512:\n            return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.ECDSAwithSHA3_224:\n            return sha3_224(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_256:\n            return sha3_256(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_384:\n            return sha3_384(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithSHA3_512:\n            return sha3_512(hexstring2ab(msg));\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\n        case SignatureScheme.SM2withSM3:\n            return (new sm3()).sum(hexstring2ab(msg), 'hex');\n        default:\n            throw new Error('Unsupported hash algorithm.');\n        }\n    }\n\n    /**\n     * Tests if signing schema is compatible with key type.\n     *\n     * @param schema Signing schema to use\n     */\n    isSchemaSupported(schema: SignatureScheme): boolean {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.algorithm === KeyType.ECDSA;\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.algorithm === KeyType.EDDSA;\n        case SignatureScheme.SM2withSM3:\n            return this.algorithm === KeyType.SM2;\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Gets JSON representation of the Key (Public/Private).\n     */\n    serializeJson(): JsonKey {\n        return {\n            algorithm: this.algorithm.label,\n            parameters: this.parameters.serializeJson(),\n            key: this.key\n        };\n    }\n}\n\n/**\n * Json representation of the Key.\n */\nexport interface JsonKey {\n    algorithm: string;\n    parameters: JsonKeyParameters;\n    key: string | null;\n    external?: any | null;\n}\n\n/**\n * Json representation of the Key parameters.\n */\nexport interface JsonKeyParameters {\n    curve: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as elliptic from 'elliptic';\nimport { sm2 } from 'sm.js';\nimport { DEFAULT_SM2_ID } from '../consts';\nimport { hexstr2str, hexstring2ab, num2hexstring, StringReader } from '../utils';\nimport { CurveLabel } from './CurveLabel';\nimport { Key, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { Signable } from './signable';\nimport { Signature } from './Signature';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Class to manage the public key with some userful functions.\n */\nexport class PublicKey extends Key {\n    /**\n     * Creates PublicKey from Hex representation.\n     *\n     * @param sr String reader\n     * @param length Byte length of the serialized object\n     *\n     */\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\n        if (length === 33) { // ECDSA\n            const algorithm = KeyType.ECDSA;\n            const curve = CurveLabel.SECP256R1;\n            const pk = sr.read(33);\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\n        } else {\n            const algorithmHex = parseInt(sr.read(1), 16);\n            const curveHex = parseInt(sr.read(1), 16);\n            const pk = sr.read(length - 2);\n\n            return new PublicKey(\n                pk,\n                KeyType.fromHex(algorithmHex),\n                new KeyParameters(CurveLabel.fromHex(curveHex))\n            );\n        }\n    }\n\n    /**\n     * Verifies if the signature was created with private key corresponding to supplied public key\n     * and was not tampered with using signature schema.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param signature Signature object\n     */\n    verify(msg: string | Signable, signature: Signature): boolean {\n        if (!this.isSchemaSupported(signature.algorithm)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.getSignContent();\n        }\n\n        let hash: string;\n        if (signature.algorithm === SignatureScheme.SM2withSM3) {\n            // library sm.js (SM2withSM3) has implemented hashing as part of verification, therefore it is skipped\n            hash = msg;\n        } else {\n            hash = this.computeHash(msg, signature.algorithm);\n        }\n\n        return this.verifySignature(hash, signature.value, signature.algorithm);\n    }\n\n    /**\n     * Serializes public key to Hex representation.\n     *\n     * Length definition is not included.\n     */\n    serializeHex(): string {\n        let result = '';\n        switch (this.algorithm) {\n        case KeyType.ECDSA:\n            result += this.key;\n            break;\n        case KeyType.EDDSA:\n        case KeyType.SM2:\n            result += num2hexstring(this.algorithm.hex);\n            result += num2hexstring(this.parameters.curve.hex);\n            result += this.key;\n            break;\n        }\n        return result;\n    }\n\n    /**\n     * For internal use.\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     * @param schema Signature scheme to use\n     */\n    verifySignature(hash: string, signature: string, schema: SignatureScheme): boolean {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.verifyEcDSASignature(hash, signature);\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.verifyEdDSASignature(hash, signature);\n        case SignatureScheme.SM2withSM3:\n            return this.verifySM2Signature(hash, signature);\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifyEcDSASignature(hash: string, signature: string): boolean {\n        const r = signature.substr(0, 64);\n        const s = signature.substr(64, 64);\n\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        return ec.verify(hash, { r, s }, this.key, 'hex');\n    }\n\n    /**\n     * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifyEdDSASignature(hash: string, signature: string): boolean {\n        const r = signature.substr(0, 64);\n        const s = signature.substr(64, 64);\n\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        return eddsa.verify(hash, { r, s }, this.key, 'hex');\n    }\n\n    /**\n     * Verifies SM2 signature of message hash.\n     *\n     * Only default SM2 ID is supported.\n     *\n     * @param hash Message hash\n     * @param signature Hex encoded signature\n     */\n    verifySM2Signature(hash: string, signature: string): boolean {\n        const reader = new StringReader(signature);\n\n        const id = hexstr2str(reader.readNullTerminated());\n        if (id !== DEFAULT_SM2_ID && id !== '') {\n            throw new Error('Unsupported SM2 id used.');\n        }\n\n        const r = reader.read(32);\n        const s = reader.read(32);\n\n        const keyPair = sm2.SM2KeyPair(this.key);\n        return keyPair.verify(hexstring2ab(hash), r, s);\n    }\n}\n\n/**\n * Public key status enumaration.\n */\nexport class PublicKeyStatus {\n    static values: PublicKeyStatus[] = [];\n\n    static IN_USE = new PublicKeyStatus('in use');\n\n    static REVOKED = new PublicKeyStatus('revoked');\n\n    /**\n     * Finds Public key status corresponding to specified label representation.\n     *\n     * @param label Hex encoded label\n     */\n    static fromHexLabel(hexLabel: string): PublicKeyStatus {\n        const label = hexstr2str(hexLabel);\n\n        const item = PublicKeyStatus.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    label: string;\n\n    constructor(label: string) {\n        this.label = label;\n\n        PublicKeyStatus.values.push(this);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as elliptic from 'elliptic';\nimport { sm2 } from 'sm.js';\nimport BigInt from '../common/bigInt';\nimport { KeyType } from '../crypto/KeyType';\nimport { PublicKey } from '../crypto/PublicKey';\nimport { ERROR_CODE } from '../error';\nimport { num2hexstring, StringReader } from './../utils';\nimport opcode from './opcode';\n// The sorting rules is as follows:\n//    1. if keys have different types, then sorted by the KeyType value.\n//    2. else,\n//       2.1. ECDSA or SM2:\n//           2.1.1. if on different curves, then sorted by the curve label.\n//           2.1.2. else if x values are different, then sorted by x.\n//           2.1.3. else sorted by y.\n//       2.2. EdDSA: sorted by the byte sequence directly.\nexport function comparePublicKeys(a: PublicKey, b: PublicKey) {\n    if (a.algorithm !== b.algorithm) {\n        return a.algorithm.hex - b.algorithm.hex;\n    }\n    switch (a.algorithm) {\n    case KeyType.ECDSA:\n        const ec = new elliptic.ec(a.parameters.curve.preset);\n        const paKey = ec.keyFromPublic(a.key, 'hex', true);\n        const pbKey = ec.keyFromPublic(b.key, 'hex', true);\n        const pa = paKey.getPublic();\n        const pb = pbKey.getPublic();\n        if (pa.getX() !== pb.getX()) {\n            return pa.getX() - pb.getX();\n        } else {\n            return pa.getY() - pb.getY();\n        }\n    case KeyType.SM2:\n        const pka = new sm2.SM2KeyPair();\n        const pkb = new sm2.SM2KeyPair();\n        pka._pubFromString(a.key);\n        pkb._pubFromString(b.key);\n        if (pka.getX().toString() !== pkb.getX().toString()) {\n            return Number(pka.getX().toString()) - Number(pkb.getX().toString());\n        } else {\n            return Number(pka.getY().toString()) - Number(pkb.getY().toString());\n        }\n    case KeyType.EDDSA:\n        return Number(a.key) - Number(b.key);\n    default:\n        return 0;\n    }\n}\n\nexport function pushOpCode(op: opcode): string {\n    return num2hexstring(op);\n}\n\nexport function pushPubKey(pk: PublicKey): string {\n    const pkStr = pk.serializeHex();\n    return pushBytes(pkStr);\n}\n\nexport function pushBigInt(num: number): string {\n    if (num === -1) {\n        return num2hexstring(opcode.PUSHM1);\n    }\n    if (num === 0) {\n        return num2hexstring(opcode.PUSH0);\n    }\n    if (num > 0 && num <= 16) {\n        return num2hexstring(opcode.PUSH1 - 1 + num);\n    }\n    return num2hexstring(num, 8, true);\n}\n\nexport function pushNum(num: number): string {\n    if ( num === 0 ) {\n        return pushOpCode(opcode.PUSH0);\n    } else if ( num <= 16 ) {\n        return num2hexstring(num - 1 + opcode.PUSH1);\n    }\n    const bint = new BigInt(num.toString());\n    return pushBytes(bint.toHexstr());\n}\n\nexport function pushBytes(hexstr: string): string {\n    let result = '';\n    if (hexstr.length === 0) {\n        throw new Error('pushBytes error, hexstr is empty.');\n    }\n    const len = hexstr.length / 2;\n    if (len <= opcode.PUSHBYTES75 + 1 - opcode.PUSHBYTES1 ) {\n        result += num2hexstring(len + opcode.PUSHBYTES1 - 1);\n    } else if (len < 0x100) {\n        result += num2hexstring(opcode.PUSHDATA1);\n        result += num2hexstring(len);\n    } else if (len < 0x10000) {\n        result += num2hexstring(opcode.PUSHDATA2);\n        result += num2hexstring(len, 2, true);\n    } else if (len < 0x100000000) {\n        result += num2hexstring(opcode.PUSHDATA4);\n        result += num2hexstring(len, 4, true);\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    result += hexstr;\n    return result;\n}\n\nexport function programFromPubKey(pk: PublicKey): string {\n    let result = '';\n    result += pushPubKey(pk);\n    result += pushOpCode(opcode.CHECKSIG);\n    return result;\n}\n\nexport function programFromMultiPubKey(pubkeys: PublicKey[], m: number): string {\n    const n = pubkeys.length;\n    if (!(1 <= m && m <= n && n <= 1024)) {\n        throw new Error('Wrong multi-sig param');\n    }\n    // const pkStrList = pubkeys.map( (p) => p.serializeHex());\n    // pkStrList.sort();\n\n    pubkeys.sort(comparePublicKeys);\n\n    let result = '';\n    result += pushNum(m);\n\n    for (const pk of pubkeys) {\n        result += pushBytes(pk.serializeHex());\n    }\n    result += pushNum(n);\n    result += pushOpCode(opcode.CHECKMULTISIG);\n    return result;\n}\n\nexport function programFromParams(sigs: string[]): string {\n    let result = '';\n    sigs.sort();\n    for ( const s of sigs) {\n        result += pushBytes(s);\n    }\n    return result;\n}\n\nexport function readOpcode(sr: StringReader) {\n    return parseInt(sr.read(1), 16);\n}\n\nexport function readNum(sr: StringReader) {\n    let code;\n    try {\n        code = readOpcode(sr);\n    } catch (err) {\n        return 0;\n    }\n    let num = code - opcode.PUSH1 + 1;\n    if (code === opcode.PUSH0) {\n        readOpcode(sr);\n        return 0;\n    } else if (1 <= num && num <= 16) {\n        readOpcode(sr);\n        return num;\n    }\n    const bint = BigInt.fromHexstr(sr.readNextBytes());\n    num = parseInt(bint.value.toString(), 10);\n    return num;\n}\n\nexport function readBytes(sr: StringReader) {\n    const code = readOpcode(sr);\n    let keylen;\n    if (code === opcode.PUSHDATA4) {\n        keylen = sr.readUint32();\n    } else if (code === opcode.PUSHDATA2) {\n        keylen = sr.readUint16();\n    } else if (code === opcode.PUSHDATA1) {\n        keylen = sr.readUint8();\n    } else if (code <= opcode.PUSHBYTES75 && code >= opcode.PUSHBYTES1) {\n        keylen = code - opcode.PUSHBYTES1 + 1;\n    } else {\n        throw new Error('unexpected opcode: ' + code);\n    }\n    return sr.read(keylen);\n}\n\nexport function readPubKey(sr: StringReader) {\n    const pkStr = sr.readNextBytes();\n    return PublicKey.deserializeHex(new StringReader(pkStr));\n}\n\nexport function getParamsFromProgram(hexstr: string): string[] {\n    const sigs = [];\n    const sr = new StringReader(hexstr);\n    while (!sr.isEmpty()) {\n        sigs.push(readBytes(sr));\n    }\n    return sigs;\n}\n\nexport class ProgramInfo {\n    M: number;\n    pubKeys: PublicKey[];\n}\nexport function getProgramInfo(hexstr: string): ProgramInfo {\n    const info = new ProgramInfo();\n    const end = parseInt(hexstr.substr(-2, 2), 16);\n    if (end === opcode.CHECKSIG) {\n        const sr = new StringReader(hexstr);\n        const pk = readPubKey(sr);\n        info.M = 1;\n        info.pubKeys = [pk];\n        return info;\n    } else if (end === opcode.CHECKMULTISIG) {\n        const sr = new StringReader(hexstr);\n        const m = parseInt(sr.read(1), 16) - opcode.PUSH1 + 1;\n        const n = parseInt(hexstr.substr(-4, 2), 16) - opcode.PUSH1 + 1;\n        info.M = m;\n        info.pubKeys = [];\n        for (let i = 0; i < n; i++) {\n            const key = readPubKey(sr);\n            info.pubKeys.push(key);\n        }\n        // const n = readNum(sr);\n        return info;\n    } else {\n        throw new Error('Unsupported program.');\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nexport enum ParameterType  {\n    Boolean = 'Boolean',\n    Integer = 'Integer',\n    ByteArray = 'ByteArray',\n    Interface = 'Interface',\n    Array = 'Array',\n    Struct = 'Struct',\n    Map = 'Map',\n    String  = 'String',\n    Int = 'Integer',\n    Long = 'Long', // value should be string\n    IntArray = 'IntArray',\n    LongArray = 'LongArray',\n    Address = 'Address'\n}\n\nexport enum ParameterTypeVal {\n    ByteArray = 0x00,\n    Boolean = 0x01,\n    Integer = 0x02,\n    Interface = 0x40,\n    Array = 0x80,\n    Struct = 0x81,\n    Map = 0x82\n}\n\n/**\n * Decribes the parameter.\n */\nexport class Parameter {\n    public name: string;\n    public type: ParameterType;\n    public value: any;\n    constructor(name: string, type: ParameterType, value: any) {\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n\n    getName(): string {\n        return this.name;\n    }\n\n    getType(): ParameterType {\n        return this.type;\n    }\n\n    getValue(): any {\n        return this.value;\n    }\n\n    setValue(value: any): boolean {\n        if (value.type === this.type && value.name === this.name && value.value != null) {\n            this.value = value.value;\n            return true;\n        }\n        return false;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Struct is a special kind of parameter that used in smart contract.\n */\nexport default class Struct {\n    list: any[];\n\n    constructor() {\n        this.list = [];\n    }\n    /**\n     * Add arguments to struct.\n     * @param args Array of some kinds of value.\n     * Boolean, number, string, Address and Struct are supported.\n     */\n    add(...args: any[]) {\n        for (const a of args) {\n            this.list.push(a);\n        }\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../common/bigInt';\nimport { ERROR_CODE } from '../error';\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { Parameter, ParameterType, ParameterTypeVal } from '../smartcontract/abi/parameter';\nimport Struct from '../smartcontract/abi/struct';\nimport { bigIntFromBytes, hexstr2str, num2hexstring, num2VarInt, str2hexstr, StringReader } from '../utils';\nimport opcode from './opcode';\n\nexport const pushBool = (param: boolean) => {\n    let result = '';\n    if (param) {\n        result += num2hexstring(opcode.PUSHT);\n    } else {\n        result += num2hexstring(opcode.PUSHF);\n    }\n    return result;\n};\n\nexport const pushInt = (param: number, ledgerCompatible: boolean = true) => {\n    let result = '';\n    if (param === -1) {\n        result = num2hexstring(opcode.PUSHM1);\n    } else if (param === 0) {\n        result = num2hexstring(opcode.PUSH0);\n    } else if (param > 0 && param < 16) {\n        const num = opcode.PUSH1 - 1 + param;\n        result = num2hexstring(num);\n    } else {\n        const biHex = new BigInt(param.toString(), ledgerCompatible).toHexstr();\n        result = pushHexString(biHex);\n    }\n\n    return result;\n};\n\nexport const pushBigNum = (param: BigNumber, ledgerCompatible: boolean = true) => {\n    let result = '';\n    if (param.isEqualTo(-1)) {\n        result = num2hexstring(opcode.PUSHM1);\n    } else if (param.isEqualTo(0)) {\n        result = num2hexstring(opcode.PUSH0);\n    } else if (param.isGreaterThan(0) && param.isLessThan(16)) {\n        const num = opcode.PUSH1 - 1 + param.toNumber();\n        result = num2hexstring(num);\n    } else {\n        const biHex = new BigInt(param.toString(), ledgerCompatible).toHexstr();\n        result = pushHexString(biHex);\n    }\n    return result;\n};\n\nexport const pushHexString = (param: string) => {\n    let result = '';\n    const len = param.length / 2;\n    if (len <= opcode.PUSHBYTES75) {\n        result += num2hexstring(len);\n    } else if (len < 0x100) {\n        result += num2hexstring(opcode.PUSHDATA1);\n        result += num2hexstring(len);\n    } else if (len < 0x10000) {\n        result += num2hexstring(opcode.PUSHDATA2);\n        result += num2hexstring(len, 2, true);\n    } else {\n        result += num2hexstring(opcode.PUSHDATA4);\n        result += num2hexstring(len, 4, true);\n    }\n    result += param;\n    return result;\n};\n\nexport const getStructBytes = (val: Struct) => {\n    let result = '';\n    result += num2hexstring(ParameterTypeVal.Struct);\n    result += num2hexstring(val.list.length); // val is array-like\n    for (const v of val.list) {\n        if (typeof v === 'string') {// consider as hex string\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(v);\n        } else if (typeof v === 'number') {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(num2VarInt(v));\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n    return result;\n};\n\nexport const getMapBytes = (val: Map<string, Parameter>) => {\n    let result = '';\n    result += num2hexstring(ParameterTypeVal.Map);\n    result += num2hexstring(val.size);\n    for (const k of val.keys()) {\n        result += num2hexstring(ParameterTypeVal.ByteArray);\n        result += pushHexString(str2hexstr(k));\n        const p = val.get(k);\n        if (p && p.getType() === ParameterType.ByteArray) {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(p.getValue());\n        } else if (p && p.getType() === ParameterType.String) {\n            result += num2hexstring(ParameterTypeVal.ByteArray);\n            result += pushHexString(str2hexstr(p.getValue()));\n        } else if (p && p.getType() === ParameterType.Integer) {\n            result += num2hexstring(ParameterTypeVal.Integer);\n            result += pushHexString(num2VarInt(p.getValue()));\n        } else if (p && p.getType() === ParameterType.Long) {\n            result += num2hexstring(ParameterTypeVal.Integer);\n            result += pushHexString(num2VarInt(p.getValue()));\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n    return result;\n};\n\nexport const pushMap = (val: Map<string, any>, ledgerCompatible: boolean) => {\n    let result = '';\n    result += num2hexstring(opcode.NEWMAP);\n    result += num2hexstring(opcode.TOALTSTACK);\n    for (const k of val.keys()) {\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\n        result += pushHexString(str2hexstr(k));\n        result += pushParam(val.get(k), ledgerCompatible);\n        result += num2hexstring(opcode.SETITEM);\n    }\n    result += num2hexstring(opcode.FROMALTSTACK);\n    return result;\n};\n\nexport const pushParam = (p: any, ledgerCompatible: boolean) => {\n    if (!p) {\n        throw Error('Parameter can not be undefined');\n    }\n    let result = '';\n    if (p.type === ParameterType.ByteArray) {\n        result += pushHexString(p.value);\n    } else if (p.type === ParameterType.String) {\n        result += pushHexString(str2hexstr(p.value));\n    } else if (p.type === ParameterType.Boolean) {\n        result += pushBool(Boolean(p.value));\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.BOOLOR);\n    } else if (p.type === ParameterType.Map) {\n        result += pushMap(convertMap(p), ledgerCompatible);\n    } else if (p instanceof Map) {\n        result += pushMap(p, ledgerCompatible);\n    } else if (p.type === ParameterType.Array) {\n        for (let i = p.value.length - 1; i > -1; i--) {\n            result += pushParam(p.value[i], ledgerCompatible);\n        }\n        result += pushInt(p.value.length, ledgerCompatible);\n        result += num2hexstring(opcode.PACK);\n    } else if (p.type === ParameterType.Integer) {\n        result += pushInt(p.value, ledgerCompatible);\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.ADD);\n    } else if (p.type === ParameterType.Long) {\n        result += pushBigNum(new BigNumber(p.value), ledgerCompatible);\n        result += num2hexstring(opcode.PUSH0);\n        result += num2hexstring(opcode.ADD);\n    } else {\n        throw Error('Invalid parameter type: ' + JSON.stringify(p));\n    }\n    return result;\n};\n\nexport const serializeAbiFunction = (abiFunction: AbiFunction, ledgerCompatible: boolean = true) => {\n    const list = [];\n    list.push(str2hexstr(abiFunction.name));\n    const tmp = [];\n    for (const p of abiFunction.parameters) {\n        if (p.getType() === ParameterType.String) {\n            tmp.push(str2hexstr(p.getValue()));\n        } else if (p.getType() === ParameterType.Long) {\n            tmp.push(new BigNumber(p.getValue()));\n        } else if (p.getType() === ParameterType.Map) {\n            tmp.push(convertMap(p));\n        } else {\n            tmp.push(p.getValue());\n        }\n    }\n    if (list.length > 0) {\n        list.push(tmp);\n    }\n    const result = createCodeParamsScript(list, ledgerCompatible);\n    return result;\n};\n\nexport function convertArray(list: Parameter[]): any {\n    const tmp = [];\n    for (const p of list) {\n        if (p.getType && p.getType() === ParameterType.String) {\n            tmp.push(str2hexstr(p.getValue()));\n        } else if (p.getType && p.getType() === ParameterType.Long) {\n            tmp.push(new BigNumber(p.getValue()));\n        } else if (p.getType && p.getType() === ParameterType.Array) {\n            tmp.push(convertArray(p.value));\n        } else if (p.getType && p.getType() === ParameterType.Map) {\n            tmp.push(convertMap(p));\n        } else {\n            tmp.push(p.getValue ? p.getValue() : p);\n        }\n    }\n    return tmp;\n}\n\nexport function convertMap(p: Parameter): any {\n    const map = new Map();\n    for (const k of Object.keys(p.value)) {\n        const pVal = p.value[k];\n        // map.set(k, pVal);\n        if (pVal.type && pVal.type === ParameterType.Map) {\n            map.set(k, convertMap(pVal));\n        } else {\n            map.set(k, pVal);\n        }\n    }\n    return map;\n}\n\n/**\n * To deserialize the value return from smart contract invoke.\n * @param hexstr\n */\nexport function deserializeItem(sr: StringReader): any {\n    const t = parseInt(sr.read(1), 16);\n    if ( t === ParameterTypeVal.ByteArray) {\n        return sr.readNextBytes();\n    } else if (t === ParameterTypeVal.Boolean) {\n        return sr.readBoolean();\n    } else if (t === ParameterTypeVal.Integer) {\n        const v = bigIntFromBytes(sr.readNextBytes()).toNumber();\n        return v;\n    } else if (t === ParameterTypeVal.Array || t === ParameterTypeVal.Struct ) {\n        const length = sr.readNextLen();\n        const list = [];\n        for (let i = length; i > 0; i--) {\n            const ele = deserializeItem(sr);\n            list.push(ele);\n        }\n        return list;\n    } else if (t === ParameterTypeVal.Map ) {\n        const length = sr.readNextLen();\n        const map = new Map();\n        for (let i = length; i > 0; i--) {\n            const key = hexstr2str(deserializeItem(sr));\n            const value = deserializeItem(sr);\n            map.set(key, value);\n        }\n        return map;\n    } else {\n        throw Error('Invalid parameter type: ' + t);\n    }\n}\n\nexport const createCodeParamsScript = (list: any[], ledgerCompatible: boolean = true) => {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val, ledgerCompatible);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val, ledgerCompatible);\n        } else if (val instanceof Map) {\n            result += pushMap(val, ledgerCompatible);\n            // const mapBytes = getMapBytes(val);\n            // result += pushHexString(mapBytes);\n        } else if (val instanceof Struct) {\n            const structBytes = getStructBytes(val);\n            result += pushHexString(structBytes);\n        } else if (val instanceof Array) {\n            result += createCodeParamsScript(convertArray(val), ledgerCompatible);\n            result += pushInt(val.length, ledgerCompatible);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n};\n\n// deprecated\nexport const buildSmartContractParam = (functionName: string, params: Parameter[]) => {\n    let result = '';\n    for (let i = params.length - 1; i > -1; i--) {\n        const type = params[i].getType();\n        switch (type) {\n        case ParameterType.Boolean:\n            result += pushBool(params[i].getValue());\n            break;\n\n        case ParameterType.Integer:\n            result += pushInt(params[i].getValue());\n            break;\n\n        case ParameterType.String:\n            const value = str2hexstr(params[i].getValue());\n            result += pushHexString(value);\n            break;\n\n        case ParameterType.ByteArray:\n            result += pushHexString(params[i].getValue());\n            break;\n\n        case ParameterType.Map:\n            const mapBytes = getMapBytes(params[i].getValue());\n            result += pushHexString(mapBytes);\n            break;\n\n        case ParameterType.Struct:\n            const structBytes = getStructBytes(params[i].getValue());\n            result += pushHexString(structBytes);\n            break;\n        // case ParameterType.Array:\n        //     result += buildSmartContractParam(params[i].getValue());\n        //     result += pushInt(params[i].getValue().length);\n        //     result += num2hexstring(opcode.PACK);\n        //     break;\n        default:\n            throw new Error('Unsupported param type: ' + JSON.stringify(params[i]));\n        }\n    }\n\n    result += pushInt(params.length);\n    result += num2hexstring(opcode.PACK);\n\n    result += pushHexString(str2hexstr(functionName));\n\n    return result;\n};\n\nexport const buildWasmContractParam = (params: Parameter[]) => {\n    const pList = [];\n\n    for (const p of params) {\n        const type = p.getType();\n        let o;\n\n        switch (type) {\n        case ParameterType.String:\n            o = {\n                type: 'string',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.Int:\n            o = {\n                type: 'int',\n                value: p.getValue().toString()\n            };\n            break;\n        case ParameterType.Long:\n            o = {\n                type: 'int64',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.IntArray:\n            o = {\n                type: 'int_array',\n                value: p.getValue()\n            };\n            break;\n        case ParameterType.LongArray:\n            o = {\n                type: 'int_array',\n                value: p.getValue()\n            };\n            break;\n        default:\n            break;\n        }\n        pList.push(o);\n    }\n\n    const result = {\n        Params: pList\n    };\n    return str2hexstr(JSON.stringify(result));\n};\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as base58 from 'base-58';\nimport * as cryptoJS from 'crypto-js';\nimport { ADDR_VERSION } from '../consts';\nimport { ERROR_CODE } from '../error';\nimport opcode from '../transaction/opcode';\nimport { comparePublicKeys, programFromPubKey, pushBigInt } from '../transaction/program';\nimport { pushHexString } from '../transaction/scriptBuilder';\nimport { ab2hexstring, hash160, num2hexstring, sha256, StringReader } from '../utils';\nimport { reverseHex } from './../utils';\nimport { PublicKey } from './PublicKey';\n\n/**\n * Representation of Address.\n *\n * There are 4 types of address:\n * 1. Public key based\n * 2. Multi public key based (m, n)\n * 3. Contract based\n * 4. ONT ID based\n *\n * The value is stored as base58 or hex encoded, therefore always use\n * toBase58() or serialize() according to requirements.\n */\nexport class Address {\n    static deserialize(sr: StringReader): Address {\n        return new Address(sr.read(20));\n    }\n    /**\n     * Generates public key based address.\n     *\n     * @param publicKey Public key to use\n     */\n    static fromPubKey(publicKey: PublicKey): Address {\n        const program = programFromPubKey(publicKey);\n        // const program = publicKey.key + num2hexstring(opcode.CHECKSIG);\n        const programHash = hash160(program);\n        return new Address(programHash);\n    }\n\n    /**\n     * Generates identity based address.\n     * @param ontid ONT ID in the form did:ont:AXmQDzzvpEtPkNwBEFsREzApTTDZFW6frD\n     */\n    static fromOntid(ontid: string): Address {\n        const address = ontid.substr(8);\n        return new Address(address);\n    }\n\n    /**\n     * Generates address from smart contract code.\n     *\n     * @param vmCode Hex encoded smart contract code\n     */\n    static fromVmCode(vmCode: string): Address {\n        const programHash = hash160(vmCode);\n        // programHash = num2hexstring(vmType) + programHash.substring(2);\n        return new Address(programHash);\n    }\n\n    /**\n     * Generates (m, n) threshold address.\n     *\n     * m - threshold\n     * n - total number of public keys\n     *\n     * @param m The threshold\n     * @param publicKeys Public key\n     */\n    static fromMultiPubKeys(m: number, publicKeys: PublicKey[]): Address {\n        const n = publicKeys.length;\n\n        if (m <= 0 || m > n || n > 24 ) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n\n        // const pkHexStrs = publicKeys.map((p) => p.serializeHex());\n        // pkHexStrs.sort();\n        publicKeys.sort(comparePublicKeys);\n        let result = '';\n        result += pushBigInt(m);\n        for (const s of publicKeys) {\n            result += pushHexString(s.serializeHex());\n        }\n        result += pushBigInt(n);\n        result += num2hexstring(opcode.CHECKMULTISIG);\n        const programHash = hash160(result);\n        return new Address(programHash);\n    }\n\n    /**\n     * Deterministicaly generates ONT ID from this public key.\n     */\n    static generateOntid(publicKey: PublicKey): string {\n        const address = Address.fromPubKey(publicKey);\n        const ontid = 'did:ont:' + address.toBase58();\n\n        return ontid;\n    }\n\n    /**\n     * Base58 or Hex encoded address\n     */\n    value: string;\n\n    constructor(value: string) {\n        if (value.length === 40 || value.length === 34) {\n            this.value = value;\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n\n    /**\n     * Gets Base58 encoded representation of the address.\n     */\n    toBase58() {\n        if (this.value.length === 34) {\n            return this.value;\n        } else {\n            return hexToBase58(this.value);\n        }\n    }\n\n    /**\n     * Gets Hex encoded representation of the address.\n     */\n    toHexString() {\n        let val;\n        if (this.value.length === 40) {\n            val = this.value;\n        } else {\n            val = base58ToHex(this.value);\n        }\n        return reverseHex(val);\n    }\n\n    serialize() {\n        if (this.value.length === 40) {\n            return this.value;\n        } else {\n            return base58ToHex(this.value);\n        }\n    }\n\n    /**\n     * Computes the salt from address for decrypt.\n     */\n    getB58Checksum() {\n        const address = this.toBase58();\n        const hash = cryptoJS.SHA256(address).toString();\n        const hash2 = sha256(hash);\n        return hash2.slice(0, 8);\n    }\n}\n\n/**\n *\n * @param programhash\n */\nfunction hexToBase58(hexEncoded: string): string {\n    const data = ADDR_VERSION + hexEncoded;\n\n    const hash = sha256(data);\n    const hash2 = sha256(hash);\n    const checksum = hash2.slice(0, 8);\n\n    const datas = data + checksum;\n\n    return base58.encode(new Buffer(datas, 'hex'));\n}\n\nfunction base58ToHex(base58Encoded: string) {\n    const decoded = base58.decode(base58Encoded);\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\n\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\n        throw new Error('[addressToU160] decode encoded verify failed');\n    }\n    return hexEncoded;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as base58 from 'base-58';\nimport { createCipheriv, createDecipheriv } from 'crypto';\nimport * as CryptoJS from 'crypto-js';\nimport * as asyncScrypt from 'scrypt-async';\nimport { DEFAULT_SCRYPT, OEP_FLAG, OEP_HEADER } from './consts';\nimport { Address } from './crypto/address';\nimport { PublicKey } from './crypto/PublicKey';\nimport { ERROR_CODE } from './error';\nimport { ab2hexstring, hexstring2ab, hexXor, isHexString, StringReader } from './utils';\n\n/**\n * Decribtes the structure of params for scrypt\n */\nexport interface ScryptParams {\n    cost: number;\n    blockSize: number;\n    parallel: number;\n    size: number;\n}\n\n/**\n * Synchronious call to scrypt-async-js.\n *\n * @param keyphrase Keyphrase to use\n * @param addressHash Hex encoded address\n * @param params Scrypt params\n */\nfunction scrypt(keyphrase: string, addressHash: string, params: ScryptParams) {\n    let derived: number[] = [];\n\n    asyncScrypt(\n        keyphrase.normalize('NFC'),\n        hexstring2ab(addressHash),\n        {\n            N: params.cost,\n            r: params.blockSize,\n            p: params.parallel,\n            dkLen: params.size\n        },\n        (result: string | number[]) => {\n            derived = result as number[];\n        }\n    );\n    return new Buffer(derived);\n}\n\n/**\n * Encrypt with aes-ctr\n */\nexport function encryptWithCtr(\n    privateKey: string,\n    publicKeyEncoded: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    // let privateKey = PrivateKey.deserializeWIF(wifKey);\n    // console.log( \"privateKey: \", privateKey );\n\n    // console.log( \"publickeyEncode: \", publicKey );\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    const address = Address.fromPubKey(publicKey);\n    // console.log( \"address: \", address );\n\n    const addresshash = address.getB58Checksum();\n    // console.log( \"addresshash: \", addresshash );\n\n    // Scrypt\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 32);\n    const derived2 = derived.slice(64);\n    const iv = CryptoJS.enc.Hex.parse(derived1);\n\n    // console.log('decrypt derived: ' + derived)\n    // console.log('decrypt iv: ' + iv)\n    // console.log('decrypt derived2: ' + derived2)\n\n    // AES Encrypt\n    // let xor = hexXor(privateKey, derived1);\n    const encrypted = CryptoJS.AES.encrypt(\n        CryptoJS.enc.Hex.parse(privateKey),\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\n    );\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\n\n    // Construct\n    // let assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\n    const assembled = encrypted.ciphertext.toString();\n\n    // console.log( \"enc assembled: \", assembled );\n\n    // return Bs58check.encode(Buffer.from(assembled, 'hex'));\n    return new Buffer(assembled, 'hex').toString('base64');\n}\n\n/**\n * Decrypt with aes-ctr\n * @param encryptedKey encrypted private key\n * @param keyphrase user's password to encrypt private key\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\n */\nexport function decryptWithCtr(\n    encryptedKey: string,\n    keyphrase: string,\n    saltOrAddress: string | Address,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    // let assembled = ab2hexstring(Bs58check.decode(encryptedKey));\n    const encrypted = Buffer.from(encryptedKey, 'base64').toString('hex');\n\n    // tslint:disable-next-line:no-console\n    // console.log('dec assembled: ', encrypted);\n\n    let salt = '';\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\n        salt = saltOrAddress;\n    } else if (saltOrAddress instanceof Address) {\n        salt = saltOrAddress.getB58Checksum();\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    // let addressHash = assembled.substr(0, 8);\n    // console.log( \"dec addressHash: \", addressHash );\n\n    // let encrypted = assembled.substr(8);\n    // console.log( \"encrypted: \", encrypted );\n\n    // Scrypt\n    const derived = scrypt(keyphrase, salt, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 32);\n    const derived2 = derived.slice(64);\n    // console.log('decrypt derived: ' + derived)\n\n    const iv = CryptoJS.enc.Hex.parse(derived1);\n\n    // AES Decrypt\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\n    const decrypted = CryptoJS.AES.decrypt(\n        ciphertexts,\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\n    );\n    // console.log( \"decrypted: \", decrypted.toString() );\n\n    // Check PrivateKey\n    // ----------------------------------------------------------\n\n    // PrivateKey\n    // let privateKey = hexXor(decrypted.toString(), derived1);\n    const privateKey = decrypted.toString();\n    // console.log( \"privateKey: \", privateKey );\n    return privateKey;\n}\n\n/**\n * Checks if the password supplied to decrypt was correct.\n *\n * This method was taken out from decrypt, because it needs to create public key from private key\n * and it needs to be supplied from outside.\n *\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\n * @param publicKeyEncoded Public key from decrypted key\n */\nexport function checkCtrDecrypted(saltOrAddress: string | Address, publicKeyEncoded: string): void {\n    // const assembled = ab2hexstring(Bs58check.decode(encryptedKey));\n    // let assembled = Buffer.from(encryptedKey, 'base64').toString('hex')\n\n    // console.log( \"assembled: \", assembled );\n\n    // const addressHash = assembled.substr(0, 8);\n    // console.log( \"addressHash: \", addressHash );\n\n    // console.log('publicKey', publicKey)\n    let salt = '';\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\n        salt = saltOrAddress;\n    } else if (saltOrAddress instanceof Address) {\n        salt = saltOrAddress.getB58Checksum();\n    } else {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    // Address\n    const address = Address.fromPubKey(publicKey);\n    // console.log('address 2', address)\n\n    // AddressHash\n    const saltNew = address.getB58Checksum();\n\n    if (saltNew !== salt) {\n\n        // tslint:disable-next-line:no-console\n        console.log('keyphrase error.');\n\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n\n    // WIF\n    // let wifKey = privateKey.serializeWIF();\n    // console.log( \"wifKey: \", wifKey );\n}\n\n/**\n * Encrypt with aes-ecb\n */\nexport function encryptWithEcb(\n    privateKey: string,\n    publicKeyEncoded: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    const address = Address.fromPubKey(publicKey);\n    // console.log( \"address: \", address );\n\n    const addresshash = address.getB58Checksum();\n    // console.log( \"addresshash: \", addresshash );\n    // Scrypt\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 64);\n    const derived2 = derived.slice(64);\n\n    // AES Encrypt\n    const xor = hexXor(privateKey, derived1);\n    const encrypted = CryptoJS.AES.encrypt(\n        CryptoJS.enc.Hex.parse(xor),\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\n    // Construct\n    const assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\n    // console.log( \"assembled: \", assembled );\n    return base58.encode(Buffer.from(assembled, 'hex'));\n}\n\n/**\n * Decrypt with aes-ecb\n */\nexport function decryptWithEcb(\n    encryptedKey: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n): string {\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\n    // console.log( \"assembled: \", assembled );\n    const addressHash = assembled.substr(6, 8);\n    // console.log( \"addressHash: \", addressHash );\n    const encrypted = assembled.substr(-64);\n    // console.log( \"encrypted: \", encrypted );\n    // Scrypt\n    const derived = scrypt(keyphrase, addressHash, scryptParams).toString('hex');\n    const derived1 = derived.slice(0, 64);\n    const derived2 = derived.slice(64);\n\n    // AES Decrypt\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\n    const decrypted = CryptoJS.AES.decrypt(\n        ciphertexts,\n        CryptoJS.enc.Hex.parse(derived2),\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\n    // console.log( \"decrypted: \", decrypted.toString() );\n    // Check PrivateKey\n    // ----------------------------------------------------------\n    // PrivateKey\n    const privateKey = hexXor(decrypted.toString(), derived1);\n    // console.log( \"privateKey: \", privateKey );\n    return privateKey;\n}\n\n/**\n * Checks if the password supplied to decrypt was correct.\n *\n * This method was taken out from decrypt, because it needs to create public key from private key\n * and it needs to be supplied from outside.\n *\n * @param encryptedKey Original encrypted key\n * @param decryptedKey Decrypted key with decrypt\n * @param publicKeyEncoded Public key from decrypted key\n */\nexport function checkEcbDecrypted(encryptedKey: string, decryptedKey: string, publicKeyEncoded: string): void {\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\n    // console.log( \"assembled: \", assembled );\n    const addressHash = assembled.substr(6, 8);\n\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\n\n    // Address\n    const address = Address.fromPubKey(publicKey);\n    // console.log('address', address)\n    // AddressHash\n    const addressHashNew = address.getB58Checksum();\n\n    if (addressHashNew !== addressHash) {\n        // tslint:disable-next-line:no-console\n        console.log('keyphrase error.');\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n}\n\n/**\n * Encrypt with aes-gcm-256\n * This is the default encryption algorithm for private key\n * @param privateKey Private key to encpryt with\n * @param address Adderss to encrypt with\n * @param salt Salt to encrypt with\n * @param keyphrase User's password\n * @param scryptParams Optional params to encrypt\n */\nexport function encryptWithGcm(\n    privateKey: string,\n    address: Address,\n    salt: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n) {\n    if (!isHexString(privateKey)) {\n        throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\n    }\n    const derived = scrypt(keyphrase, salt, scryptParams);\n    const derived1 = derived.slice(0, 12);\n    const derived2 = derived.slice(32);\n    const key = derived2;\n    const iv = derived1;\n    const aad = new Buffer(address.toBase58());\n    const cipher = createCipheriv('aes-256-gcm', key, iv);\n    cipher.setAAD(aad);\n    const plainText = Buffer.from(privateKey, 'hex');\n    let ciphertext = cipher.update(plainText);\n    // ciphertext += cipher.final();\n    const final = cipher.final();\n    const authTag = cipher.getAuthTag();\n    ciphertext = Buffer.concat([ciphertext, final]);\n\n    const result = Buffer.concat([ciphertext, authTag]);\n    return result.toString('base64');\n}\n\n/**\n * Decrypt with aes-256-gcm\n * @param encrypted Encrypted private key\n * @param address Address to decrypt with\n * @param salt Salt to decrypt with\n * @param keyphrase User's password\n * @param scryptParams Optioanl params to decrypt with\n */\nexport function decryptWithGcm(\n    // ciphertext: string,\n    // authTag: string,\n    encrypted: string,\n    address: Address,\n    salt: string,\n    keyphrase: string,\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\n) {\n    if (salt.length !== 32) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const result = Buffer.from(encrypted, 'base64');\n    const ciphertext = result.slice(0, result.length - 16);\n    const authTag = result.slice(result.length - 16);\n    const derived = scrypt(keyphrase, salt, scryptParams);\n    const derived1 = derived.slice(0, 12);\n    const derived2 = derived.slice(32);\n    const key = derived2;\n    const iv = derived1;\n    const aad = new Buffer(address.toBase58());\n    // const auth = new Buffer(authTag, 'hex');\n    const decipher = createDecipheriv('aes-256-gcm', key, iv);\n    decipher.setAAD(aad);\n    decipher.setAuthTag(authTag);\n    let decrypted = decipher.update(ciphertext).toString('hex');\n\n    try {\n        decrypted += decipher.final().toString('hex');\n    } catch (err) {\n        throw ERROR_CODE.Decrypto_ERROR;\n    }\n    return decrypted;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as b64 from 'base64-url';\nimport { num2hexstring, StringReader } from '../utils';\nimport { SignatureScheme } from './SignatureScheme';\n\n/**\n * Signature generated by signing data with Private Key.\n */\nexport class Signature {\n    static deserializeJWT(encoded: string, algorithm: SignatureScheme, publicKeyId: string): Signature {\n        const decoded = b64.decode(encoded, 'hex');\n\n        return new Signature(\n        algorithm,\n        decoded,\n        publicKeyId\n        );\n    }\n\n    /**\n     * Deserializes PgpSignature to Signature.\n     * @param pgpSignature PgpSignature\n     */\n    static deserializePgp(pgpSignature: PgpSignature): Signature {\n        const value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\n        const deserialzedValue = Signature.deserializeHex(value).value;\n        return new Signature(\n        SignatureScheme.fromLabel(pgpSignature.Algorithm),\n            deserialzedValue\n        );\n    }\n\n    /**\n     * Deserializes hex representation to Signature\n     * @param data hex string\n     */\n    static deserializeHex(data: string): Signature {\n        if (data.length < 4) {\n            throw new Error('Invalid params.');\n        }\n        const sr = new StringReader(data);\n        const scheme = parseInt(sr.read(1), 16);\n        const sigScheme = SignatureScheme.fromHex(scheme);\n        const value = data.substr(2);\n        const sig = new Signature(sigScheme, value);\n        return sig;\n    }\n\n    algorithm: SignatureScheme;\n    value: string;\n\n    /**\n     * Public key Id used for create this signature.\n     *\n     */\n    publicKeyId?: string;\n\n    constructor(algorithm: SignatureScheme, value: string, publicKeyId?: string) {\n        this.algorithm = algorithm;\n        this.value = value;\n        this.publicKeyId = publicKeyId;\n    }\n\n    /**\n     * Serializes signature to Hex representation.\n     * For transfer to java backend and verify it.\n     */\n    serializeHex(): string {\n        let result = '';\n        result += num2hexstring(this.algorithm.hex);\n        result += this.value;\n        return result;\n\n    }\n\n    /**\n     * Serializes signature to PGP representation with optional PublicKeyId.\n     *\n     * @param keyId Whole Public Key Id in the form <ONTID>#keys-<id>\n     */\n    serializePgp(keyId?: string): PgpSignature {\n        const encoded = new Buffer(this.serializeHex(), 'hex').toString('base64');\n        return {\n            PublicKeyId: keyId,\n            Format: 'pgp',\n            Value: encoded,\n            Algorithm: this.algorithm.label\n        };\n    }\n\n    /**\n     * Serializes signature to base64url format.\n     */\n    serializeJWT(): string {\n        return b64.encode(this.value, 'hex');\n    }\n}\n\n/**\n * PGP representation of the signature with embedded KeyId\n */\nexport interface PgpSignature {\n    PublicKeyId?: string;\n    Format: 'pgp';\n    Algorithm: string;\n    Value: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as bip39 from 'bip39';\nimport * as elliptic from 'elliptic';\nimport * as secureRandom from 'secure-random';\nimport { sm2 } from 'sm.js';\nimport * as wif from 'wif';\nimport { DEFAULT_ALGORITHM, DEFAULT_SM2_ID, ONT_BIP44_PATH } from '../consts';\nimport { ERROR_CODE } from '../error';\nimport { decryptWithGcm, encryptWithGcm, ScryptParams } from '../scrypt';\nimport { ab2hexstring, hexstring2ab, isBase64, str2hexstr } from '../utils';\nimport { Address } from './address';\nimport { Key, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { PublicKey } from './PublicKey';\nimport { Signable } from './signable';\nimport { Signature } from './Signature';\nimport { SignatureScheme } from './SignatureScheme';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\nexport class PrivateKey extends Key {\n  /**\n   * Generates random Private key using supplied Key type and parameters.\n   *\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\n   *\n   * @param keyType The key type\n   * @param parameters The parameters for the key type\n   */\n    static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\n        if (keyType === undefined) {\n            keyType = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n        }\n\n        if (parameters === undefined) {\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n        }\n\n        return new PrivateKey(ab2hexstring(secureRandom(32)), keyType, parameters);\n    }\n\n    /**\n     * Creates PrivateKey from Wallet Import Format (WIF) representation.\n     *\n     * @param wifkey WIF private key representation\n     *\n     */\n    static deserializeWIF(wifkey: string): PrivateKey {\n        const key = ab2hexstring(wif.decode(wifkey, 128).privateKey);\n        return new PrivateKey(key);\n    }\n\n    /**\n     * Creates PrivateKey from mnemonic according to BIP39 protocol.\n     *\n     * @param mnemonic Space separated list of words\n     *\n     */\n    static generateFromMnemonic(mnemonic: string, derivePath: string = ONT_BIP44_PATH): PrivateKey {\n        if (mnemonic.split(' ').length < 12) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n\n        // generate privateKey\n        // const pri = seed.substr(0, 64);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(derivePath);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        return privateKey;\n    }\n\n    /**\n     * Signs the data with supplied private key using signature schema.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\n        if (schema === undefined) {\n            schema = this.algorithm.defaultSchema;\n        }\n\n        if (!this.isSchemaSupported(schema)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.getSignContent();\n        }\n\n        let hash: string;\n        if (schema === SignatureScheme.SM2withSM3) {\n            // library sm.js (SM2withSM3) has implemented hashing as part of signing, therefore it is skipped\n            hash = msg;\n        } else {\n            hash = this.computeHash(msg, schema);\n        }\n\n        const signed = this.computeSignature(hash, schema);\n        return new Signature(schema, signed, publicKeyId);\n    }\n\n    /**\n     * Asynchroniously signs the data with supplied private key using signature schema.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * This method is suitable, if external keys (Ledger, TPM, ...) support is required.\n     *\n     * @param msg Hex encoded input data or Signable object\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    async signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\n        return this.sign(msg, schema, publicKeyId);\n    }\n\n    /**\n     * Derives Public key out of Private key.\n     */\n    getPublicKey(): PublicKey {\n        switch (this.algorithm) {\n        case KeyType.ECDSA:\n            return this.getEcDSAPublicKey();\n        case KeyType.EDDSA:\n            return this.getEdDSAPublicKey();\n        case KeyType.SM2:\n            return this.getSM2PublicKey();\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Decrypts encrypted private key with supplied password.\n     *\n     * @param keyphrase Password to decrypt with\n     * @param address For aad in decryption\n     * @param 16 secure random bytes\n     * @param params Optional Scrypt params\n     */\n    decrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\n        // const decrypted = decrypt(this.key, keyphrase, checksum, params);\n        if (salt.length === 24 && isBase64(salt)) {\n            salt = Buffer.from(salt, 'base64').toString('hex');\n        }\n        const decrypted = decryptWithGcm(this.key, address, salt, keyphrase, params);\n        const decryptedKey = new PrivateKey(decrypted, this.algorithm, this.parameters);\n        // checkDecrypted(checksum, decryptedKey.getPublicKey().serializeHex());\n        const pk = decryptedKey.getPublicKey();\n        const addrTmp = Address.fromPubKey(pk);\n        if (addrTmp.toBase58() !== address.toBase58()) {\n            throw ERROR_CODE.Decrypto_ERROR;\n        }\n        return decryptedKey;\n    }\n\n    /**\n     * Encrypts private key with supplied password.\n     *\n     * @param keyphrase Password to encrypt with\n     * @param address For aad in encryption\n     * @param salt 16 secure random bytes\n     * @param params Optional Scrypt params\n     */\n    encrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\n        // add address check\n        const publicKey = this.getPublicKey();\n        const addr = Address.fromPubKey(publicKey).toBase58();\n        if (addr !== address.toBase58()) {\n            throw ERROR_CODE.INVALID_ADDR;\n        }\n        const encrypted = encryptWithGcm(this.key, address, salt, keyphrase, params);\n        return new PrivateKey(encrypted, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using EcDSA algorithm.\n     */\n    getEcDSAPublicKey(): PublicKey {\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        const keyPair = ec.keyFromPrivate(this.key, 'hex');\n        const pk = keyPair.getPublic(true, 'hex');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using EdDSA algorithm.\n     */\n    getEdDSAPublicKey(): PublicKey {\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        const keyPair = eddsa.keyFromSecret(this.key, 'hex');\n        const pk = keyPair.getPublic(true, 'hex');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Derives Public key out of Private key using SM2 algorithm.\n     */\n    getSM2PublicKey(): PublicKey {\n        const keyPair = sm2.SM2KeyPair(null, this.key);\n        const pk = keyPair.pubToString('compress');\n\n        return new PublicKey(pk, this.algorithm, this.parameters);\n    }\n\n    /**\n     * Computes signature of message hash using specified signature schema.\n     *\n     * @param hash Message hash\n     * @param schema Signature schema to use\n     */\n    computeSignature(hash: string, schema: SignatureScheme): string {\n        switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n            return this.computeEcDSASignature(hash);\n        case SignatureScheme.EDDSAwithSHA512:\n            return this.computeEdDSASignature(hash);\n        case SignatureScheme.SM2withSM3:\n            return this.computeSM2Signature(hash);\n        default:\n            throw new Error('Unsupported signature schema.');\n        }\n    }\n\n    /**\n     * Computes EcDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     */\n    computeEcDSASignature(hash: string): string {\n        const ec = new elliptic.ec(this.parameters.curve.preset);\n        const signed = ec.sign(hash, this.key, { canonical: true });\n        return Buffer.concat([\n            signed.r.toArrayLike(Buffer, 'be', 32),\n            signed.s.toArrayLike(Buffer, 'be', 32)\n        ]).toString('hex');\n    }\n\n    /**\n     * Computes EdDSA signature of message hash. Curve name is derrived from private key.\n     *\n     * @param hash Message hash\n     */\n    computeEdDSASignature(hash: string): string {\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\n        const signed = eddsa.sign(hash, this.key);\n        return signed.toHex().toLowerCase();\n    }\n\n    /**\n     * Computes SM2 signature of message hash.\n     *\n     * Only default SM2 ID is supported.\n     *\n     * @param hash Message hash\n     */\n    computeSM2Signature(hash: string): string {\n        const keyPair = sm2.SM2KeyPair(null, this.key);\n        const signed = keyPair.sign(hexstring2ab(hash));\n\n        const id = DEFAULT_SM2_ID;\n\n        return str2hexstr(id + '\\0') + signed.r + signed.s;\n    }\n\n    /**\n     * Gets Wallet Import Format (WIF) representation of the PrivateKey.\n     *\n     */\n    serializeWIF(): string {\n        return wif.encode(128, Buffer.from(this.key, 'hex'), true);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { JsonKey, KeyParameters } from './Key';\nimport { KeyType } from './KeyType';\nimport { PrivateKey } from './PrivateKey';\n\n/**\n * Interface for Key deserializers\n */\nexport interface KeyDeserializer {\n    getType(): string;\n    deserialize(json: JsonKey): PrivateKey;\n}\n\n/**\n * Default private key deserializer.\n */\nexport class DefaultKeyDeserializer implements KeyDeserializer {\n    getType(): string {\n        return '';\n    }\n\n    deserialize(json: JsonKey): PrivateKey {\n        if (json.key != null) {\n            return new PrivateKey(\n                json.key,\n                KeyType.fromLabel(json.algorithm),\n                KeyParameters.deserializeJson(json.parameters)\n            );\n        } else {\n            throw new Error('Unsupported Key type.');\n        }\n    }\n}\n\n/**\n * Registered key deserializers\n */\nconst keyDeserializers: KeyDeserializer[] = [];\nconst defaultKeyDeserializer = new DefaultKeyDeserializer();\n\n/**\n * Registers new external deserializer for private keys.\n *\n * @param deserializer Deserializer instance\n */\nexport function registerKeyDeserializer(deserializer: KeyDeserializer) {\n    keyDeserializers.push(deserializer);\n}\n\n/**\n * Creates PrivateKey from Json representation.\n *\n * @param json Json private key representation\n *\n */\nexport function deserializeFromJson(json: JsonKey): PrivateKey {\n    if (json.external == null) {\n        return defaultKeyDeserializer.deserialize(json);\n    } else {\n        for (const deserializer of keyDeserializers) {\n            if (deserializer.getType() === json.external.type) {\n                return deserializer.deserialize(json);\n            }\n        }\n\n        throw new Error('Unsupported Key type.');\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { ERROR_CODE } from '../error';\nimport { hex2VarBytes, num2hexstring, StringReader } from '../utils';\n\nexport enum TransactionAttributeUsage {\n    Nonce           = 0x00,\n    Script          = 0x20,\n    DescriptionUrl  = 0x81,\n    Description     = 0x90\n}\n\n/**\n * @deprecated\n * TransactionAttribute\n * @property {number} usage - Identifying byte\n * @property {string} data - Data\n */\nexport class TransactionAttribute {\n    usage: TransactionAttributeUsage;\n    // hexstring\n    data: string;\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.usage);\n        if (this.usage === TransactionAttributeUsage.Script) {\n            result += this.data;\n        } else if (this.usage === TransactionAttributeUsage.DescriptionUrl\n                || this.usage === TransactionAttributeUsage.Description\n                || this.usage === TransactionAttributeUsage.Nonce) {\n            result += hex2VarBytes(this.data);\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n\n        return result;\n    }\n\n    deserialize(ss: StringReader): void {\n        // usage\n        const usage = parseInt(ss.read(1), 16);\n        // nonce\n        // const nonce = ss.read(8);\n        // get hash with publicKey;\n        const dataLen = ss.readNextLen();\n        const data = ss.read(dataLen);\n        this.usage = usage;\n        // this.nonce = nonce;\n        this.data = data;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as CTX from 'milagro-crypto-js';\nimport * as utils from '../utils';\n\n/**\n * Issuer\n *  Issuer in Anonymous Credential\n */\nexport class Issuer {\n\n    sk: SecretKey;\n    pk: IssuerPublicKey;\n    // AttrMap: Map<string, number>;\n    AttributeName: string[];\n\n    param: CryptoSuite;\n\n    constructor(curve: string) {\n        this.param = new CryptoSuite(curve);\n        this.sk = new SecretKey(this.param);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateSk(): SecretKey {\n        this.sk.Rand();\n        return this.sk;\n    }\n\n    /* GenerateKeyPair()\n     *  generate a random secret key\n     */\n    GenerateKeyPair() {\n        this.sk = SecretKey.GenerateSk(this.param);\n        this.pk = this.sk.GenerateIssuerPublicKey();\n    }\n\n    /* SetAttributeSet(AttributeName:string[])\n     *  generate a random secret key\n     */\n    SetAttributeSet(AttributeName: string[]) {\n        this.AttributeName = AttributeName;\n        this.pk.GenerateAttr(AttributeName);\n    }\n\n    /* Sign(Nym, attrs):Credential\n     *  sign a credential for a user\n     */\n    Sign(Nym: any, attrs: any[]): Credential {\n        // random e, s\n        const e = this.param.getRandBN();\n        const s = this.param.getRandBN();\n        const B = new this.param.ECP(); // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))\n        B.copy(this.param.g1);\n        B.add(this.param.PAIR.G1mul(this.pk.h0, s));\n        B.add(Nym);\n        for (let i = 0; i < this.pk.attr.length; i++) {\n            B.add(this.param.PAIR.G1mul(this.pk.h[i], attrs[i]));\n        }\n\n        let A = new this.param.ECP(); // A = B^(1/(e+x))\n        const tmp = new this.param.BIG(); // tmp = (1/(e+x))\n        tmp.copy(e);\n        tmp.add(this.sk.value); // !!!!!!!!!!!\n        tmp.invmodp(this.param.order);\n\n        A = this.param.PAIR.G1mul(B, tmp);\n\n        const cred = new Credential(this.param);\n        cred.Set(A, B, e, s, attrs);\n        return cred;\n    }\n\n    /* GetPk()\n     *  get issuer's public key\n     */\n    GetPk(): IssuerPublicKey {\n        return IssuerPublicKey.COPY(this.pk);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateNonce(): any {\n        const nonce = this.param.getRandBN();\n        return nonce;\n    }\n\n    VerifyCredentialRequest(CR: any): boolean {\n        return this.pk.VerifyCredentialRequest(CR);\n    }\n\n}\n\n/**\n * User\n *  An user in Anonymous Credential\n *  Prover and Verifier are all user.\n */\nexport class User {\n\n    attrs: any[];\n\n    private sk: SecretKey;\n    private Nym: any;\n    // private pi: {\n    //     C: any,\n    //     S: any\n    // };\n\n    private Cred: Credential;\n\n    private ipk: IssuerPublicKey;\n\n    private param: CryptoSuite;\n\n    constructor(curve: string) {\n        this.param = new CryptoSuite(curve);\n    }\n\n    /* GenerateSk():SecretKey\n     *  generate a random secret key\n     */\n    GenerateSk(): SecretKey {\n        this.sk = SecretKey.GenerateSk(this.param);\n        return this.sk;\n    }\n\n    /* SetIpk(ipk:IssuerPublicKey)\n     *  save issuer's public key\n     */\n    SetIpk(ipk: IssuerPublicKey) {\n        this.ipk = IssuerPublicKey.COPY(ipk);\n    }\n\n    GenerateCrendentialRequest(nonce: any): any {\n        if (this.ipk === undefined) {\n            // tslint:disable-next-line:no-console\n            console.log('Please set ipk first.');\n            return;\n        }\n\n        const ipk = this.ipk;\n        const Nym = this.param.PAIR.G1mul(ipk.h_sk, this.sk.value); // Nym\n\n        const r = this.param.getRandBN(); // r\n        const t1 = this.param.PAIR.G1mul(ipk.h_sk, r); // t1\n\n        const C = this.param.hashToBN(t1, ipk.h_sk, Nym, nonce);\n\n        const S = this.param.BIG.modmul(C, this.sk.value, this.param.order);\n        S.add(r);\n        S.mod(this.param.order);\n\n        const pi = {\n            C,\n            S\n        };\n\n        const attrs = this.param.genAttrBN(ipk.attr);\n\n        this.Nym = Nym;\n        this.attrs = attrs;\n\n        const CR = {\n            Nym,\n            pi,\n            nonce,\n            attrs\n        };\n\n        return CR;\n    }\n\n    VerifyBBSplus(Cred: Credential): boolean {\n        // pk   <- ipk.w\n        // m    <- attrs\n        // sig  <- (A,E,s)\n\n        // check if\n        // e(A, g2^E * pk) == e(B, g2)\n        // and if\n        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL)\n\n        const wg2e = new this.param.ECP2();\n        wg2e.copy(this.ipk.w);\n        wg2e.add(this.param.PAIR.G2mul(this.param.g2, Cred.sig.e));\n        wg2e.affine(); // ~!!!!use affine() after ECP's mul operation, for pairing.\n\n        const A = new this.param.ECP();\n        A.copy(Cred.sig.A);\n        A.affine();\n\n        let left = this.param.PAIR.ate(wg2e, A);\n        left = this.param.PAIR.fexp(left);\n\n        const B = new this.param.ECP();\n        B.copy(this.param.g1);\n        B.add(this.param.PAIR.G1mul(this.ipk.h0, Cred.sig.s));\n        B.add(this.Nym);\n\n        for (let i = 0; i < Cred.attrs.length; i++) {\n            B.add(this.param.PAIR.G1mul(this.ipk.h[i], Cred.attrs[i]));\n        }\n\n        B.affine();\n        let right = this.param.PAIR.ate(this.param.g2, B);\n        right = this.param.PAIR.fexp(right);\n\n        return left.equals(right);\n    }\n\n    SetCredential(Cred: Credential) {\n        this.Cred = new Credential(this.param);\n        this.Cred.Copy(Cred);\n        return true;\n    }\n\n    Prove(D: any[]) {\n        const ipk = this.ipk;\n        const Cred = this.Cred;\n\n        const r1 = this.param.getRandBN(); // r1\n\n        const A_ = this.param.PAIR.G1mul(Cred.sig.A, r1); // A'\n\n        const r3 = new this.param.BIG(0); // r3\n        r3.copy(r1);\n        r3.invmodp(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        let _e = new this.param.BIG(0); // -e\n        _e.copy(Cred.sig.e);\n        _e = this.param.BIG.modneg(_e, this.param.order);\n\n        const _A = this.param.PAIR.G1mul(A_, _e); // _A\n        _A.add(this.param.PAIR.G1mul(Cred.sig.B, r1));\n\n        const r2 = this.param.getRandBN(); // r2\n        // tslint:disable-next-line:variable-name\n        let _r2 = new this.param.BIG(0); // -r2\n        _r2.copy(r2);\n        _r2 = this.param.BIG.modneg(_r2, this.param.order);\n\n        const B_ = this.param.PAIR.G1mul(Cred.sig.B, r1); // B'\n        B_.add(this.param.PAIR.G1mul(ipk.h0, _r2));\n\n        // tslint:disable-next-line:variable-name\n        let s_ = this.param.BIG.modmul(r2, r3, this.param.order); // s'\n        s_ = this.param.BIG.modneg(s_, this.param.order);\n        s_.add(Cred.sig.s);\n        s_.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const r_a = []; // r_a[]\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                r_a[i] = this.param.getRandBN();\n            } else {\n                r_a[i] = false;\n            }\n        }\n\n        // tslint:disable-next-line:variable-name\n        const r_e = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_r2 = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_r3 = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_s_ = this.param.getRandBN();\n        // tslint:disable-next-line:variable-name\n        const r_sk = this.param.getRandBN();\n\n        const E = this.param.PAIR.G1mul(ipk.h_sk, r_sk); // E\n\n        const t1 = this.param.PAIR.G1mul(A_, r_e); // t1\n        t1.add(this.param.PAIR.G1mul(ipk.h0, r_r2));\n\n        const t2 = this.param.PAIR.G1mul(B_, r_r3); // t2\n        t2.add(this.param.PAIR.G1mul(ipk.h0, r_s_));\n        t2.add(this.param.PAIR.G1mul(E, new this.param.BIG(-1)));\n        for (let i = 0; i < r_a.length; i++) {\n            if (r_a[i] !== false) {\n                t2.add(this.param.PAIR.G1mul(ipk.h[i], r_a[i]));\n            }\n        }\n\n        // c' = H(A', _A, B', Nym, t1, t2, g1, HRand, h1, ... , hL, w)\n        // tslint:disable-next-line:variable-name\n        const c_ = this.param.hashToBN(\n            A_,\n            _A,\n            B_,\n            this.Nym,\n            t1,\n            t2,\n            this.param.g1,\n            ipk.h0,\n            ipk.h,\n            ipk.w\n        );\n\n        const nonce = this.param.getRandBN();\n        // c = H(nonce, c', (D, I))\n        const c = this.param.hashToBN(nonce, c_, D, this.attrs);\n\n        // tslint:disable-next-line:variable-name\n        const s_sk = new this.param.BIG(0);\n        s_sk.copy(r_sk);\n        s_sk.add(this.param.BIG.modmul(c, this.sk.value, this.param.order));\n        s_sk.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_a = [];\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                s_a[i] = new this.param.BIG(0);\n                s_a[i].copy(r_a[i]);\n                s_a[i].sub(this.param.BIG.modmul(c, this.attrs[i], this.param.order));\n                s_a[i].mod(this.param.order);\n            } else {\n                s_a[i] = false;\n            }\n        }\n\n        // tslint:disable-next-line:variable-name\n        const s_e = new this.param.BIG(0);\n        s_e.copy(r_e);\n        s_e.sub(this.param.BIG.modmul(c, Cred.sig.e, this.param.order));\n        s_e.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_r2 = new this.param.BIG(0);\n        s_r2.copy(r_r2);\n        s_r2.add(this.param.BIG.modmul(c, r2, this.param.order));\n        s_r2.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_r3 = new this.param.BIG(0);\n        s_r3.copy(r_r3);\n        s_r3.add(this.param.BIG.modmul(c, r3, this.param.order));\n        s_r3.mod(this.param.order);\n\n        // tslint:disable-next-line:variable-name\n        const s_s_ = new this.param.BIG(0);\n        s_s_.copy(r_s_);\n        s_s_.sub(this.param.BIG.modmul(c, s_, this.param.order));\n        s_s_.mod(this.param.order);\n\n        const pi = {\n            c,\n            s_sk,\n            s_a,\n            s_e,\n            s_r2,\n            s_r3,\n            s_s_,\n            nonce\n        };\n\n        const proof = {\n            A_,\n            _A,\n            B_,\n            Nym: this.Nym,\n            pi\n        };\n\n        return proof;\n    }\n\n    Verify(proof: any, D: any[], attrs: any[]): boolean {\n        const ipk = this.ipk;\n\n        // make sure A is not infinity\n        const O = new this.param.ECP(0); // Add\n        // let O = new this.param.ECP(1); // Muliply\n        if (proof.A_.equals(O)) {\n            // tslint:disable-next-line:no-console\n            console.log('A\\' == O return true, verify failed.');\n            return false;\n        }\n\n        const A_ = new this.param.ECP();\n        A_.copy(proof.A_);\n        const w = new this.param.ECP2();\n        w.copy(ipk.w);\n        const _A = new this.param.ECP();\n        _A.copy(proof._A);\n        const g2Dup = new this.param.ECP2();\n        g2Dup.copy(this.param.g2);\n\n        A_.affine();\n        w.affine();\n        _A.affine();\n        g2Dup.affine();\n\n        let left = this.param.PAIR.ate(w, A_);\n        let right = this.param.PAIR.ate(g2Dup, _A);\n\n        left = this.param.PAIR.fexp(left);\n        right = this.param.PAIR.fexp(right);\n\n        if (!left.equals(right)) {\n            // tslint:disable-next-line:no-console\n            console.log('e(A\\', w) == e(_A, g2) return false, verify failed.');\n            return false;\n        }\n\n        _A.copy(proof._A);\n        // tslint:disable-next-line:variable-name\n        const _t1 = this.param.PAIR.G1mul(A_, proof.pi.s_e);\n        _t1.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_r2));\n        _A.sub(proof.B_);\n        _t1.add(this.param.PAIR.G1mul(_A, this.param.BIG.modneg(proof.pi.c, this.param.order)));\n\n        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)\n        // tslint:disable-next-line:variable-name\n        const _t2 = this.param.PAIR.G1mul(proof.B_, proof.pi.s_r3);\n        _t2.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_s_));\n        _t2.add(\n            this.param.PAIR.G1mul(ipk.h_sk, this.param.BIG.modneg(proof.pi.s_sk, this.param.order))\n        );\n\n        const sum = new this.param.ECP();\n        sum.copy(this.param.g1);\n        for (let i = 0; i < D.length; i++) {\n            if (D[i] === 0) {\n                _t2.add(this.param.PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]));\n            } else {\n                sum.add(this.param.PAIR.G1mul(ipk.h[i], attrs[i]));\n            }\n        }\n\n        _t2.add(this.param.PAIR.G1mul(sum, this.param.BIG.modneg(proof.pi.c, this.param.order)));\n\n        const c1 = this.param.hashToBN(\n            proof.A_,\n            proof._A,\n            proof.B_,\n            proof.Nym,\n            _t1,\n            _t2,\n            this.param.g1,\n            ipk.h0,\n            ipk.h,\n            ipk.w\n        );\n        const c2 = this.param.hashToBN(proof.pi.nonce, c1, D, attrs);\n\n        if (this.param.BIG.comp(c2, proof.pi.c) !== 0) {\n            // tslint:disable-next-line:no-console\n            console.log(\n                // tslint:disable-next-line:max-line-length\n                'c == H(nonce, H(A\\', _A, B\\', Nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.'\n            );\n            return false;\n        }\n\n        return true;\n    }\n}\n\n/**\n * CryptoSuite\n *  contains everything in Paring Based Cryptography\n */\nexport class CryptoSuite {\n    curve: string;\n    ctx: any;\n    order: any;\n    PAIR: any;\n    ECP: any;\n    ECP2: any;\n    BIG: any;\n    rng: any;\n    g1: any;\n    g2: any;\n\n    constructor(curve: string) {\n        this.curve = curve;\n        this.ctx = new CTX(curve);\n\n        this.PAIR = this.ctx.PAIR;          // Set pairing interface\n        this.ECP = this.ctx.ECP;            // Set G1 interface\n        this.ECP2 = this.ctx.ECP2;          // Set G2 interface\n        this.BIG = this.ctx.BIG;            // Set BN interface\n        this.rng = new this.ctx.RAND();     // new random number generator\n\n        this.g1 = this.getG1Generator();       // g1\n        this.g2 = this.getG2Generator();       // g2\n        this.order = this.getOrder(); // n\n    }\n\n    getG1Generator() {\n        const g1 = new this.ctx.ECP(0);    // new G1\n        const x = new this.ctx.BIG(0);\n        const y = new this.ctx.BIG(0);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Gx);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Gy);\n        g1.setxy(x, y);\n        return g1;\n    }\n\n    getG2Generator() {\n        const g2 = new this.ctx.ECP2(0);\n        const x = new this.ctx.BIG(0);\n        const y = new this.ctx.BIG(0);\n        const qx = new this.ctx.FP2(0);\n        const qy = new this.ctx.FP2(0);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pxa);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pxb);\n        qx.bset(x, y);\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pya);\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pyb);\n        qy.bset(x, y);\n        g2.setxy(qx, qy);\n        return g2;\n    }\n\n    getOrder() {\n        const r = new this.ctx.BIG(0);     // new BN\n        r.rcopy(this.ctx.ROM_CURVE.CURVE_Order);\n        return r;\n    }\n\n    getRandBN(): any {\n        const buf = utils.generateRandomArray(256);\n        this.rng.clean();\n        this.rng.seed(256, buf);\n        const r = this.BIG.randomnum(this.order, this.rng);\n        return r;\n    }\n\n    getRandG1(): any {\n        const r = this.getRandBN();\n        const g = this.PAIR.G1mul(this.g1, r);\n        return g;\n    }\n\n    getRandG2(): any {\n        const r = this.getRandBN();\n        const g = this.PAIR.G2mul(this.g2, r);\n        return g;\n    }\n\n    hashToBN(...points: any[]): any {\n        let all: any[] = [];\n        let tmp: ConcatArray<any> = [];\n        points.forEach((p) => {\n            if (Array.isArray(p)) {\n                if (typeof p[0] === 'number') {\n                    all = all.concat(p);\n                    tmp = [];\n                } else {\n                    p.forEach((pp) => {\n                        pp.toBytes(tmp);\n                        all = all.concat(tmp);\n                        tmp = [];\n                    });\n                }\n            } else {\n                p.toBytes(tmp);\n                all = all.concat(tmp);\n                tmp = [];\n            }\n        });\n        const H = new this.ctx.HASH256();\n        H.process_array(all);\n        const R = H.hash();\n        const C = this.BIG.fromBytes(R);\n        C.mod(this.order);\n        return C;\n    }\n\n    genAttrBN(attrs: any): any {\n        const HAttr = [];\n\n        for (let i = 0; i < attrs.length; i++) {\n            const t = this.getRandBN();\n            HAttr[i] = t;\n        }\n\n        return HAttr;\n    }\n\n    genAttrElement(attrs: any): any {\n        const HAttr = [];\n\n        for (let i = 0; i < attrs.length; i++) {\n            const t = this.getRandG1();\n            HAttr[i] = t;\n        }\n\n        return HAttr;\n    }\n}\n\n/**\n * CryptoBase\n *  contains a refrence to a CryptoSuite instance.\n */\nexport class CryptoBase {\n    param: CryptoSuite;\n    constructor(param: CryptoSuite) {\n        this.param = param;\n    }\n}\n\nexport class SecretKey extends CryptoBase {\n    /*\n     * GenerateSk():SecretKey\n     * Generate a random secret key.\n     */\n    static GenerateSk(param: CryptoSuite): SecretKey {\n        const x = param.getRandBN(); // isk\n        const sk = new SecretKey(param);\n        sk.setValue(x);\n        return sk;\n    }\n\n    value: any;\n\n    constructor(param: CryptoSuite) {\n        super(param);\n        this.value = new this.param.BIG(0);\n    }\n\n    setValue(v: any) {\n        this.value.copy(v);\n    }\n\n    GenerateIssuerPublicKey(): IssuerPublicKey {\n        const x = this.value;\n        const w = this.param.PAIR.G2mul(this.param.g2, x); // w\n        let r = this.param.getRandBN(); // random number\n        // tslint:disable-next-line:variable-name\n        const _g1 = this.param.PAIR.G1mul(this.param.g1, r);\n        // tslint:disable-next-line:variable-name\n        const _g2 = this.param.PAIR.G1mul(_g1, x);\n\n        // zkp - pi\n        r = this.param.getRandBN();\n        const t1 = this.param.PAIR.G2mul(this.param.g2, r);\n        const t2 = this.param.PAIR.G1mul(_g1, r);\n\n        const C = this.param.hashToBN(t1, t2, this.param.g2, _g1, w, _g2);\n\n        const S = this.param.BIG.modmul(C, x, this.param.order);\n        S.add(r);\n        S.mod(this.param.order);\n\n        const pi = {\n            C,\n            S\n        };\n\n        const pk = new IssuerPublicKey(this.param);\n        pk.SetBasicValue(w, _g1, _g2, pi);\n        return pk;\n    }\n\n    /*\n     * ToBytes()\n     *  convert secret key to string format.\n     *  TODO:: add serialize function.\n     */\n    ToBytes() {\n        if (this.value === undefined) {\n            return '';\n        }\n        return this.value.toBytes();\n    }\n\n    /*\n     * FromString(s: any)\n     *  convert string to a SecretKey.\n     *  TODO:: add unserialize function.\n     */\n    FromBytes(s: any) {\n        this.value = this.param.BIG.fromBytes(s);\n        return this.value.toString();\n    }\n\n    /*\n     * GenerateSk():SecretKey\n     * Generate a random secret key.\n     */\n    Rand() {\n        const x = this.param.getRandBN(); // isk\n        this.setValue(x);\n    }\n\n}\n\nexport class IssuerPublicKey extends CryptoBase {\n    /*\n     * COPY(target: IssuerPublicKey):IssuerPublicKey\n     *  copy and return a new public key\n     */\n    static COPY(target: IssuerPublicKey): IssuerPublicKey {\n        const pk = new IssuerPublicKey(target.param);\n        pk.SetBasicValue(target.w, target._g1, target._g2, target.pi);\n        pk.SetAttrValue(target.h0, target.h_sk, target.h, target.attr);\n        return pk;\n    }\n\n    w: any;\n    // tslint:disable-next-line:variable-name\n    _g1: any;\n    // tslint:disable-next-line:variable-name\n    _g2: any;\n    pi: {\n        C: any,\n        S: any\n    };\n    h0: any;\n    // tslint:disable-next-line:variable-name\n    h_sk: any;\n    h: any;\n    attr: any[];\n\n    constructor(param: CryptoSuite) {\n        super(param);\n\n        this.w = new this.param.ECP2();\n        this._g1 = new this.param.ECP();\n        this._g2 = new this.param.ECP();\n\n        const C = new this.param.BIG();\n        const S = new this.param.BIG();\n        this.pi = {C, S};\n\n        this.h0 = new this.param.ECP();\n        this.h_sk = new this.param.ECP();\n        this.attr = [];\n    }\n\n    /*\n     * SetBasicValue(w, _g1, _g2, pi)\n     *  set basic values of the public key\n     */\n    // tslint:disable-next-line:variable-name\n    SetBasicValue(w: any, _g1: any, _g2: any, pi: any) {\n        this.w.copy(w);\n        this._g1.copy(_g1);\n        this._g2.copy(_g2);\n        this.pi.C.copy(pi.C);\n        this.pi.S.copy(pi.S);\n    }\n\n    /*\n     * SetAttrValue(h0, h_sk, h, attr)\n     *  set basic values of the public key\n     */\n    // tslint:disable-next-line:variable-name\n    SetAttrValue(h0: any, h_sk: any, h: any[], attr: any[]) {\n        this.h0.copy(h0);\n        this.h_sk.copy(h_sk);\n        this.h = [];\n        this.attr = [];\n\n        for (let i = 0; i < h.length; i++) {\n            this.h[i] = new this.param.ECP();\n            this.h[i].copy(h[i]);\n        }\n        for (let i = 0; i < attr.length; i++) {\n            this.attr[i] = attr[i];\n        }\n    }\n\n    /*\n     * GenerateAttr(AttributeName)\n     *  generates\n     *    ipk.h0: rand G1\n     *    ipk.h_sk: rand G1\n     *    ipk.h[]: Rand G1 array, match to AttributeName\n     */\n    GenerateAttr(AttributeName: any) {\n        const HAttr = this.param.genAttrElement(AttributeName);\n        const h0 = this.param.getRandG1();\n        // tslint:disable-next-line:variable-name\n        const h_sk = this.param.getRandG1();\n        const h: any[] = [];\n\n        HAttr.forEach((a: any) => {\n            h.push(a);\n        });\n\n        this.h0 = h0;\n        this.h_sk = h_sk;\n        this.h = h;\n        this.attr = AttributeName;\n    }\n\n    /*\n     * VerifyCredentialRequest(Nym, pi, n)\n     *  verifies user's credential request\n     */\n    VerifyCredentialRequest(CR: any): boolean {\n        const C = new this.param.BIG(0);\n        C.copy(CR.pi.C);\n\n        // tslint:disable-next-line:variable-name\n        const _t1 = this.param.PAIR.G1mul(this.h_sk, CR.pi.S);\n        _t1.add(this.param.PAIR.G1mul(CR.Nym, this.param.BIG.modneg(C, this.param.order)));\n\n        const _C = this.param.hashToBN(_t1, this.h_sk, CR.Nym, CR.nonce);\n\n        return this.param.BIG.comp(CR.pi.C, _C) === 0;\n    }\n\n}\n\n/**\n * Credential\n *  The credential generated from issuer\n */\nexport class Credential extends CryptoBase {\n    sig: {\n        A: any,\n        B: any,\n        e: any,\n        s: any\n    };\n    attrs: any[];\n\n    constructor(param: CryptoSuite) {\n        super(param);\n        const A = new this.param.ECP();\n        const B = new this.param.ECP();\n        const e = new this.param.BIG();\n        const s = new this.param.BIG();\n        this.sig = {A, B, e, s};\n        this.attrs = [];\n    }\n\n    Set(A: any, B: any, e: any, s: any, attrs: any) {\n        this.sig.A.copy(A);\n        this.sig.B.copy(B);\n        this.sig.e.copy(e);\n        this.sig.s.copy(s);\n\n        for (let i = 0; i < attrs.length; i++) {\n            this.attrs[i] = new this.param.BIG();\n            this.attrs[i].copy(attrs[i]);\n        }\n    }\n\n    Copy(target: Credential) {\n        this.Set(target.sig.A, target.sig.B, target.sig.e, target.sig.s, target.attrs);\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as crypto from 'crypto';\nimport * as elliptic from 'elliptic';\nimport * as pkcs7 from 'pkcs7';\n\nexport class Ecies {\n    /**\n     * Algorithm used for encryption.\n     */\n    encAlg: string;\n    /**\n     * Hash Algorithm used for kdf.\n     */\n    hashAlg: string;\n    /**\n     * Hash digest byte size.\n     */\n    digestSize: number;\n    /**\n     * Key input and out put format.\n     */\n    keyFormat: string;\n    /**\n     * Initialized Vector\n     */\n    iv: Buffer;\n    /**\n     * Elliptic Curve instance\n     */\n    ec: any;\n    /**\n     * key pair from\n     * ec instance\n     */\n    keyPair: any;\n\n    /**\n     * if true, the pubkey will be\n     * in compressed format, begin with '02' or '03'.\n     * if false, begin with '04'\n     */\n    compact: boolean;\n\n    /**\n     * for curve name,\n     * go https://github.com/indutny/elliptic\n     * for reference\n     */\n    constructor(Curve?: string) {\n        // default setting\n        this.encAlg = 'aes-256-cbc';\n        this.hashAlg = 'sha256';\n        this.digestSize = 32;\n        this.keyFormat = 'hex';\n        this.compact = true;\n\n        // const curve = Curve || 'secp256r1';\n        const curve = Curve || 'p256';\n\n        this.ec = new elliptic.ec(curve);\n        this.keyPair = this.ec.genKeyPair();\n        this.iv = Buffer.alloc(0);\n    }\n    /**\n     * generate random key pair\n     */\n    generateKeyPair(): any {\n        this.keyPair = this.ec.genKeyPair();\n        return {\n            priv: this.keyPair.getPrivate('hex'),\n            pub: this.keyPair.getPublic(this.compact, 'hex')\n        };\n    }\n    /**\n     * set key pair with private key\n     * @param privHex private key in hex coding.\n     */\n    setKeyPair(privHex: string) {\n        this.keyPair = this.ec.keyFromPrivate(privHex, 'hex');\n    }\n    /**\n     * get key pair in use\n     * @return = {pri, pub}\n     * all in hex coding.\n     */\n    getKeyPair(): any {\n        return {\n            priv: this.keyPair.getPrivate('hex'),\n            pub: this.keyPair.getPublic(this.compact, 'hex')\n        };\n    }\n\n    /**\n     * encrypt a message with given\n     * public key and initialized vector\n     *\n     * @param pubkey hex string of public key\n     * @param msg byte buffer of message\n     * @param keylen byte length of kdf's output.\n     */\n    // tslint:disable-next-line:variable-name\n    enc(pubkey: string, msg: Buffer, keylen: number, _iv?: string): any {\n        const publicB = this.ec.keyFromPublic(pubkey, 'hex').getPublic();\n\n        // generate a random number\n        // r = (0, order)\n        const tmpKP = this.ec.genKeyPair();\n        const r = tmpKP.getPrivate();\n\n        const gTilde = tmpKP.getPublic();\n        const hTilde = publicB.mul(r);\n\n        const out = gTilde.encode('hex');\n        const PEH = hTilde.getX().toString('hex');\n        const seed = Buffer.from(out + PEH, 'hex');\n\n        const derivedKeyArray = this.kdf2(\n            seed,\n            keylen * 8,\n            this.digestSize,\n            this.hashAlg\n        );\n        if (!derivedKeyArray) {\n            return;\n        }\n        const derivedKey = Buffer.concat(derivedKeyArray);\n\n        let iv = Buffer.alloc(16);\n        if (!_iv) {\n            // generate a random iv, fixed size\n            crypto.randomFillSync(iv);\n        } else {\n            iv = Buffer.from(_iv, 'hex');\n        }\n\n        const algorithm = this.encAlg;\n\n        const cipher = crypto.createCipheriv(algorithm, derivedKey, iv);\n        cipher.setAutoPadding(false);\n\n        const msgCipher =\n            cipher.update(pkcs7.pad(msg), 'binary', 'hex') +\n            cipher.final('hex');\n\n        return {\n            iv: iv.toString('hex'),\n            out,\n            msgCipher\n        };\n    }\n    /**\n     * encrypt a message with given\n     * public key and initialized vector\n     *\n     * @param msgCipher\n     * @param out\n     * @param iv\n     * @param keylen\n     */\n    dec(msgCipher: string, out: string, iv: any, keylen: number): Buffer {\n        const gTilde = this.ec.keyFromPublic(out, 'hex').getPublic();\n\n        const hTilde = gTilde.mul(this.keyPair.getPrivate());\n        const PEH = hTilde.getX().toString('hex');\n        const seed = Buffer.from(out + PEH, 'hex');\n\n        const derivedKeyArray = this.kdf2(\n            seed,\n            keylen * 8,\n            this.digestSize,\n            this.hashAlg\n        );\n        if (!derivedKeyArray) {\n            return Buffer.alloc(0);\n        }\n        const derivedKey = Buffer.concat(derivedKeyArray);\n        const iv2 = Buffer.from(iv, 'hex');\n\n        const algorithm = this.encAlg;\n        const decipher = crypto.createDecipheriv(algorithm, derivedKey, iv2);\n        decipher.setAutoPadding(false);\n        const plain =\n            decipher.update(msgCipher, 'hex', 'binary') +\n            decipher.final('binary');\n\n        // un padding\n        const unpad = pkcs7.unpad(Buffer.from(plain, 'binary'));\n\n        return Buffer.from(unpad);\n    }\n\n    /* utils */\n    kdf2(\n        seed: Buffer,\n        len: number,\n        digestSize: number,\n        hashFunc: string\n    ): Buffer[] {\n        if (len < 0) {\n            return [];\n        }\n        const byteLen = Math.ceil(len / 8);\n        const b = Math.ceil(byteLen / digestSize);\n        const key = [];\n        const offset = byteLen - (b - 1) * digestSize; // byte offset\n\n        let counter = 1; // 1 for pbkdf2, 0 for pbkdf1\n\n        let hashIns;\n        while (counter < b) {\n            hashIns = crypto.createHash(hashFunc);\n            const h = hashIns\n                .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\n                .digest();\n            key[counter - 1] = Buffer.alloc(offset);\n            key[counter - 1] = h;\n            counter++;\n        }\n        hashIns = crypto.createHash(hashFunc);\n        const hEnd = hashIns\n            .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\n            .digest();\n        key[counter - 1] = Buffer.alloc(offset);\n        key[counter - 1] = hEnd;\n\n        return key;\n    }\n\n    I2OSP(num: number, len: number): Buffer {\n        const buf = Buffer.allocUnsafe(len);\n        buf.writeUIntBE(num, 0, len);\n        return buf;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport { reverseHex, StringReader } from '../utils';\n\nconst Fixed64Size = 8;\nexport default class Fixed64 {\n    static deserialize(sr: StringReader) {\n        const f = new Fixed64();\n        let v = sr.read(8);\n        // f.value = hexstr2str(v)\n        v = reverseHex(v);\n        while (v.substr(0, 2) === '00' ) {\n            v = v.substring(2);\n        }\n        f.value = new BigNumber(v, 16).toString();\n        return f;\n    }\n\n    // 8 bytes\n    value: string;\n    constructor(value?: string) {\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\n            throw new Error('Invalid value.' + value);\n        }\n        this.value = value || '0000000000000000';\n    }\n\n    serialize() {\n        // return str2hexstr(this.value)\n        let hexstring = new BigNumber(this.value).toString(16);\n        const size = Fixed64Size * 2;\n\n        hexstring = hexstring.length % size === 0\n            ? hexstring\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n\n        hexstring = reverseHex(hexstring);\n        return hexstring;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Parameter } from './parameter';\n\n/**\n * Describes the Abi function\n */\nexport default class AbiFunction {\n    name: string;\n    returntype: string;\n    parameters: Parameter[];\n\n    constructor(name: string, returntype: string, parameters: Parameter[]) {\n        this.name = name;\n        this.returntype = returntype;\n        this.parameters = parameters;\n    }\n\n    getParameter(name: string): any {\n        // const p = {} as Parameter;\n\n        for (const v of this.parameters) {\n            if (v.getName() === name) {\n                return v;\n            }\n        }\n        return null;\n    }\n\n    setParamsValue(...args: Parameter[]): void {\n        for (let i = 0, len = args.length; i < len; i++) {\n            // tslint:disable-next-line:prefer-for-of\n            for (let j = 0 ; j < this.parameters.length; j++) {\n                if (args[i].name === this.parameters[j].getName()) {\n                    this.parameters[j].setValue(args[i]);\n                }\n            }\n        }\n        // const parameters = [];\n        // for (let i = 0, len = args.length; i < len; i++) {\n        //     parameters.push(args[i]);\n        // }\n        // this.parameters = parameters;\n    }\n\n    toString(): string {\n        const json = {\n            name : this.name,\n            returntype : this.returntype,\n            parameters : this.parameters\n        };\n\n        return JSON.stringify(json);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport {\n    bool2VarByte,\n    hex2VarBytes,\n    hexstr2str,\n    str2VarBytes,\n    StringReader\n} from '../../utils';\nimport Payload from './payload';\n\n/**\n * Describes the payload of deploy code\n */\nexport default class DeployCode extends Payload {\n    /**\n     * Hex encoded contract content\n     */\n    code: string;\n\n    /**\n     * Decides if the contract need storage\n     */\n    needStorage: boolean;\n    /**\n     * Name of the smart contract\n     */\n    name: string;\n    /**\n     * Version of the contract\n     */\n    version: string;\n    /**\n     * Author of the contract\n     */\n    author: string;\n    /**\n     * Email of the author\n     */\n    email: string;\n    /**\n     * Description of the contract\n     */\n    description: string;\n\n    /**\n     * Serialize deploy code to hex string\n     */\n    serialize(): string {\n        let result = '';\n\n        // result += this.code.serialize();\n        result += hex2VarBytes(this.code);\n\n        result += bool2VarByte(this.needStorage);\n\n        result += str2VarBytes(this.name);\n\n        result += str2VarBytes(this.version);\n\n        result += str2VarBytes(this.author);\n\n        result += str2VarBytes(this.email);\n\n        result += str2VarBytes(this.description);\n\n        return result;\n    }\n\n    /**\n     * Deserialize deploy code\n     * @param sr\n     */\n    deserialize(sr: StringReader): void {\n\n        // const code = VmCode.deserialize(sr);\n        const code = sr.readNextBytes();\n        this.code = code;\n\n        const boolValue = sr.read(1);\n        this.needStorage = boolValue === '00' ? false : true;\n\n        const name = sr.readNextBytes();\n        this.name = hexstr2str(name);\n\n        const codeVersion = sr.readNextBytes();\n        this.version = hexstr2str(codeVersion);\n\n        const author = sr.readNextBytes();\n        this.author = hexstr2str(author);\n\n        const email = sr.readNextBytes();\n        this.email = hexstr2str(email);\n\n        const description = sr.readNextBytes();\n        this.description = hexstr2str(description);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { hex2VarBytes, StringReader } from '../../utils';\nimport Payload from './payload';\n\nexport default class InvokeCode extends Payload {\n    // the length is of bytes 20\n    /*\n    scriptHash : string\n    parameters : Array<Parameter> = []\n    functionName : string\n     */\n\n    /**\n     * Hex encoed string\n     */\n    code: string;\n\n    constructor() {\n        super();\n        // this.gasLimit = new Fixed64()\n    }\n\n/*     serialize() : string {\n        let payloadLength\n        let paramsLength = num2hexstring( 0x50 + this.parameters.length) //start from '0x50'\n        const paramsEnd = 'c1'\n        let funcNameHex = str2hexstr(this.functionName)\n        const funcNameLength = num2hexstring(funcNameHex.length/2)\n\n        let params = []\n        for(let i = this.parameters.length-1; i > -1; i--) {\n            let p = this.parameters[i]\n            let hexP = p.getValue()\n            let hexPLength = num2VarInt( hexP.length / 2)\n            let opcode = ''\n            if( hexP.length/2 < OPCODE.PUSHBYTES75) {\n\n            } else if (hexP.length / 2 < 0x100) {\n                opcode = num2VarInt( OPCODE.PUSHDATA1 )\n            } else if( hexP.length/2 < 0x1000 ) {\n                opcode = num2hexstring( OPCODE.PUSHDATA2, 2, true)\n            } else {\n                opcode = num2hexstring( OPCODE.PUSHDATA4, 4, true)\n            }\n            params.push ({\n                hexPLength,\n                hexP,\n                opcode\n            })\n        }\n\n        let result = ''\n        //scripthash\n        // result += this.scriptHash\n        //params\n        for(let v of params) {\n            if(v.opcode) {\n                result += v.opcode\n            }\n            result += v.hexPLength\n            result += v.hexP\n        }\n        result += paramsLength\n        //end\n        result += paramsEnd\n        //function\n        result += funcNameLength\n        result += funcNameHex\n        let totalParamsLength = num2VarInt(result.length / 2)\n        //result = this.scriptHash + totalParamsLength + result\n\n        console.log('invode serialze: '+ result)\n\n        return result\n    }  */\n\n    serialize() {\n        let result = '';\n        // if(this.gasLimit) {\n        //     result += this.gasLimit.serialize()\n        // }\n        // result += this.code.serialize();\n        result += hex2VarBytes(this.code);\n        return result;\n    }\n\n    /* deserialize(ss : StringReader) : void {\n        //scriptHash, fixed langth\n        this.scriptHash = ss.read(20)\n        //payload total lenght\n        const payloadLen = ss.readNextLen()\n\n        //read params start\n        let params = []\n        let nextByte = ss.readNextLen()\n        //params's length start from 0x50\n        while(nextByte < 0x50) {\n            let p = ss.read(nextByte)\n            params.push(p)\n            nextByte = ss.readNextLen()\n        }\n        //params end\n        let end = ss.read(1)\n        console.log('end :' + end)\n        if(end === 'c1') {\n            for(let i=0; i< params.length; i++) {\n                //TODO can only get value\n                this.parameters.push(new Parameter('','',params[i]))\n            }\n        }\n        //function name\n        let funNameLen = ss.readNextLen()\n        let func = ss.read(funNameLen)\n        func = hexstr2str(func)\n        //payload end\n        this.functionName = func\n\n    }  */\n\n    deserialize(sr: StringReader) {\n        // let gasLimit = Fixed64.deserialize(sr);\n        // const code = VmCode.deserialize(sr);\n        const code = sr.readNextBytes();\n        // this.gasLimit = gasLimit;\n        this.code = code;\n        return this;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport Fixed64 from '../common/fixed64';\nimport { Address } from '../crypto/address';\nimport { Signable } from '../crypto/signable';\nimport { ab2hexstring, generateRandomArray, num2hexstring, StringReader } from '../utils';\nimport DeployCode from './payload/deployCode';\nimport InvokeCode from './payload/invokeCode';\nimport Payload from './payload/payload';\nimport { TransactionAttribute } from './txAttribute';\nimport { TxSignature } from './txSignature';\n\nexport enum TxType  {\n    BookKeeper      = 0x02,\n    Claim           = 0x03,\n    Deploy          = 0xd0,\n    Invoke          = 0xd1,\n    Enrollment      = 0x04,\n    Vote            = 0x05\n}\n\nexport const TxName = {\n    BookKeeper: 'BookKeeper',\n    Claim: 'Claim',\n    Deploy: 'Deploy',\n    Invoke: 'Invoke',\n    Enrollment: 'Enrollment',\n    Vote: 'Vote'\n};\n\n/**\n * @deprecated. Transaction fee.\n */\nexport class Fee {\n    static deserialize(sr: StringReader): Fee {\n        const fee = new Fee();\n        const amount = Fixed64.deserialize(sr);\n        const payer = sr.read(20);\n        fee.amount = amount;\n        fee.payer = new Address(payer);\n        return fee;\n    }\n\n    amount: Fixed64;\n\n    // 20 bytes address\n    payer: Address;\n\n    serialize(): string {\n        let result = '';\n        result += this.amount.serialize();\n        result += this.payer.serialize();\n        return result;\n    }\n}\n\nexport class Transaction implements Signable {\n    static deserialize(hexstring: string): Transaction {\n        const tx = new Transaction();\n\n        // console.log(' hexstring' + hexstring)\n        const ss = new StringReader(hexstring);\n\n        tx.version = parseInt(ss.read(1), 16);\n        tx.type = parseInt(ss.read(1), 16);\n        tx.nonce = ss.read(4);\n        tx.gasPrice = Fixed64.deserialize(ss);\n        tx.gasLimit = Fixed64.deserialize(ss);\n        tx.payer = new Address(ss.read(20));\n        let payload;\n\n        switch (tx.type) {\n        case TxType.Invoke :\n            payload = new InvokeCode();\n            break;\n        case TxType.Deploy:\n            payload = new DeployCode();\n            break;\n        default :\n            payload = new InvokeCode();\n        }\n        payload.deserialize(ss);\n        tx.payload = payload;\n        tx.txAttributes = [];\n        tx.sigs = [];\n\n        const attributeLength = ss.readNextLen();\n        for (let i = 0; i < attributeLength; i++) {\n            const txAttribute = new TransactionAttribute();\n            txAttribute.deserialize(ss);\n            tx.txAttributes.push(txAttribute);\n        }\n\n        const sigLength = ss.readNextLen();\n        for (let i = 0; i < sigLength; i++) {\n            tx.sigs.push(TxSignature.deserialize(ss));\n        }\n\n        return tx;\n    }\n\n    /**\n     * Transaction type\n     */\n    type: TxType = 0xd1;\n\n    /**\n     * Version of transaction\n     */\n    version: number = 0x00;\n\n    /**\n     * Payload of transaction\n     */\n    payload: Payload;\n\n    /**\n     * Random hex string. 4 bytes.\n     */\n    nonce: string;\n\n    /**\n     * @deprecated\n     */\n    txAttributes: TransactionAttribute[] = [];\n\n    /**\n     * Gas price\n     */\n    gasPrice: Fixed64;\n\n    /**\n     * Gas limit\n     */\n    gasLimit: Fixed64;\n\n    /**\n     * Address to pay for gas\n     */\n    payer: Address;\n\n    /**\n     * Array of signatures\n     */\n    sigs: TxSignature[] = [];\n\n    constructor() {\n        this.nonce = ab2hexstring(generateRandomArray(4));\n        this.gasPrice = new Fixed64();\n\n        // const limit = num2hexstring(DEFAULT_GAS_LIMIT, 8, true);\n\n        this.gasLimit = new Fixed64();\n        this.payer = new Address('0000000000000000000000000000000000000000');\n    }\n\n    /**\n     * Serialize transaction to hex string\n     * The result is used to send to blockchain.\n     */\n    serialize(): string {\n        const unsigned = this.serializeUnsignedData();\n        const signed = this.serializeSignedData();\n\n        return unsigned + signed;\n    }\n\n    /**\n     * Serialize transaction data exclueds signatures\n     */\n    serializeUnsignedData() {\n        let result = '';\n        result += num2hexstring(this.version);\n        result += num2hexstring(this.type);\n\n        // nonce 4bytes\n        result += this.nonce;\n        result += this.gasPrice.serialize();\n        result += this.gasLimit.serialize();\n        result += this.payer.serialize();\n        result += this.payload.serialize();\n\n        // serialize transaction attributes\n        result += num2hexstring(this.txAttributes.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.txAttributes.length; i++) {\n            result += this.txAttributes[i].serialize();\n        }\n        // result += num2hexstring(this.fee.length)\n        // for (let i=0 ; i< this.fee.length; i++) {\n        //     result += this.fee[i].amount.serialize()\n        //     result += this.fee[i].payer.serialize()\n        // }\n\n        // if(this.networkFee) {\n        //     result += this.networkFee.serialize()\n        // }\n\n        return result;\n    }\n\n    /**\n     * Serialize signatures\n     */\n    serializeSignedData() {\n        let result = '';\n        // programs\n        result += num2hexstring(this.sigs.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.sigs.length; i++) {\n            result += this.sigs[i].serialize();\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the signable content\n     */\n    getSignContent() {\n        const data = this.serializeUnsignedData();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    /**\n     * Get the hash of transaction\n     * @deprecated Use getSignContent instead\n     */\n    getHash() {\n        return this.getSignContent();\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { PrivateKey, PublicKey, Signable, SignatureScheme } from '../crypto';\nimport { hex2VarBytes, StringReader } from '../utils';\nimport { getParamsFromProgram, getProgramInfo,\n    programFromMultiPubKey, programFromParams, programFromPubKey } from './program';\n\n/**\n * Signature generated by signing transaction hash with Private Keys.\n */\nexport class TxSignature {\n\n    /**\n     * Deserializes hex representation to Transaction Signature\n     *\n     * @param sr Hex string reader\n     */\n    static deserialize(sr: StringReader) {\n        const sig = new TxSignature();\n        // sig.pubKeys = [];\n        // const pubKeyLength = sr.readNextLen();\n\n        // for (let i = 0; i < pubKeyLength; i++) {\n        //     const serializedLength = sr.readNextLen();\n        //     const pk = PublicKey.deserializeHex(sr, serializedLength);\n        //     sig.pubKeys.push(pk);\n        // }\n\n        // sig.M = sr.readNextLen();\n        // sig.sigData = [];\n\n        // const dataLength = sr.readNextLen();\n        // for (let i = 0; i < dataLength; i++) {\n        //     const data = sr.readNextBytes();\n        //     sig.sigData.push(data);\n        // }\n        const invocationScript = sr.readNextBytes();\n        const verificationScript = sr.readNextBytes();\n        const sigData = getParamsFromProgram(invocationScript);\n        const info = getProgramInfo(verificationScript);\n        sig.M = info.M;\n        sig.pubKeys = info.pubKeys;\n        sig.sigData = sigData;\n        return sig;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\n\n        return signature;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme asynchroniously.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static async createAsync(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [(await privateKey.signAsync(hash, scheme)).serializeHex()];\n\n        return signature;\n    }\n\n    /**\n     * Public keys used to create this signature.\n     */\n    pubKeys: PublicKey[];\n\n    // Cardinality of the signature\n    M: number;\n\n    // Signature values\n    sigData: string[];\n\n    /**\n     * Serializes signature to Hex representation.\n     *\n     */\n    serialize(): string {\n        let result = '';\n        // result += num2hexstring(this.pubKeys.length);\n\n        // // tslint:disable-next-line:prefer-for-of\n        // for (let i = 0; i < this.pubKeys.length; i++) {\n        //     const serialized = this.pubKeys[i].serializeHex();\n        //     result += num2hexstring(serialized.length / 2);\n        //     result += serialized;\n        // }\n\n        // result += num2hexstring(this.M);\n\n        // result += num2hexstring(this.sigData.length);\n\n        // // tslint:disable-next-line:prefer-for-of\n        // for (let i = 0; i < this.sigData.length; i++) {\n        //     result += hex2VarBytes(this.sigData[i]);\n        // }\n        const invocationScript = programFromParams(this.sigData);\n        let verificationScript = '';\n        if (this.pubKeys.length === 0) {\n            throw new Error('No pubkeys in sig');\n        } else if (this.pubKeys.length === 1) {\n            verificationScript = programFromPubKey(this.pubKeys[0]);\n        } else {\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\n        }\n        result += hex2VarBytes(invocationScript);\n        result += hex2VarBytes(verificationScript);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Address } from '../crypto/address';\nimport { Transaction } from './transaction';\n\nexport class Transfer extends Transaction {\n    amount: number | string;\n    tokenType: string;\n    from: Address;\n    to: Address;\n    method: string;\n}\n","\nimport Fixed64 from '../common/fixed64';\nimport { NATIVE_INVOKE_NAME } from '../consts';\nimport { Address } from '../crypto';\nimport { num2hexstring, str2hexstr } from '../utils';\nimport OPCODE from './opcode';\nimport InvokeCode from './payload/invokeCode';\nimport { pushHexString, pushInt } from './scriptBuilder';\nimport { Transaction, TxType } from './transaction';\nimport { Transfer } from './transfer';\n\n/**\n * Creates transaction to invoke native contract\n * @param funcName Function name of contract to call\n * @param params Parameters serialized in hex string\n * @param contractAddr Adderss of contract\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for transaction gas\n */\nexport function makeNativeContractTx(\n    funcName: string,\n    params: string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address\n) {\n    let code = '';\n    code += params;\n    code += pushHexString(str2hexstr(funcName));\n    code += pushHexString(contractAddr.serialize());\n    code += pushInt(0);\n    code += num2hexstring(OPCODE.SYSCALL);\n    code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\n    const payload = new InvokeCode();\n    payload.code = code;\n\n    let tx: Transaction;\n    if (funcName === 'transfer' || funcName === 'transferFrom') {\n        tx = new Transfer();\n    } else {\n        tx = new Transaction();\n    }\n\n    tx.type = TxType.Invoke;\n    tx.payload = payload;\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { BigNumber } from 'bignumber.js';\nimport { Address } from '../../crypto/address';\nimport opcode from '../../transaction/opcode';\nimport { hex2VarBytes, num2hexstring, str2VarBytes } from '../../utils';\nimport { pushBigNum, pushBool, pushHexString, pushInt } from './../../transaction/scriptBuilder';\nimport { Parameter, ParameterType } from './parameter';\nimport Struct from './struct';\n\nexport function buildParams(params: Parameter[]): string {\n    let result = '';\n    for (const p of params) {\n        const type = p.getType();\n        switch (type) {\n        case ParameterType.ByteArray:\n            result += hex2VarBytes(p.value);\n            break;\n        case ParameterType.Int:\n            result += num2hexstring(p.value, 4, true);\n            break;\n        case ParameterType.String:\n            result += str2VarBytes(p.value);\n            break;\n        case ParameterType.Address:\n            result += p.value.serialize();\n        default:\n            break;\n        }\n    }\n    return result;\n}\n\nexport function createCodeParamScript(obj: any): string {\n    let result = '';\n    // Consider string as hexstr\n    if (typeof obj === 'string') {\n        result += pushHexString(obj);\n    } else if (typeof obj === 'boolean') {\n        result += pushBool(obj);\n    } else if (typeof obj === 'number') {\n        result += pushInt(obj);\n    } else if (obj instanceof BigNumber) {\n        result += pushBigNum(obj);\n    } else if (obj instanceof Address) {\n        result += pushHexString(obj.serialize());\n    } else if (obj instanceof Struct) {\n        for (const v of obj.list) {\n            result += createCodeParamScript(v);\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\n            result += num2hexstring(opcode.SWAP);\n            result += num2hexstring(opcode.APPEND);\n        }\n    }\n    return result;\n}\n\nexport function buildNativeCodeScript(list: any[]) {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        // Consider string as hexstr\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val);\n        } else if (val instanceof Address) {\n            result += pushHexString(val.serialize());\n        } else if (val instanceof Struct) {\n            result += pushInt(0);\n            result += num2hexstring(opcode.NEWSTRUCT);\n            result += num2hexstring(opcode.TOALTSTACK);\n            for (const v of val.list) {\n                result += createCodeParamScript(v);\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\n                result += num2hexstring(opcode.SWAP);\n                result += num2hexstring(opcode.APPEND);\n            }\n            result += num2hexstring(opcode.FROMALTSTACK);\n        // } else if (Array.isArray(val) && isTypedArray(val, Struct)) {\n        //     result += pushInt(0);\n        //     result += num2hexstring(opcode.NEWSTRUCT);\n        //     result += num2hexstring(opcode.TOALTSTACK);\n        //     for (const s of val) {\n        //         result += createCodeParamScript(s);\n        //     }\n        //     result += num2hexstring(opcode.FROMALTSTACK);\n        //     result += pushInt(val.length);\n        //     result += num2hexstring(opcode.PACK);\n        } else if (Array.isArray(val)) {\n            result += buildNativeCodeScript(val);\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n}\n\nexport function isTypedArray(arr: any[], type: any) {\n    let result = true;\n    for (const a of arr) {\n        if (!(a instanceof type)) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../../common/bigInt';\nimport { TOKEN_TYPE } from '../../consts';\nimport { Address } from '../../crypto';\nimport { ERROR_CODE } from '../../error';\nimport { Transaction } from '../../transaction/transaction';\nimport { Transfer } from '../../transaction/transfer';\nimport { hex2VarBytes, hexstr2str, StringReader } from '../../utils';\nimport { makeNativeContractTx } from './../../transaction/transactionUtils';\nimport { buildNativeCodeScript } from './../abi/nativeVmParamsBuilder';\nimport Struct from './../abi/struct';\nimport { State } from './token';\n\nexport const ONT_CONTRACT = '0000000000000000000000000000000000000001';\nexport const ONG_CONTRACT = '0000000000000000000000000000000000000002';\n\n/**\n * Get the address of native asset contract\n * @param tokenType Token type. Can only be ONT or ONG\n */\nexport function getTokenContract(tokenType: string) {\n    if (tokenType === TOKEN_TYPE.ONT) {\n        return new Address(ONT_CONTRACT);\n    } else if (tokenType === TOKEN_TYPE.ONG) {\n        return new Address(ONG_CONTRACT);\n    } else {\n        throw new Error('Error token type.');\n    }\n}\n\n/**\n * Verify amount\n * @param amount Amount\n */\nexport function verifyAmount(amount: number | string) {\n    const value = new BigNumber(amount);\n\n    if (!value.isInteger() || value.lte(new BigNumber(0))) {\n        throw new Error('Amount is invalid.');\n    }\n}\n\n/**\n * Creates transaction to transfer native assets.\n * @param tokenType ONT or ONG\n * @param from sender's address\n * @param to receiver's address\n * @param amount Amount of amount to transfer\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for transaction's gas.\n */\nexport function makeTransferTx(\n    tokenType: string,\n    from: Address,\n    to: Address,\n    amount: number | string,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transfer {\n    verifyAmount(amount);\n    const num = new BigNumber(amount);\n    const struct = new Struct();\n    struct.add(from, to, num);\n    const list = [];\n    list.push([struct]);\n    const contract = getTokenContract(tokenType);\n    const params = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\n    tx.tokenType = tokenType;\n    tx.from = from;\n    tx.to = to;\n    tx.amount = amount;\n    tx.method = 'transfer';\n\n    if (payer) {\n        tx.payer = payer;\n    } else {\n        tx.payer = from;\n    }\n    return tx;\n}\n\n/**\n * transfer from multiple senders to one receiver\n * this tx needs multiple senders' signature.\n * @param tokenType\n * @param from array of senders' address\n * @param to receiver's address\n * @param amounts\n */\nexport function makeTransferStateTx(\n    tokenType: string,\n    states: State[],\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const structs = [];\n    for (const state of states) {\n        verifyAmount(state.value);\n        const s = new Struct();\n        s.add(state.from, state.to, new BigNumber(state.value));\n        structs.push(s);\n    }\n\n    const list = [];\n    list.push(structs);\n    const params = buildNativeCodeScript(list);\n    const contract = getTokenContract(tokenType);\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n}\n\n/**\n * transfer from one sender to multiple receivers\n * @param tokenType\n * @param from\n * @param to\n * @param amounts\n */\nexport function makeTransferToMany(\n    tokenType: string,\n    from: Address,\n    to: Address[],\n    amounts: string | number [],\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n\n    if (to.length !== amounts.length) {\n        throw new Error('Params error.');\n    }\n\n    const structs = [];\n    for (let i = 0; i < to.length; i++) {\n        verifyAmount(amounts[i]);\n        const s = new Struct();\n        s.add(from, to[i], new BigNumber(amounts[i]));\n        structs.push(s);\n    }\n\n    const list = [];\n    list.push(structs);\n\n    const contract = getTokenContract(tokenType);\n    const params = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\n    tx.payer = from;\n    return tx;\n}\n\n/**\n * Withdraw ong from sender's address and send to receiver's address\n * @param from Sender's address\n * @param to Receiver's address\n * @param amount Amount of ONG to withdraw.The value needs to multiply 1e9 to keep precision\n * @param payer Address to pay for transaction's gas\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeWithdrawOngTx(from: Address, to: Address, amount: number | string, payer: Address,\n                                  gasPrice: string, gasLimit: string): Transfer {\n    verifyAmount(amount);\n    const num = new BigNumber(amount);\n\n    // const tf = new TransferFrom(from, new Address(ONT_CONTRACT), to, amount);\n    // const params = tf.serialize();\n    const list = [];\n    const struct = new Struct();\n    struct.add(from, new Address(ONT_CONTRACT), to, num);\n    list.push(struct);\n    const args = buildNativeCodeScript(list);\n    const tx: Transfer = makeNativeContractTx(\n        'transferFrom', args, new Address(ONG_CONTRACT) , gasPrice, gasLimit) as any;\n    tx.payer = payer;\n    tx.tokenType = 'ONG';\n    tx.from = from;\n    tx.to = to;\n    tx.amount = amount;\n    tx.method = 'transferFrom';\n    return tx;\n}\n\n/**\n * Creates transaction to query allowance that can be sent from sender to receiver\n * @param asset Asset type. Only ONT or ONg.\n * @param from Sender's address\n * @param to Receiver's address\n */\nexport function makeQueryAllowanceTx(asset: string, from: Address, to: Address): Transaction {\n    asset = asset.toLowerCase();\n    if (asset !== 'ont' && asset !== 'ong') {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    let contract = '';\n    if (asset === 'ong') {\n        contract = ONG_CONTRACT;\n    } else {\n        contract = ONT_CONTRACT;\n    }\n    const list = [];\n    const struct = new Struct();\n    struct.add(from, to);\n    list.push(struct);\n    const params = buildNativeCodeScript(list);\n    const tx = makeNativeContractTx('allowance', params, new Address(contract), '0', '0');\n    return tx;\n}\n\n/**\n * Creates transaction to query balance.\n * @param asset Token type,ont or ong\n * @param address Address to query balance\n */\nexport function makeQueryBalanceTx(asset: string,  address: Address): Transaction {\n    asset = asset.toLowerCase();\n    if (asset !== 'ont' && asset !== 'ong') {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    let contract = '';\n    if (asset === 'ong') {\n        contract = ONG_CONTRACT;\n    } else {\n        contract = ONT_CONTRACT;\n    }\n    const params = hex2VarBytes(address.serialize());\n    const tx = makeNativeContractTx('balanceOf', params, new Address(contract), '0', '0');\n    return tx;\n}\n\nexport function deserializeTransferTx(str: string): Transfer {\n    const tx: Transfer = Transaction.deserialize(str) as any;\n    const code = tx.payload.serialize();\n    const contractIndex1 = code.lastIndexOf('14' + '000000000000000000000000000000000000000');\n    const contractIndex2 = code.lastIndexOf('14' + '0000000000000000000000000000000000000002');\n    if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '1') {\n        tx.tokenType = 'ONT';\n    } else if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '2') {\n        tx.tokenType = 'ONG';\n    } else {\n        throw new Error('Not a transfer tx');\n    }\n    const contractIndex = Math.max(contractIndex1, contractIndex2);\n    const params = code.substring(0, contractIndex);\n    const paramsEnd = params.indexOf('6a7cc86c') + 8;\n    if (params.substr(paramsEnd, 4) === '51c1') { // transfer\n        const methodStr = params.substring(paramsEnd + 6);\n        tx.method = hexstr2str(methodStr);\n    } else {\n        const methodStr = params.substring(paramsEnd + 2);\n        tx.method = hexstr2str(methodStr);\n    }\n\n    if (tx.method === 'transfer') {\n        const sr = new StringReader(params);\n        // const codeLength = sr.readNextLen();\n        // const bytes = sr.read(4);\n        sr.pos += 10;\n        const from = new Address(sr.read(20));\n        tx.from = from;\n        // const bytes2 = sr.read(4);\n        sr.pos += 8;\n        const to = new Address(sr.read(20));\n        tx.to = to;\n        // const bytes3 = sr.read(3);\n        sr.pos += 6;\n        const numTmp = parseInt(sr.read(1), 16);\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\n            tx.amount = numTmp - 80;\n        } else {\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\n            tx.amount = new BigNumber(amount).toString();\n        }\n    } else if (tx.method === 'transferFrom') {\n        const sr = new StringReader(params);\n        // const codeLength = sr.readNextLen();\n        // const bytes = sr.read(4);\n        sr.pos += 10;\n        const from = new Address(sr.read(20));\n        tx.from = from;\n        // const bytes1 = sr.read(4);\n        // const contract = new Address(sr.read(20));\n        // const bytes2 = sr.read(4);\n        sr.pos += 56;\n        const to = new Address(sr.read(20));\n        tx.to = to;\n        // const bytes3 = sr.read(3);\n        sr.pos += 6;\n        const numTmp = parseInt(sr.read(1), 16);\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\n            tx.amount = numTmp - 80;\n        } else {\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\n            tx.amount = new BigNumber(amount).toString();\n        }\n    } else {\n        throw new Error('Not a transfer tx');\n    }\n\n    return tx;\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Address, PublicKey } from '../../crypto';\nimport { DDOAttribute } from '../../transaction/ddo';\nimport { Transaction } from '../../transaction/transaction';\nimport { makeNativeContractTx } from '../../transaction/transactionUtils';\nimport { num2hexstring, str2hexstr } from '../../utils';\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\nimport Struct from '../abi/struct';\n\n/**\n * Address of ONT ID contract\n */\nexport const ONTID_CONTRACT = '0000000000000000000000000000000000000003';\n\n/**\n * Method names in ONT ID contract\n */\nconst ONTID_METHOD  = {\n    regIDWithPublicKey: 'regIDWithPublicKey',\n    regIDWithAttributes: 'regIDWithAttributes',\n    addAttributes: 'addAttributes',\n    removeAttribute: 'removeAttribute',\n    getAttributes: 'getAttributes',\n    getDDO: 'getDDO',\n    addKey: 'addKey',\n    removeKey: 'removeKey',\n    getPublicKeys: 'getPublicKeys',\n    addRecovery: 'addRecovery',\n    changeRecovery: 'changeRecovery',\n    getKeyState: 'getKeyState'\n};\n\n/**\n * Registers Identity.\n *\n * GAS calculation: gasLimit * gasPrice is equal to the amount of gas consumed.\n *\n * @param ontid User's ONT ID\n * @param publicKey Public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRegisterOntidTx(\n    ontid: string,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.regIDWithPublicKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid, publicKey.serializeHex());\n    const list = [struct];\n    const params = buildNativeCodeScript(list);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Registers Identity with initial attributes.\n *\n * @param ontid User's ONT ID\n * @param attributes Array of DDOAttributes\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRegIdWithAttributes(\n    ontid: string,\n    attributes: DDOAttribute[],\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n) {\n    const method = ONTID_METHOD.regIDWithAttributes;\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    // let attrs = '';\n    // for (const a of attributes) {\n    //     attrs += a.serialize();\n    // }\n\n    // const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, ontid);\n    // const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, publicKey.serializeHex());\n    // const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, attrs);\n    // f.setParamsValue(p1, p2, p3);\n    const attrLen = attributes.length;\n    const struct = new Struct();\n    struct.add(ontid, publicKey.serializeHex(), attrLen);\n    for (const a of attributes) {\n        const key = str2hexstr(a.key);\n        const type = str2hexstr(a.type);\n        const value = str2hexstr(a.value);\n        struct.add(key, type, value);\n    }\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Adds attributes to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param attributes Array of DDOAttributes\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddAttributeTx(\n    ontid: string,\n    attributes: DDOAttribute[],\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addAttributes;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid, attributes.length);\n    for (const a of attributes) {\n        const key = str2hexstr(a.key);\n        const type = str2hexstr(a.type);\n        const value = str2hexstr(a.value);\n        struct.add(key, type, value);\n    }\n    struct.list.push(publicKey.serializeHex());\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Removes attribute from ONT ID.\n *\n * @param ontid User's ONT ID\n * @param key Key of attribute to remove\n * @param publicKey User's public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n *\n */\nexport function buildRemoveAttributeTx(\n    ontid: string,\n    key: string,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.removeAttribute;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid, str2hexstr(key), publicKey.serializeHex());\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Queries attributes attached to ONT ID.\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetAttributesTx(ontid: string) {\n    const method = ONTID_METHOD.getAttributes;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n\n/**\n * Queries Description Object of ONT ID(DDO).\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetDDOTx(ontid: string) {\n    const method = ONTID_METHOD.getDDO;\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n/**\n * Adds a new public key to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param newPk New public key to be added\n * @param userKey User's public key or address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddControlKeyTx(\n    ontid: string,\n    newPk: PublicKey,\n    userKey: PublicKey | Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = newPk.serializeHex();\n    let p3;\n    if (userKey instanceof PublicKey) {\n        p3 = userKey.serializeHex();\n    } else if (userKey instanceof Address) {\n        p3 = userKey.serialize();\n    }\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n\n    return tx;\n}\n\n/**\n * Revokes a public key from ONT ID.\n *\n * @param ontid User's ONT ID\n * @param pk2Remove Public key to be removed\n * @param sender User's public key or address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildRemoveControlKeyTx(\n    ontid: string,\n    pk2Remove: PublicKey,\n    sender: PublicKey | Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.removeKey;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = pk2Remove.serializeHex();\n    let p3;\n    if (sender instanceof PublicKey) {\n        p3 = sender.serializeHex();\n    } else if (sender instanceof Address) {\n        p3 = sender.serialize();\n    }\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(\n        method,\n        params,\n        new Address(ONTID_CONTRACT),\n        gasPrice,\n        gasLimit,\n        payer\n    );\n    return tx;\n}\n\n/**\n * Queries public keys attached to ONT ID.\n *\n * @param ontid User's ONT ID\n */\nexport function buildGetPublicKeysTx(ontid: string) {\n    const method = ONTID_METHOD.getPublicKeys;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(ontid);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n\n/**\n * Adds recovery address to ONT ID.\n *\n * @param ontid User's ONT ID\n * @param recovery Recovery address, must have not be set\n * @param publicKey User's public key, must be user's existing public key\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildAddRecoveryTx(\n    ontid: string,\n    recovery: Address,\n    publicKey: PublicKey,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.addRecovery;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = recovery;\n    const p3 = publicKey.serializeHex();\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT), gasPrice, gasLimit, payer);\n    return tx;\n}\n\n/**\n * Changes recovery address of ONT ID.\n *\n * This contract call must be initiated by the original recovery address.\n *\n * @param ontid user's ONT ID\n * @param newrecovery New recovery address\n * @param oldrecovery Original recoevery address\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer\n */\nexport function buildChangeRecoveryTx(\n    ontid: string,\n    newrecovery: Address,\n    oldrecovery: Address,\n    gasPrice: string,\n    gasLimit: string,\n    payer?: Address\n): Transaction {\n    const method = ONTID_METHOD.changeRecovery;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    const p1 = ontid;\n    const p2 = newrecovery;\n    const p3 = oldrecovery;\n    const struct = new Struct();\n    struct.add(p1, p2, p3);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT),\n    gasPrice, gasLimit);\n    tx.payer = payer || oldrecovery;\n    return tx;\n}\n\n/**\n * Queries the state of the public key associated with ONT ID.\n *\n * @param ontid user's ONT ID\n * @param pkId User's public key Id\n */\nexport function buildGetPublicKeyStateTx(ontid: string, pkId: number) {\n    const method = ONTID_METHOD.getKeyState;\n\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n\n    // tslint:disable-next-line:no-console\n    console.log('did: ' + ontid);\n\n    const index = num2hexstring(pkId, 4, true);\n\n    // tslint:disable-next-line:no-console\n    console.log('index: ' + index);\n\n    const struct = new Struct();\n    struct.add(ontid, pkId);\n    const params = buildNativeCodeScript([struct]);\n\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\n    return tx;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport Fixed64 from '../common/fixed64';\nimport { REST_API, TX_MAX_SIG_SIZE } from '../consts';\nimport { Address, PrivateKey, SignatureScheme } from '../crypto';\nimport { PublicKey } from '../crypto/PublicKey';\nimport { ERROR_CODE } from '../error';\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { Parameter } from '../smartcontract/abi/parameter';\n\nimport {\n    num2hexstring,\n    reverseHex,\n    str2hexstr\n} from '../utils';\nimport { ParameterType } from './../smartcontract/abi/parameter';\nimport opcode from './opcode';\nimport DeployCode from './payload/deployCode';\nimport InvokeCode from './payload/invokeCode';\nimport { comparePublicKeys } from './program';\nimport { createCodeParamsScript, serializeAbiFunction } from './scriptBuilder';\nimport { Transaction, TxType } from './transaction';\n\nimport { makeTransferTx } from '../smartcontract/nativevm/ontAssetTxBuilder';\nimport { buildGetDDOTx, buildRegisterOntidTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { TxSignature } from './txSignature';\n\n// tslint:disable-next-line:variable-name\nexport const Default_params = {\n    Action: 'sendrawtransaction',\n    Version: '1.0.0',\n    Type: '',\n    Op: 'test'\n};\n\n/**\n * Signs the transaction object.\n *\n * If there is already a signature, the new one will replace existing.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const signTransaction = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = TxSignature.create(tx, privateKey, schema);\n\n    tx.sigs = [signature];\n};\n\n/**\n * Signs the transaction object asynchroniously.\n *\n * If there is already a signature, the new one will replace existing.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const signTransactionAsync = async (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = await TxSignature.createAsync(tx, privateKey, schema);\n\n    tx.sigs = [signature];\n};\n\n/**\n * Signs the transaction object.\n *\n * If there is already a signature, the new one will be added to the end.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param privateKey Private key to sign with\n * @param schema Signature Schema to use\n */\nexport const addSign = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\n    const signature = TxSignature.create(tx, privateKey, schema);\n\n    tx.sigs.push(signature);\n};\n\nconst equalPks = (pks1: PublicKey[], pks2: PublicKey[]): boolean => {\n    if (pks1 === pks2) {\n        return true;\n    }\n    pks1.sort(comparePublicKeys);\n    pks2.sort(comparePublicKeys);\n    if (pks1.length !== pks2.length) {\n        return false;\n    }\n    for (let i = 0; i < pks1.length ; i++) {\n        if (pks1[i].key !== pks2[i].key) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Signs the transaction with multiple signatures with multi-sign keys.\n *\n * If there is already a signature, the new ones will be added to the end.\n * If the signature schema is not provided, default schema for Private key type is used.\n *\n * @param tx Transaction to sign\n * @param M m of the (m ,n) multi sign address threshold\n * @param pubKeys Array of Public keys of (m,n) multi sign address, the number is n\n * @param privateKey Private key to sign the tx.\n * @param scheme Signature scheme to use\n */\nexport const signTx = (tx: Transaction, M: number, pubKeys: PublicKey[],\n                       privateKey: PrivateKey, scheme?: SignatureScheme) => {\n\n    if (tx.sigs.length === 0) {\n        tx.sigs = [];\n    } else {\n        if (tx.sigs.length > TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || pubKeys.length === 0) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < tx.sigs.length; i++) {\n            if (equalPks(tx.sigs[i].pubKeys, pubKeys)) {\n                if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {\n                    throw new Error('Too many sigData');\n                }\n                const signData = privateKey.sign(tx, scheme).serializeHex();\n                tx.sigs[i].sigData.push(signData);\n                return;\n            }\n        }\n    }\n    const sig = new TxSignature();\n    sig.M = M;\n    sig.pubKeys = pubKeys;\n    sig.sigData = [privateKey.sign(tx, scheme).serializeHex()];\n    tx.sigs.push(sig);\n};\n\n/**\n * Creates transaction to inovke smart contract\n * @param funcName Function name of smart contract\n * @param params Array of Parameters or serialized parameters\n * @param contractAddr Address of contract\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for gas\n */\nexport const makeInvokeTransaction = (\n    funcName: string,\n    params: Parameter[] | string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address,\n    ledgerCompatible: boolean = true\n) => {\n    const tx = new Transaction();\n    tx.type = TxType.Invoke;\n\n    let args = '';\n    if (typeof params === 'string') {\n        args = params;\n    } else {\n        const abiFunc = new AbiFunction(funcName, '', params);\n        args = serializeAbiFunction(abiFunc, ledgerCompatible);\n    }\n\n    let code = args + num2hexstring(opcode.APPCALL);\n    code += contractAddr.serialize();\n\n    const payload = new InvokeCode();\n    payload.code = code;\n    tx.payload = payload;\n\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n};\n\n/**\n * Creates transaction to deploy smart contract\n * @param code Avm code of contract to deploy\n * @param name Name of contract\n * @param codeVersion version of contract\n * @param author Author of contract\n * @param email Email of author\n * @param desp Description of contract\n * @param needStorage Decides if the contract needs storage\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Address to pay for gas\n */\nexport function makeDeployCodeTransaction(\n    code: string,\n    name: string= '',\n    codeVersion: string= '1.0',\n    author: string= '',\n    email: string= '',\n    desp: string= '', needStorage: boolean= true, gasPrice: string, gasLimit: string, payer?: Address) {\n    const dc = new DeployCode();\n    dc.author = author;\n    // const vmCode = new VmCode();\n    // vmCode.code = code;\n    // vmCode.vmType = vmType;\n    // dc.code = vmCode;\n    dc.code = code;\n    dc.version = codeVersion;\n    dc.description = desp;\n    dc.email = email;\n    dc.name = name;\n    dc.needStorage = needStorage;\n\n    const tx = new Transaction();\n    tx.version = 0x00;\n\n    tx.payload = dc;\n\n    tx.type = TxType.Deploy;\n    // gas\n    // if (DEFAULT_GAS_LIMIT === Number(0)) {\n    //     tx.gasPrice = new Fixed64();\n    // } else {\n    //     const price = new BigNumber(gas).multipliedBy(1e9).dividedBy(new BigNumber(DEFAULT_GAS_LIMIT)).toString();\n    //     tx.gasPrice = new Fixed64(price);\n    // }\n    tx.gasLimit = new Fixed64(gasLimit);\n    tx.gasPrice = new Fixed64(gasPrice);\n    if (payer) {\n        tx.payer = payer;\n    }\n\n    return tx;\n\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with websocket\n * @param tx Transactio to send\n * @param isPreExec Decides if it is pre-execute transaction\n */\nexport function buildTxParam(tx: Transaction, isPreExec: boolean = false) {\n    const op = isPreExec ? { PreExec: '1'} : {};\n    const serialized = tx.serialize();\n\n    return JSON.stringify(Object.assign({}, Default_params, { Data: serialized }, op));\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with rpc\n * @param tx Transaction\n * @param method Method name\n */\nexport function buildRpcParam(tx: Transaction, method?: string) {\n    const param = tx.serialize();\n    const result = {\n        jsonrpc: '2.0',\n        method: method || 'sendrawtransaction',\n        params: [param],\n        id: 10\n    };\n    return result;\n}\n\n/**\n * @deprecated\n * Creates params from transaction to send with restful\n * @param tx Transaction\n */\nexport function buildRestfulParam(tx: Transaction) {\n    const param = tx.serialize();\n    return {\n        Action : 'sendrawtransaction',\n        Version : '1.0.0',\n        Data : param\n    };\n}\n\n/**\n * @deprecated\n * @param url Url of blochchain node\n * @param preExec Decides if is a pre-execute request\n */\nexport function sendRawTxRestfulUrl(url: string, preExec: boolean = false) {\n    if (url.charAt(url.length - 1) === '/') {\n        url = url.substring(0, url.length - 1);\n    }\n\n    let restUrl = url + REST_API.sendRawTx;\n    if (preExec) {\n        restUrl += '?preExec=1';\n    }\n\n    return restUrl;\n}\n\nexport function transferStringParameter(value: string): Parameter {\n    const strs = value.split(':');\n    if (strs.length < 2) {\n        throw new Error('Invalid parameter. ' + value);\n    }\n    const pType = value.substring(0, value.indexOf(':'));\n    const pVal = value.substring(value.indexOf(':') + 1);\n    const p = new Parameter('', pType as ParameterType, pVal);\n    if (p.type === ParameterType.Address) {\n        p.type = ParameterType.ByteArray;\n        p.value = new Address(p.value).serialize();\n    }\n    return p;\n}\n\nexport function transformMapParameter(value: any) {\n    const map: any = {};\n    for (const k of Object.keys(value)) {\n        const v = value[k];\n        if (typeof v === 'number') {\n            map[k] = new Parameter('', ParameterType.Integer, v);\n        } else if (typeof v === 'boolean') {\n            map[k] = new Parameter('', ParameterType.Boolean, v);\n        } else if (Array.isArray(v)) {\n            map[k] = new Parameter('', ParameterType.Array, transformArrayParameter(v));\n        } else if (typeof v === 'object') {\n            map[k] = new Parameter('', ParameterType.Map, transformMapParameter(v));\n        } else if (typeof v === 'string') {\n            map[k] = transferStringParameter(v);\n        }\n    }\n    return map;\n}\n\nexport function transformArrayParameter(val: any) {\n    const list = [];\n    for (const v of val) {\n        let p = new Parameter('', ParameterType.ByteArray, v);\n        if (typeof v === 'number') {\n            p.type = ParameterType.Integer;\n        } else if (typeof v === 'boolean') {\n            p.type = ParameterType.Boolean;\n        } else if (Array.isArray(v)) {\n            p.type = ParameterType.Array;\n            p.value = transformArrayParameter(v);\n        } else if (typeof v === 'object') {\n            p.type = ParameterType.Map;\n            p.value = transformMapParameter(v);\n        } else if (typeof v === 'string') {\n            p = transferStringParameter(v);\n        }\n        list.push(p);\n    }\n    return list;\n}\n\nexport function transformParameter(arg: any) {\n    const name = arg.name;\n    const value = arg.value;\n    let p = new Parameter(name, ParameterType.ByteArray, value);\n    if (typeof value === 'number') {\n        p.type = ParameterType.Integer;\n        p.value = Number(value);\n    } else if (typeof value === 'boolean') {\n        p.type = ParameterType.Boolean;\n        p.value = Boolean(value);\n    } else if (Array.isArray(value)) {\n        p.type = ParameterType.Array;\n        p.value = transformArrayParameter(value);\n    } else if (typeof value === 'object') {\n        p.type = ParameterType.Map;\n        p.value = transformMapParameter(value);\n    } else if (typeof value === 'string') {\n        p = transferStringParameter(value);\n    }\n    return p;\n}\n\nexport function buildParamsByJson(json: any) {\n    const paramsList = [];\n    const functions = json.functions;\n    for (const obj of functions) {\n        const { operation, args } = obj;\n        const list = [];\n        list.push(str2hexstr(operation));\n        const temp = [];\n        for (const arg of args) {\n            temp.push(transformParameter(arg));\n        }\n        list.push(temp);\n        paramsList.push(list);\n    }\n    return paramsList;\n}\n\nexport function makeTransactionsByJson(json: any, ledgerCompatible: boolean = true) {\n    if (!json) {\n        throw new Error('Invalid parameter. Expect JSON object');\n    }\n    if (!json.action ||\n        (json.action !== 'invoke' &&\n        json.action !== 'invokeRead' &&\n        json.action !== 'invokePasswordFree')) {\n        throw new Error('Invalid parameter. The action type must be \"invoke or invokeRead\"');\n    }\n    if (!json.params || !json.params.invokeConfig) {\n        throw new Error('Invalid parameter. The params can not be empty.');\n    }\n    const invokeConfig = json.params.invokeConfig;\n    // tslint:disable-next-line:prefer-const\n    let { payer, gasPrice, gasLimit, contractHash } = invokeConfig;\n    if (!contractHash) {\n        throw new Error('Invalid parameter. The contractHash can not be empty.');\n    }\n    const contractAddr = new Address(reverseHex(contractHash));\n    payer = payer ? new Address(payer) : null;\n    gasPrice = gasPrice + '' || '500';\n    gasLimit = gasLimit + '' || '200000';\n    const txList = [];\n    if (contractHash.indexOf('00000000000000000000000000000000000000') > -1) { // native contract\n        const tx = buildNativeTxFromJson(invokeConfig);\n        txList.push(tx);\n    } else {\n        const parameters = buildParamsByJson(invokeConfig);\n        for (const list of parameters) {\n            const params = createCodeParamsScript(list, ledgerCompatible);\n            const tx = makeInvokeTransaction('', params, contractAddr, gasPrice, gasLimit, payer, ledgerCompatible);\n            txList.push(tx);\n        }\n    }\n\n    return txList;\n}\n\nexport function buildNativeTxFromJson(json: any) {\n    const funcArgs = json.functions[0];\n    const args = funcArgs.args;\n    if (json.contractHash.indexOf('02') > -1 || json.contractHash.indexOf('01') > -1) { // ONT ONG contract\n        const tokenType = json.contractHash.indexOf('02') > -1 ? 'ONG' : 'ONT';\n        if (funcArgs.operation === 'transfer') {\n            const from = new Address(args[0].value.split(':')[1]);\n            const to = new Address(args[1].value.split(':')[1]);\n            const amount = args[2].value.split(':')[1] + ''; // convert to string\n            const payer = new Address(json.payer);\n            const tx = makeTransferTx(tokenType, from, to, amount, json.gasPrice, json.gasLimit, payer);\n            return tx;\n        }\n    } else if (json.contractHash.indexOf('03') > -1) { // ONT ID contract\n        if (funcArgs.operation === 'regIDWithPublicKey') {\n            const ontid = args[0].value.substr(args[0].value.indexOf(':') + 1);\n            const pk = new PublicKey(args[1].value.split(':')[1]);\n            const payer = new Address(json.payer);\n            const tx = buildRegisterOntidTx(ontid, pk, json.gasPrice, json.gasLimit, payer);\n            return tx;\n        } else if (funcArgs.operation === 'getDDO') {\n            const ontid = args[0].value.substr(args[0].value.indexOf(':') + 1);\n            const tx = buildGetDDOTx(ontid);\n            return tx;\n        }\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as bip39 from 'bip39';\nimport { ONT_BIP44_PATH } from './consts';\nimport { Address, PrivateKey } from './crypto';\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\nimport { ERROR_CODE } from './error';\nimport { ScryptParams } from './scrypt';\nimport { Transaction } from './transaction/transaction';\nimport { signTransaction } from './transaction/transactionBuilder';\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\nexport class Account {\n    /**\n     * Import account\n     * @param label Account's label\n     * @param encryptedPrivateKey Encrypted private key\n     * @param password User's password to decrypt private key\n     * @param address Account's address\n     * @param saltBase64 Salt to decrypt\n     * @param params Params used to decrypt\n     */\n    static importAccount(\n        label: string ,\n        encryptedPrivateKey: PrivateKey,\n        password: string,\n        address: Address,\n        saltBase64: string,\n        params?: ScryptParams\n    ): Account {\n        const account = new Account();\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\n\n        if (!label) {\n            label = ab2hexstring(generateRandomArray(4));\n        }\n        account.label = label;\n        account.lock = false;\n        account.isDefault = false;\n        account.salt = saltBase64;\n\n        account.encryptedKey = encryptedPrivateKey;\n\n        const publicKey = privateKey.getPublicKey();\n        account.publicKey = publicKey.key;\n\n        account.address = Address.fromPubKey(publicKey);\n\n        return account;\n    }\n\n    /**\n     * Import account with mnemonic\n     * @param label Account's label\n     * @param mnemonic User's mnemonic\n     * @param password user's password to encrypt the private key\n     * @param params Params used to encrypt the private key.\n     */\n    static importWithMnemonic(\n        label: string,\n        mnemonic: string,\n        password: string,\n        params?: ScryptParams\n    ): Account {\n        mnemonic = mnemonic.trim();\n        if (!bip39.validateMnemonic(mnemonic)) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(ONT_BIP44_PATH);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        const account = Account.create(privateKey, password, label, params);\n        return account;\n    }\n\n    /**\n     * Creates Account object encrypting specified private key.\n     *\n     * The account does not need to be registered on blockchain.\n     *\n     * @param privateKey Private key associated with the account\n     * @param password Password use to encrypt the private key\n     * @param label Custom label\n     * @param params Optional scrypt params\n     */\n    static create(\n        privateKey: PrivateKey,\n        password: string,\n        label?: string,\n        params?: ScryptParams\n    ): Account {\n        const account = new Account();\n        if (!label) {\n            label = ab2hexstring(generateRandomArray(4));\n        }\n        account.label = label;\n        account.lock = false;\n        account.isDefault = false;\n\n        const salt = randomBytes(16);\n        const publicKey = privateKey.getPublicKey();\n        const address = Address.fromPubKey(publicKey);\n        account.publicKey = publicKey.serializeHex();\n        account.address = address;\n        account.encryptedKey = privateKey.encrypt(password, address, salt, params);\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\n        return account;\n    }\n\n    static parseJson(json: string): Account {\n        return Account.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Account {\n        const account = new Account();\n        account.address = new Address(obj.address);\n        account.label = obj.label;\n        account.lock = obj.lock;\n        account.isDefault = obj.isDefault;\n        account.publicKey = obj.publicKey;\n        account.hash = obj.hash;\n        account.salt = obj.salt;\n        account.encryptedKey = deserializeFromJson({\n            algorithm: obj.algorithm,\n            parameters: obj.parameters,\n            key: obj.key,\n            external: obj.external\n        });\n        // account.contract = obj.contract\n        account.extra = obj.extra;\n        return account;\n    }\n\n    address: Address;\n    label: string;\n    lock: boolean;\n    encryptedKey: PrivateKey;\n    extra: null;\n\n    // to compatible with cli wallet\n    'enc-alg': string = 'aes-256-gcm';\n    hash: string = 'sha256';\n    salt: string;\n\n    publicKey: string;\n    isDefault: boolean;\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            'address': this.address.toBase58(),\n            'label': this.label,\n            'lock': this.lock,\n            ...this.encryptedKey.serializeJson(),\n            'enc-alg': this['enc-alg'],\n            'hash': this.hash,\n            'salt': this.salt,\n            'isDefault': this.isDefault,\n            'publicKey': this.publicKey,\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\n        };\n        return obj;\n    }\n\n    exportPrivateKey(password: string, params?: ScryptParams) {\n        return this.encryptedKey.decrypt(password, this.address, this.salt, params);\n    }\n\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\n        const pri = this.exportPrivateKey(password, params);\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Restful api\n */\nexport default {\n    Url_send_transaction : '/api/v1/transaction',\n    Url_get_transaction : '/api/v1/transaction/',\n    Url_get_generate_block_time : '/api/v1/node/generateblocktime',\n    Url_get_node_count : '/api/v1/node/connectioncount',\n    Url_get_block_height : '/api/v1/block/height',\n    Url_get_block_by_height : '/api/v1/block/details/height/',\n    Url_get_block_by_hash : '/api/v1/block/details/hash/',\n    Url_get_account_balance : '/api/v1/balance/',\n    Url_get_contract_state : '/api/v1/contract/',\n    Url_get_smartcodeevent_txs_by_height : '/api/v1/smartcode/event/transactions/',\n    Url_get_smartcodeevent_by_txhash : '/api/v1/smartcode/event/txhash/',\n    Url_get_block_height_by_txhash : '/api/v1/block/height/txhash/',\n    Url_get_storage : '/api/v1/storage/',\n    Url_get_merkleproof : '/api/v1/merkleproof/',\n    Url_get_allowance: '/api/v1/allowance/',\n    Url_get_block_txs_by_height: '/api/v1/block/transactions/height/',\n    Url_get_unbound_ong: '/api/v1/unboundong/',\n    Url_get_grant_ong: '/api/v1/grantong/',\n    Url_get_mempool_txcount: '/api/v1/mempool/txcount',\n    Url_get_mempool_txstate: '/api/v1/mempool/txstate/',\n    Url_get_version: '/api/v1/version',\n    Url_get_networkid: '/api/v1/networkid',\n    Url_get_gasprice: '/api/v1/gasprice'\n};\n","import { ERROR_CODE } from './../../error';\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport UrlConsts from './urlConsts';\n\n/**\n * Wrapper class for restful api.\n */\nexport default class RestClient {\n    /**\n     * Url of the blockchain node\n     */\n    url: string;\n\n    /**\n     * Version of restful api\n     */\n    version: string = 'v1.0.0';\n\n    /**\n     * Action name of the request\n     */\n    action: string = 'sendrawtransaction';\n\n    constructor(url ?: string) {\n        this.url = url || TEST_ONT_URL.REST_URL;\n        if (this.url[this.url.length - 1] === '/') {\n            this.url = this.url.substring(0, this.url.length - 1);\n        }\n    }\n\n    /**\n     * Concat params as the query part\n     * @param params\n     */\n    concatParams(params: Map<string, string>) {\n        let result = '';\n        if (params.size === 0) {\n            return '';\n        }\n\n        for (const key of params.keys()) {\n            let value = params.get(key);\n            if (value) {\n                value = encodeURIComponent(value);\n            }\n            result += `&${key}=${value}`;\n        }\n\n        return '?' + result.substr(1);\n    }\n\n    /**\n     * Get the current blockchain node url\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * To send raw transaction to blockchian\n     * @param hexData Hex encoded data\n     * @param preExec Decides if it is a pre-execute transaction\n     * @param userId User's id\n     */\n    sendRawTransaction(hexData: string, preExec: boolean = false, userId ?: string): Promise<any> {\n        const param = new Map<string, string>();\n\n        if (userId) {\n            param.set('userid', userId);\n        }\n\n        if (preExec) {\n            param.set('preExec', '1');\n        }\n\n        let url = this.url + UrlConsts.Url_send_transaction;\n        url += this.concatParams(param);\n\n        const body = {\n            Action  : this.action,\n            Version : this.version,\n            Data    : hexData\n        };\n\n        return axios.post(url, body).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded transaction.\n     * @param txHash Transactin hash.Always use the reversed value of transaction hash to query.\n     *\n     * @example\n     *\n     * ```typescript\n     * import { utils, Transaction } from 'ontology-ts-sdk';\n     * const txHash = tx.getHash(); // tx is an instance of Transaction\n     * restClient.getRawTransaction(utils.reverseHex(txHash)).then(res => {\n     *   const tx = Transaction.deserialize(res.Result)\n     * })\n     *\n     * ````\n     */\n    getRawTransaction(txHash: string): Promise<any> {\n        const param = new Map<string, string>();\n\n        param.set('raw', '1');\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\n        url += this.concatParams(param);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get transaction by transaction hash.\n     * The result is transaction in json.\n     * @param txHash Reversed transaction hash\n     */\n    getRawTransactionJson(txHash: string): Promise<any> {\n        const param = new Map<string, string>();\n        param.set('raw', '0');\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\n        url += this.concatParams(param);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null.\n     */\n    // getGenerateBlockTime(): Promise<any> {\n    //     const url = this.url + UrlConsts.Url_get_generate_block_time;\n    //     return axios.get(url).then((res) => {\n    //         return res.data;\n    //     });\n    // }\n\n    /**\n     * Get the nodes count of the blockchain.\n     */\n    getNodeCount(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_node_count;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the current height of the blockchain.\n     */\n    getBlockHeight(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_height;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block by block's height or hash\n     * @param value Block height or block hash\n     */\n    getBlock(value: number | string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '1');\n\n        let url = '';\n        if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\n        } else if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\n        }\n        url += this.concatParams(params);\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by code hash.The result is hex encoded string.\n     * @param codeHash Code hash of contract.The value is reversed contract address.\n     */\n    getContract(codeHash: string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '1');\n\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n        url += this.concatParams(params);\n\n            // console.log('url: '+url);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by code hash. The result is json.\n     * @param codeHash Code hash of contract.\n     */\n    getContractJson(codeHash: string): Promise<any> {\n        const params = new Map<string, string>();\n        params.set('raw', '0');\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n        url += this.concatParams(params);\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get smart contract event by Block height or reversed transaction hash.\n     * If the parameter is block height, the result includes all the transaction event of that block;\n     * If the parameter is transaction hash, the result is the event of that transaction.\n     * @param value Block height or reversed transaction hash\n     */\n    getSmartCodeEvent(value: string | number): Promise<any> {\n        let url = '';\n        if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\n        } else if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\n        }\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the block height by reversed transaction hash.\n     * @param hash Reversed transaction hash.\n     */\n    getBlockHeightByTxHash(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the stored value in smart contract by the code hash and key.\n     * @param codeHash Code hash of the smart contract\n     * @param key Key of the stored value\n     */\n    getStorage(codeHash: string, key: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the merkle proof by transaction hash\n     * @param hash Reversed transaction hash\n     */\n    getMerkleProof(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_merkleproof + hash;\n\n            // tslint:disable-next-line:no-console\n        console.log('url: ' + url);\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get balance of some address\n     * The result contains balance of ONT and ONG\n     * @param address Address\n     */\n    getBalance(address: Address): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * @param value Block's height or hash\n     */\n    getBlockJson(value: number | string): Promise<any> {\n        let url = '';\n        if (typeof value === 'number') {\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\n        } else if (typeof value === 'string') {\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\n        }\n\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get allowance by address\n     * @param asset Asset type. Only ONT or ONG.\n     * @param from Address of allowance sender.\n     * @param to Address of allowance receiver.\n     */\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n        asset = asset.toLowerCase();\n        if (asset !== 'ont' && asset !== 'ong') {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const url = this.url + UrlConsts.Url_get_allowance +\n                    asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getUnboundOng(address: Address): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_unbound_ong + address.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getBlockTxsByHeight(height: number): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getGasPrice(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_gasprice ;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getGrangOng(address: Address): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_grant_ong + address.toBase58();\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getMempoolTxCount(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_mempool_txcount;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getMempoolTxState(hash: string): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n\n    getVersion(): Promise<any> {\n        const url = this.url + UrlConsts.Url_get_version;\n        return axios.get(url).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// tslint:disable:variable-name\nexport class Deferred<T> {\n    private _promise: Promise<T>;\n    private _resolve: (value?: T | PromiseLike<T>) => void;\n    private _reject: (reason?: any) => void;\n\n    constructor() {\n        this._promise = new Promise<T>((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n\n    get promise(): Promise<T> {\n        return this._promise;\n    }\n\n    public resolve = (value?: T | PromiseLike<T>): void => {\n        this._resolve(value);\n    }\n\n    public reject = (reason?: any): void => {\n        this._reject(reason);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Address } from '../../crypto/address';\n\n// const generateReqId = () => {\n//     return Math.floor(Math.random() * 10e8);\n// };\n\nexport function sendHeartBeat() {\n    const param = {\n        Action : 'heartbeat',\n        Version : 'V1.0.0'\n    };\n    return param;\n}\n\nexport function sendSubscribe(\n    subscribeEvent: boolean = false,\n    subscribeJsonBlock: boolean = false,\n    subscribeRawBlock: boolean = false,\n    subscribeBlockTxHashes: boolean = false\n) {\n    const param = {\n        Action: 'subscribe',\n        Version: '1.0.0',\n        SubscribeEvent: subscribeEvent, // optional\n        SubscribeJsonBlock: subscribeJsonBlock, // optional\n        SubscribeRawBlock: subscribeRawBlock, // optional\n        SubscribeBlockTxHashs: subscribeBlockTxHashes // optional\n    };\n    return param;\n}\n\nexport function sendRawTransaction(hexData: string, preExec: boolean = false) {\n    let param = {\n        Action: 'sendrawtransaction',\n        Version: '1.0.0',\n        Data: hexData\n    };\n    if (preExec) {\n        param = Object.assign(param, { PreExec : '1' });\n    }\n    return param;\n}\n\nexport function getRawTransaction(txHash: string) {\n    const param = {\n        Action: 'gettransaction',\n        Version: '1.0.0',\n        Hash: txHash,\n        Raw : '1'\n    };\n    return param;\n}\n\nexport function getRawTransactionJson(txHash: string) {\n    const param = {\n        Action: 'gettransaction',\n        Version: '1.0.0',\n        Hash: txHash,\n        Raw: '0'\n    };\n    return param;\n}\n\n// export function getGenerateBlockTime() {\n//     const param = {\n//         Action: 'getgenerateblocktime',\n//         Version: '1.0.0'\n//     };\n//     return param;\n// }\n\nexport function getNodeCount() {\n    const param = {\n        Action: 'getconnectioncount',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getBlockHeight() {\n    const param = {\n        Action: 'getblockheight',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getBlock(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getblockbyheight',\n            Version: '1.0.0',\n            Height: value,\n            Raw: '1'\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getblockbyhash',\n            Version: '1.0.0',\n            Hash: value,\n            Raw: '1'\n        };\n    }\n    return param;\n}\n\nexport function getBlockJson(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getblockbyheight',\n            Version: '1.0.0',\n            Height: value\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getblockbyhash',\n            Version: '1.0.0',\n            Hash: value\n        };\n    }\n    return param;\n}\n\nexport function getBalance(address: Address) {\n    const param = {\n        Action: 'getbalance',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getUnboundOng(address: Address) {\n    const param = {\n        Action: 'getunboundong',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getContract(hash: string) {\n    const param = {\n        Action: 'getcontract',\n        Version: '1.0.0',\n        Hash: hash,\n        Raw: '1'\n    };\n    return param;\n}\n\nexport function getContractJson(hash: string) {\n    const param = {\n        Action: 'getcontract',\n        Version: '1.0.0',\n        Hash: hash,\n        Raw: '0'\n    };\n    return param;\n}\n\nexport function getSmartCodeEvent(value: number | string) {\n    let param = {};\n    if (typeof value === 'number') {\n        param = {\n            Action: 'getsmartcodeeventbyheight',\n            Version: '1.0.0',\n            Height: value\n        };\n    } else if (typeof value === 'string') {\n        param = {\n            Action: 'getsmartcodeeventbyhash',\n            Version: '1.0.0',\n            Hash: value\n        };\n    }\n    return param;\n}\n\nexport function getBlockHeightByTxHash(hash: string) {\n    const param = {\n        Action: 'getblockheightbytxhash',\n        Version: '1.0.0',\n        Hash: hash\n    };\n    return param;\n}\n\nexport function getStorage(codeHash: string, key: string) {\n    const param = {\n        Action: 'getstorage',\n        Version: '1.0.0',\n        Hash: codeHash,\n        Key : key\n    };\n    return param;\n}\n\nexport function getMerkleProof(hash: string) {\n    const param = {\n        Action: 'getmerkleproof',\n        Version: '1.0.0',\n        Hash: hash\n    };\n    return param;\n}\n\nexport function getAllowance(asset: string, from: Address, to: Address) {\n    const param = {\n        Action: 'getallowance',\n        Version: '1.0.0',\n        Asset: asset,\n        From: from.toBase58(),\n        To: to.toBase58()\n    };\n    return param;\n}\n\nexport function getBlockHash(value: number) {\n    const param = {\n        Action: 'getblockhash',\n        Version: '1.0.0',\n        Height: value\n    };\n    return param;\n}\n\nexport function getBlockTxsByHeight(value: number) {\n    const param = {\n        Action: 'getblocktxsbyheight',\n        Version: '1.0.0',\n        Height: value\n    };\n    return param;\n}\n\nexport function getGasPrice() {\n    const param = {\n        Action: 'getgasprice',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getGrantOng(address: Address) {\n    const param = {\n        Action: 'getgrantong',\n        Version: '1.0.0',\n        Addr: address.toBase58()\n    };\n    return param;\n}\n\nexport function getMempoolTxCount() {\n    const param = {\n        Action: 'getmempooltxcount',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getMempoolTxState(txHash: string) {\n    const param = {\n        Action: 'getmempooltxstate',\n        Version: '1.0.0',\n        Hash: txHash\n    };\n    return param;\n}\n\nexport function getVersion() {\n    const param = {\n        Action: 'getversion',\n        Version: '1.0.0'\n    };\n    return param;\n}\n\nexport function getNetworkId() {\n    const param = {\n        Action: 'getnetworkid',\n        Version: '1.0.0'\n    };\n    return param;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Html5WebSocket from '@ont-community/html5-websocket';\nimport * as WebSocketAsPromised from 'websocket-as-promised';\nimport { TEST_ONT_URL } from '../../consts';\n\n/**\n * We can import html5-websocket directly, because webpack will use html5-websocket/browser.js\n * in browser environment, which does not require 'ws'.\n */\n\n /**\n  * Websocket sender for send messages and handle notify.\n  */\nexport class WebsocketSender {\n    private static generateReqId() {\n        return Math.floor(Math.random() * 10e8);\n    }\n\n    debug: boolean;\n\n    private wsp: any;    // WebSocketAsPromised\n\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false) {\n        this.debug = debug;\n        this.wsp = new WebSocketAsPromised(url, {\n            createWebSocket: (socketUrl: string) => new Html5WebSocket(socketUrl),\n            attachRequestId: (data: any, id: number) => ({ Id: id, ...data }),\n            extractRequestId: (data: any) => data && data.Id,\n            packMessage: (data: any) => JSON.stringify(data),\n            unpackMessage: (message: string) => JSON.parse(message)\n        });\n\n        this.wsp.onOpen.addListener(() => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('connected');\n            }\n        });\n\n        this.wsp.onClose.addListener(() => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('disconnected');\n            }\n        });\n\n        this.wsp.onSend.addListener((message: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('sent: ', message);\n            }\n        });\n\n        this.wsp.onMessage.addListener((message: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('received: ', message);\n            }\n        });\n\n        this.wsp.onError.addListener((event: any) => {\n            if (this.debug) {\n                // tslint:disable-next-line:no-console\n                console.log('error: ', event);\n            }\n        });\n    }\n\n    async send<T extends object>(param: T, close: boolean = true) {\n        try {\n            if (!param) {\n                return;\n            }\n\n            await this.wsp.open();\n            const response = await this.wsp.sendRequest(param, { requestId: WebsocketSender.generateReqId() });\n\n            return response;\n        } finally {\n            if (close) {\n                await this.wsp.close();\n            }\n        }\n    }\n\n    addListener(listener: (result: any) => void) {\n        this.wsp.onUnpackedMessage.addListener(listener);\n    }\n\n    close() {\n        this.wsp.close();\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport { Deferred } from './deferred';\nimport * as Builder from './websocketBuilder';\nimport { WebsocketSender } from './websocketSender';\n\n/**\n * Websocket client.\n *\n * TODO: correlate request and response with id, so socket can be reused.\n */\nexport class WebsocketClient {\n    sender: WebsocketSender;\n\n    autoClose: boolean;\n\n    promises: Map<string, Deferred<any>>;\n\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false, autoClose = true) {\n        this.autoClose = autoClose;\n        this.promises = new Map();\n        this.sender = new WebsocketSender(url, debug);\n        this.sender.addListener(this.notifyListener.bind(this));\n    }\n\n    /**\n     * Send heart beat request\n     */\n    async sendHeartBeat(): Promise<any> {\n        const raw = Builder.sendHeartBeat();\n        return this.send(raw);\n    }\n\n    /**\n     * Send subscribe request\n     * @param subscribeEvent\n     * @param subscribeJsonBlock\n     * @param subscribeRawBlock\n     * @param subscribeBlockTxHashes\n     */\n    async sendSubscribe(\n            subscribeEvent = false,\n            subscribeJsonBlock = false,\n            subscribeRawBlock = false,\n            subscribeBlockTxHashes = false\n        ): Promise<any> {\n        const raw = Builder.sendSubscribe(\n                subscribeEvent,\n                subscribeJsonBlock,\n                subscribeRawBlock,\n                subscribeBlockTxHashes\n            );\n\n        return this.send(raw);\n    }\n\n    /**\n     * Send raw transaction\n     * @param hexData Hex encoded data\n     * @param preExec Decides if it is a pre-executed transaction\n     * @param waitNotify Decides if client waits for notify from blockchain before closing\n     */\n    async sendRawTransaction(hexData: string, preExec = false, waitNotify = false) {\n        const raw = Builder.sendRawTransaction(hexData, preExec);\n        const sendResult = await this.send(raw, this.autoClose && !waitNotify);\n\n        if (sendResult.Error !== 0) {\n            // tslint:disable-next-line:no-console\n            console.log(sendResult);\n            throw new Error(JSON.stringify(sendResult));\n        }\n\n        if (waitNotify) {\n            const txHash: string = sendResult.Result;\n\n            const deferred = new Deferred<any>();\n            this.promises.set(txHash, deferred);\n            return deferred.promise;\n        } else {\n            return sendResult;\n        }\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded transaction.\n     * @param txHash Reversed transaction hash\n     */\n    async getRawTransaction(txHash: string): Promise<any> {\n        const raw = Builder.getRawTransaction(txHash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get transaction info by transaction hash.\n     * The result is json.\n     * @param txHash Reversed transaction hash\n     */\n    async getRawTransactionJson(txHash: string): Promise<any> {\n        const raw = Builder.getRawTransactionJson(txHash);\n        return this.send(raw);\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null.\n     */\n    // async getGenerateBlockTime(): Promise<any> {\n    //     const raw = Builder.getGenerateBlockTime();\n    //     return this.send(raw);\n    // }\n\n    /**\n     * Get Nodes count\n     */\n    async getNodeCount(): Promise<any> {\n        const raw = Builder.getNodeCount();\n        return this.send(raw);\n    }\n\n    /**\n     * Get current block height\n     */\n    async getBlockHeight(): Promise<any> {\n        const raw = Builder.getBlockHeight();\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's info by block's height or hash.\n     * The result is hex encoded string.\n     * @param value Block's height or hash\n     */\n    async getBlock(value: number | string): Promise<any> {\n        const raw = Builder.getBlock(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's info by block's height or hash.\n     * The result is json.\n     * @param value Block's height or hash\n     */\n    async getBlockJson(value: number | string): Promise<any> {\n        const raw = Builder.getBlockJson(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get the balance of some address.\n     * The result contains ONT and ONG.\n     * @param address Address\n     */\n    async getBalance(address: Address): Promise<any> {\n        const raw = Builder.getBalance(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Get unbound ong of this address\n     * The result contains ONG.\n     * @param address Address\n     */\n    async getUnboundong(address: Address): Promise<any> {\n        const raw = Builder.getUnboundOng(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Get contract info by code hash.\n     * The result is hex encoded string.\n     * @param hash Contract's code hash.\n     */\n    async getContract(hash: string): Promise<any> {\n        const raw = Builder.getContract(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get contract's info by code hash\n     * The result is json.\n     * @param hash Contract's code hash\n     */\n    async getContractJson(hash: string): Promise<any> {\n        const raw = Builder.getContractJson(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get smart conde event by transaction hash or block's height.\n     * If parameter is transaction hash, the result is the event of that transaction.\n     * If parameter is block's height, the result is all the events of that block.\n     * @param value Reversed transaction hash or block's height\n     */\n    async getSmartCodeEvent(value: number | string): Promise<any> {\n        const raw = Builder.getSmartCodeEvent(value);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block's height by transaction hash\n     * @param hash Reversed transaction hash\n     */\n    async getBlockHeightByTxHash(hash: string): Promise<any> {\n        const raw = Builder.getBlockHeightByTxHash(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get stored value in smart contract by contract's code hash and the key.\n     * @param codeHash Contract's code hash\n     * @param key Key of stored value\n     */\n    async getStorage(codeHash: string, key: string): Promise<any> {\n        const raw = Builder.getStorage(codeHash, key);\n        return this.send(raw);\n    }\n\n    /**\n     * Get merkle proof by transaction hash.\n     * @param hash Reversed transaction hash\n     */\n    async getMerkleProof(hash: string): Promise<any> {\n        const raw = Builder.getMerkleProof(hash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get allowanece\n     * @param asset Asset's type.Only ONT and ONG supported.\n     * @param from Address of allowance's sender.\n     * @param to Address of allowance's receiver.\n     */\n    async getAllowance(asset: string, from: Address, to: Address) {\n        const raw = Builder.getAllowance(asset, from, to);\n        return this.send(raw);\n    }\n\n    /**\n     * Get block hash by block height\n     * @param height Height of the block\n     */\n    async getBlockHash(height: number): Promise<any> {\n        const raw = Builder.getBlockHash(height);\n        return this.send(raw);\n    }\n\n    /**\n     * Return all transaction hash contained in the block corresponding to this height\n     * @param height Height of the block\n     */\n    async getBlockTxsByHeight(height: number): Promise<any> {\n        const raw = Builder.getBlockTxsByHeight(height);\n        return this.send(raw);\n    }\n\n    /**\n     * Return the state of transaction locate in memory\n     */\n    async getGasPrice(): Promise<any> {\n        const raw = Builder.getGasPrice();\n        return this.send(raw);\n    }\n\n    /**\n     * Get grant ong\n     * @param address Address\n     */\n    async getGrantOng(address: Address): Promise<any> {\n        const raw = Builder.getGrantOng(address);\n        return this.send(raw);\n    }\n\n    /**\n     * Query the transaction count in the memory pool\n     */\n    async getMempoolTxCount(): Promise<any> {\n        const raw = Builder.getMempoolTxCount();\n        return this.send(raw);\n    }\n\n    /**\n     * Query the transaction state in the memory pool\n     */\n    async getMempoolTxState(txHash: string): Promise<any> {\n        const raw = Builder.getMempoolTxState(txHash);\n        return this.send(raw);\n    }\n\n    /**\n     * Get the version information of the node\n     */\n    async getVersion(): Promise<any> {\n        const raw = Builder.getVersion();\n        return this.send(raw);\n    }\n\n    /**\n     * Get the network id\n     */\n    async getNetworkId(): Promise<any> {\n        const raw = Builder.getNetworkId();\n        return this.send(raw);\n    }\n\n    /**\n     * Adds listener for Notify messages.\n     *\n     * Be careful to not set autoClose = true and close the websocket on your own.\n     * @param listener Listener\n     */\n    addNotifyListener(listener: (result: any) => void) {\n        this.sender.addListener((result: any) => {\n            if (result.Action === 'Notify') {\n                listener(result);\n            }\n        });\n    }\n\n    /**\n     * Close the websocket manually.\n     */\n    close() {\n        this.sender.close();\n    }\n\n    /**\n     * Send msg to blockchain\n     * @param raw Message to send\n     * @param close Automaticly close connection if also autoClose is specified\n     */\n    private async send<T extends object>(raw: T, close: boolean = this.autoClose): Promise<any> {\n        return this.sender.send(raw, close);\n    }\n\n    private notifyListener(result: any) {\n         // Fixme: Log message cause Notify message to disappear\n        if (result.Action === 'Notify' || result.Action === 'Log') {\n            const txHash: string | undefined = result.Result.TxHash;\n\n            if (txHash !== undefined) {\n                const promise = this.promises.get(txHash);\n\n                if (promise !== undefined) {\n                    this.promises.delete(txHash);\n                    promise.resolve(result);\n                } else {\n                    // tslint:disable-next-line:no-console\n                    console.warn('Received Notify event for unknown transaction');\n                }\n\n                if (this.autoClose) {\n                    this.sender.close();\n                }\n            }\n        }\n    }\n}\n","\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport AbiFunction from './abiFunction';\nimport { Parameter } from './parameter';\n\n/**\n * Decribes the Abi info.\n */\nexport default class AbiInfo {\n    static parseJson(json: string): AbiInfo {\n        const a = new AbiInfo();\n        const obj = JSON.parse(json);\n        a.hash = obj.hash;\n        a.entrypoint = obj.entrypoint;\n        a.functions = obj.functions;\n\n        return a;\n    }\n\n    hash: string;\n    entrypoint: string;\n    functions: AbiFunction[] = [];\n\n    getHash(): string {\n        return this.hash;\n    }\n\n    getEntryPoint(): string {\n        return this.entrypoint;\n    }\n\n    getFunction(name: string): AbiFunction {\n        for (const v of this.functions) {\n            if (v.name === name) {\n                const parameters = v.parameters.map((p: any) => new Parameter(p.name, p.type, ''));\n                return new AbiFunction(v.name, v.returntype, parameters);\n            }\n        }\n        throw Error('not found');\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Address  } from '../../crypto';\nimport AbiInfo from '../../smartcontract/abi/abiInfo';\nimport { Parameter, ParameterType } from '../../smartcontract/abi/parameter';\n\nimport { makeInvokeTransaction } from '../../transaction/transactionBuilder';\nimport { reverseHex, str2hexstr } from '../../utils';\nimport { Transaction } from './../../transaction/transaction';\n\nimport abiJson from '../data/attestClaim';\nconst abiInfo = AbiInfo.parseJson(JSON.stringify(abiJson));\nconst contractHash = abiInfo.getHash().replace('0x', '');\nconst contractAddress = new Address(reverseHex(contractHash));\n/* TODO : Test */\n\n/**\n * Attests the claim.\n *\n * @param claimId Unique id of the claim\n * @param issuer Issuer's ONT ID\n * @param subject Subject's ONT ID\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer's address\n */\nexport function buildCommitRecordTx(claimId: string, issuer: string, subject: string,\n                                    gasPrice: string, gasLimit: string, payer: Address)  {\n    const f = abiInfo.getFunction('Commit');\n    if (issuer.substr(0, 3) === 'did') {\n        issuer = str2hexstr(issuer);\n    }\n    if (subject.substr(0, 3) === 'did') {\n        subject = str2hexstr(issuer);\n    }\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, issuer);\n    const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, subject);\n\n    let tx = new Transaction();\n    tx = makeInvokeTransaction(f.name, [p1, p2, p3], contractAddress, gasPrice, gasLimit, payer);\n    return tx;\n}\n\n/**\n * Revokes the claim.\n *\n * @param claimId Unique id of the claim\n * @param revokerOntid Revoker's ONT ID\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n * @param payer Payer's address\n */\nexport function buildRevokeRecordTx(claimId: string, revokerOntid: string,\n                                    gasPrice: string, gasLimit: string, payer: Address) {\n    const f = abiInfo.getFunction('Revoke');\n\n    const name1 = f.parameters[0].getName();\n    const type1 = ParameterType.ByteArray;\n\n    if (revokerOntid.substr(0, 3) === 'did') {\n        revokerOntid = str2hexstr(revokerOntid);\n    }\n\n    const p1 = new Parameter(name1, type1, str2hexstr(claimId));\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, revokerOntid);\n\n    return makeInvokeTransaction(f.name, [p1, p2], contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Queries the state of attest.\n *\n * @param claimId Unique id of the claim\n */\nexport function buildGetRecordStatusTx(claimId: string) {\n    const f = abiInfo.getFunction('GetStatus');\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\n    const tx = makeInvokeTransaction(f.name, [p1], contractAddress);\n    return tx;\n}\n","export default {\n    hash: '36bb5c053b6b839c8f6b923fe852f91239b9fccc',\n    entrypoint: 'Main',\n    functions: [{\n        name: 'Main',\n        parameters: [{\n            name: 'operation',\n            type: 'String'\n        }, {\n            name: 'args',\n            type: 'Array'\n        }],\n        returntype: 'Any'\n    }, {\n        name: 'Commit',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }, {\n            name: 'commiterId',\n            type: 'ByteArray'\n        }, {\n            name: 'ownerId',\n            type: 'ByteArray'\n        }],\n        returntype: 'Boolean'\n    }, {\n        name: 'Revoke',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }, {\n            name: 'ontId',\n            type: 'ByteArray'\n        }],\n        returntype: 'Boolean'\n    }, {\n        name: 'GetStatus',\n        parameters: [{\n            name: 'claimId',\n            type: 'ByteArray'\n        }],\n        returntype: 'ByteArray'\n    }],\n    events: [{\n        name: 'ErrorMsg',\n        parameters: [{\n            name: 'arg1',\n            type: 'ByteArray'\n        }, {\n            name: 'arg2',\n            type: 'String'\n        }],\n        returntype: 'Void'\n    }, {\n        name: 'Push',\n        parameters: [{\n            name: 'arg1',\n            type: 'ByteArray'\n        }, {\n            name: 'arg2',\n            type: 'String'\n        }, {\n            name: 'arg3',\n            type: 'ByteArray'\n        }],\n        returntype: 'Void'\n    }]\n};\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { hexstr2str } from '../utils';\n\n/**\n * Represents Notify event of attest creation of revocation.\n */\nexport class AttestNotifyEvent {\n    /**\n     * Deserializes Notify event.\n     *\n     * States in events are hex encoded.\n     *\n     * @param e encoded event\n     */\n    static deserialize(e: any): AttestNotifyEvent {\n        const event = new AttestNotifyEvent();\n\n        event.Action = e.Action;\n        event.Error = e.Error;\n        event.Desc = e.Desc;\n        event.Result = Result.deserialize(e.Result);\n\n        return event;\n    }\n\n    Action: string = 'Notify';\n    Desc: string;\n    Error: number;\n    Result: Result;\n}\n\n/**\n * Result of Notify event.\n */\nexport class Result {\n    /**\n     * Deserializes result from event.\n     *\n     * States are hex encoded.\n     *\n     * @param r encoded result\n     */\n    static deserialize(r: any): Result {\n        const result = new Result();\n\n        result.TxHash = r.TxHash;\n        result.State = r.State;\n        result.GasConsumed = r.GasConsumed;\n        result.Notify = r.Notify.map((n: any) => {\n            return {\n                ContractAddress: n.ContractAddress,\n                States: n.States.map( (s: any) => typeof s === 'string' ? hexstr2str(s) : s)\n            };\n        });\n        result.Version = r.Version;\n        return result;\n    }\n\n    TxHash: string;\n    /**\n     * State = 1 : smartcontract executation success\n     * State = 0 : smartcontract executation failure\n     */\n    State: number;\n    GasConsumed: number;\n    Notify: [{\n        ContractAddress: string;\n        /**\n         * The value of States are usually hex string\n         */\n        States: any[];\n    }];\n    Version: string;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as b64 from 'base64-url';\nimport * as uuid from 'uuid';\nimport { PrivateKey, PublicKey, PublicKeyStatus, Signature, SignatureScheme } from '../crypto';\nimport RestClient from '../network/rest/restClient';\nimport { buildGetDDOTx, buildGetPublicKeyStateTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { DDO } from '../transaction/ddo';\nimport { now } from '../utils';\n\n/**\n * Factory method type used for creating concrete instances of Message.\n */\nexport type MessageFactory<T extends Message> = (\n    metadata: Metadata,\n    signature: Signature | undefined\n) => T;\n\n/**\n * Metadata about the message.\n */\nexport interface Metadata {\n    /**\n     * Message id.\n     *\n     * Will be assigned if not provided.\n     */\n    messageId?: string;\n\n    /**\n     * Issuer.\n     */\n    issuer: string;\n\n    /**\n     * Recipient.\n     */\n    subject: string;\n\n    /**\n     * Creation time.\n     */\n    issuedAt: number;\n\n    /**\n     * Expiration time.\n     */\n    expireAt?: number;\n}\n\n/**\n * Common representation of Message in JWT form.\n */\nexport abstract class Message {\n\n    /**\n     * Deserializes the message from JWT format.\n     *\n     * A concrete instance will be creater through the message factory method. This method\n     * is called from concrete class.\n     *\n     * @param jwt Encoded message\n     * @param creator Factory method\n     */\n    protected static deserializeInternal<T extends Message>(jwt: string, creator: MessageFactory<T>): T {\n        const parts = jwt.split('.', 3);\n\n        if (parts.length < 2) {\n            throw new Error('Invalid message.');\n        }\n\n        const header = Message.deserializeHeader(parts[0]);\n        const payload = Message.deserializePayload(parts[1]);\n        let signature: Signature | undefined;\n\n        if (parts.length > 2) {\n            if (header.algorithm !== undefined && header.publicKeyId !== undefined) {\n                signature = Signature.deserializeJWT(parts[2], header.algorithm, header.publicKeyId);\n            } else {\n                throw new Error('Signature scheme was not specified.');\n            }\n        }\n\n        const msg = creator(payload.metadata, signature);\n        msg.payloadFromJSON(payload.rest);\n        return msg;\n    }\n\n    /**\n     * Deserializes payload part of JWT message.\n     *\n     * @param encoded JWT encoded payload\n     */\n    private static deserializePayload(encoded: string) {\n        const stringified = b64.decode(encoded);\n        const { jti, iss, sub, iat, exp, ...rest } = JSON.parse(stringified);\n\n        return {\n            metadata: {\n                messageId: jti,\n                issuer: iss,\n                subject: sub,\n                issuedAt: iat,\n                expireAt: exp\n            } as Metadata,\n            rest\n        };\n    }\n\n    /**\n     * Deserializes the header from JWT encoded header.\n     *\n     * @param encoded JWT encoded header\n     */\n    private static deserializeHeader(encoded: string) {\n        const stringified = b64.decode(encoded);\n        const header = JSON.parse(stringified);\n\n        return {\n            algorithm: header.alg !== undefined ? SignatureScheme.fromLabelJWS(header.alg) : undefined,\n            publicKeyId: header.kid\n        };\n    }\n\n    metadata: Metadata;\n    signature?: Signature;\n\n    constructor(metadata: Metadata, signature: Signature | undefined) {\n        this.metadata = metadata;\n        this.signature = signature;\n\n        if (this.metadata.messageId === undefined) {\n            this.metadata.messageId = uuid();\n        }\n    }\n\n    /**\n     * Signs the message and store the signature inside the request.\n     *\n     * If the algorithm is not specified, then default algorithm for Private key type is used.\n     *\n     * @param url Restful endpoint of Ontology node\n     * @param publicKeyId The ID of a signature public key\n     * @param privateKey Private key to sign the request with\n     * @param algorithm Signature algorithm used\n     */\n    async sign(\n        url: string,\n        publicKeyId: string,\n        privateKey: PrivateKey,\n        algorithm?: SignatureScheme\n    ): Promise<void> {\n        await retrievePublicKey(publicKeyId, url);\n\n        if (algorithm === undefined) {\n            algorithm = privateKey.algorithm.defaultSchema;\n        }\n\n        const msg = this.serializeUnsigned(algorithm, publicKeyId);\n        this.signature = await privateKey.signAsync(msg, algorithm, publicKeyId);\n    }\n\n    /**\n     * Verifies the signature and check ownership of specified ONT ID through smart contract call.\n     *\n     * @param url Restful endpoint of Ontology node\n     * @returns Boolean if the ownership is confirmed\n     */\n    async verify(url: string): Promise<boolean> {\n        const signature = this.signature;\n\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\n            try {\n                if (!this.verifyKeyOwnership()) {\n                    return false;\n                }\n\n                if (!this.verifyExpiration()) {\n                    return false;\n                }\n\n                const state = await retrievePublicKeyState(signature.publicKeyId, url);\n                if (state === PublicKeyStatus.REVOKED) {\n                    return false;\n                }\n\n                const publicKey = await retrievePublicKey(signature.publicKeyId, url);\n\n                const msg = this.serializeUnsigned(signature.algorithm, signature.publicKeyId);\n                return publicKey.verify(msg, signature);\n            } catch (e) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Serializes the message without signature into JWT format.\n     *\n     * Header might contain algorithm and public key id.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    serializeUnsigned(algorithm?: SignatureScheme, publicKeyId?: string): string {\n        const headerEncoded = this.serializeHeader(algorithm, publicKeyId);\n        const payloadEncoded = this.serializePayload();\n\n        return headerEncoded + '.' + payloadEncoded;\n    }\n\n    /**\n     * Serializes the message into JWT format.\n     *\n     */\n    serialize(): string {\n        const signature = this.signature;\n\n        if (signature !== undefined) {\n            const signatureEncoded = signature.serializeJWT();\n            return this.serializeUnsigned(signature.algorithm, signature.publicKeyId) + '.' + signatureEncoded;\n        } else {\n            return this.serializeUnsigned();\n        }\n    }\n\n    /**\n     * Serializes the header into JWT encoded header.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    protected serializeHeader(\n        algorithm: SignatureScheme | undefined,\n        publicKeyId: string | undefined\n    ): string {\n        let header;\n        if (algorithm !== undefined) {\n            header = {\n                alg: algorithm.labelJWS,\n                typ: 'JWT',\n                kid: publicKeyId\n            };\n        } else {\n            header = {\n                typ: 'JWT'\n            };\n        }\n\n        const stringified = JSON.stringify(header);\n        return b64.encode(stringified, 'utf-8');\n    }\n\n    /**\n     * Converts claim data to JSON for serialization.\n     */\n    protected abstract payloadToJSON(): any;\n\n    /**\n     * Retrieves data from JSON.\n     *\n     * @param json JSON object with data\n     */\n    protected abstract payloadFromJSON(json: any): void;\n\n    /**\n     * Verifies if the expiration date has passed\n     */\n    private verifyExpiration(): boolean {\n        if (this.metadata.expireAt !== undefined) {\n            return now() < this.metadata.expireAt;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Verifies if the declared public key id belongs to issuer.\n     */\n    private verifyKeyOwnership(): boolean {\n        const signature = this.signature;\n\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\n            const ontId = extractOntId(signature.publicKeyId);\n\n            return ontId === this.metadata.issuer;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Serializes payload part of JWT message.\n     */\n    private serializePayload(): string {\n        const metadata = {\n            jti: this.metadata.messageId,\n            iss: this.metadata.issuer,\n            sub: this.metadata.subject,\n            iat: this.metadata.issuedAt,\n            exp: this.metadata.expireAt\n        };\n        const rest = this.payloadToJSON();\n\n        const stringified = JSON.stringify({...metadata, ...rest});\n        return b64.encode(stringified, 'utf-8');\n    }\n}\n\n/**\n * Gets the public key associated with ONT ID from blockchain.\n *\n * @param publicKeyId The ID of a signature public key\n * @param url Restful endpoint of Ontology node\n */\nexport async function retrievePublicKey(publicKeyId: string, url: string): Promise<PublicKey> {\n    const ontId = extractOntId(publicKeyId);\n    const keyId = extractKeyId(publicKeyId);\n\n    const client = new RestClient(url);\n    const tx = buildGetDDOTx(ontId);\n    const response = await client.sendRawTransaction(tx.serialize(), true);\n\n    if (response.Result && response.Result.Result) {\n        const ddo = DDO.deserialize(response.Result.Result);\n\n        const publicKey = ddo.publicKeys.find((pk) => pk.id === keyId);\n\n        if (publicKey === undefined) {\n            throw new Error('Not found');\n        }\n\n        return publicKey.pk;\n    } else {\n        throw new Error('Not found');\n    }\n}\n\n/**\n * Gets the state of public key associated with ONT ID from blockchain.\n *\n * @param publicKeyId The ID of a signature public key\n * @param url Restful endpoint of Ontology node\n */\nexport async function retrievePublicKeyState(publicKeyId: string, url: string): Promise<PublicKeyStatus> {\n    const ontId = extractOntId(publicKeyId);\n    const keyId = extractKeyId(publicKeyId);\n\n    const client = new RestClient(url);\n    const tx = buildGetPublicKeyStateTx(ontId, keyId);\n    const response = await client.sendRawTransaction(tx.serialize(), true);\n\n    if (response.Result && response.Result.Result) {\n        return PublicKeyStatus.fromHexLabel(response.Result.Result);\n    } else {\n        throw new Error('Not found');\n    }\n}\n\n/**\n * Extracts ONT ID from public key Id.\n *\n * @param publicKeyId The ID of a signature public key\n */\nexport function extractOntId(publicKeyId: string): string {\n    const index = publicKeyId.indexOf('#keys-');\n\n    if (index === -1) {\n        throw new Error('Is not a publicKeId.');\n    }\n\n    return publicKeyId.substr(0, index);\n}\n\n/**\n * Extracts key id from public key Id.\n *\n * @param publicKeyId The ID of a signature public key\n */\nexport function extractKeyId(publicKeyId: string): number {\n    const index = publicKeyId.indexOf('#keys-');\n\n    if (index === -1) {\n        throw new Error('Is not a publicKeId.');\n    }\n\n    // return num2hexstring(\n    //     Number(publicKeyId.substr(index + '#keys-'.length))\n    // );\n    return Number(publicKeyId.substr(index + '#keys-'.length));\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport * as b64 from 'base64-url';\nimport { Address, PrivateKey, Signature, SignatureScheme } from '../crypto';\nimport RestClient from '../network/rest/restClient';\nimport { WebsocketClient } from '../network/websocket/websocketClient';\nimport {\n    buildCommitRecordTx,\n    buildGetRecordStatusTx,\n    buildRevokeRecordTx\n} from '../smartcontract/neovm/attestClaimTxBuilder';\nimport { signTransactionAsync } from '../transaction/transactionBuilder';\nimport { hexstr2str, StringReader } from '../utils';\nimport { AttestNotifyEvent } from './attestNotifyEvent';\nimport { ClaimProof } from './claimProof';\nimport { Message, Metadata } from './message';\n\n/**\n * Type of revocation.\n */\nexport enum RevocationType {\n    AttestContract = 'AttestContract',\n    RevocationList = 'RevocationList'\n}\n\n/**\n * Revocation definition.\n */\nexport interface Revocation {\n    /**\n     * Type of revocation.\n     */\n    type: RevocationType;\n\n    /**\n     * Url of revocation list if type is RevocationList\n     */\n    url?: string;\n\n    /**\n     * Address of attest contract if type is AttestContract\n     */\n    addr?: string;\n}\n\n/**\n * Verifiable claim.\n *\n * TODO: override verify to add claim proof verification.\n */\nexport class Claim extends Message {\n    static deserialize(jwt: string): Claim {\n        return super.deserializeInternal(jwt, (m: any, s: any) => new Claim(m, s));\n    }\n\n    version: string;\n    context: string;\n    content: any;\n    revocation?: Revocation;\n\n    useProof: boolean;\n    proof?: ClaimProof;\n\n    constructor(metadata: Metadata, signature?: Signature | undefined, useProof?: boolean) {\n        super(metadata, signature);\n        this.useProof = useProof === true;\n    }\n\n    /**\n     * Overrides default message verification with added attest verification.\n     *\n     * TODO: return more than boolean\n     *\n     * const VerifyOntidClaimResult = {\n     *   CLAIM_NOT_ONCHAIN : 'CLAIM_NOT_ONCHAIN',\n     *   INVALID_SIGNATURE : 'INVALID_SIGNATURE',\n     *   PK_IN_REVOKED     : 'PK_IN_REVOKED',\n     *   NO_ISSUER_PK      : 'NO_ISSUER_PK',\n     *   EXPIRED_CLAIM     : 'EXPIRED_CLAIM',\n     *   REVOKED_CLAIM     : 'REVOKED_CLAIM',\n     *   VALID_CLAIM       : 'VALID_CLAIM'\n     * };\n     *\n     * @param url Restful endpoint of Ontology node\n     * @param checkAttest Should be the attest tested\n     */\n    async verify(url: string, checkAttest = true): Promise<boolean> {\n        const result = await super.verify(url);\n\n        if (result && checkAttest) {\n            return this.getStatus(url);\n        } else {\n            return result;\n        }\n    }\n\n    /**\n     * Serializes the claim into JWT/JWT-X format.\n     *\n     * Override default implementation by adding proof if available.\n     */\n    serialize(): string {\n        if (this.useProof) {\n            const jwt = super.serialize();\n            const proof = this.serializeProof();\n\n            return jwt + '.' + proof;\n        } else {\n            return super.serialize();\n        }\n    }\n\n    /**\n     * Attests the claim onto blockchain.\n     *\n     * @param url Websocket endpoint of Ontology node\n     * @param privateKey Private key to sign the transaction\n     * @param gasPrice gasPrice\n     * @param gasLimit gasLimit\n     * @param payer payer\n     */\n    async attest(url: string, gasPrice: string, gasLimit: string,\n                 payer: Address, privateKey: PrivateKey): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const subjectId = this.metadata.subject;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n\n        const client = new WebsocketClient(url);\n        const tx = buildCommitRecordTx(claimId, attesterId, subjectId, gasPrice, gasLimit, payer);\n        await signTransactionAsync(tx, privateKey);\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\n\n        const event = AttestNotifyEvent.deserialize(response);\n        // tslint:disable-next-line:no-console\n        console.log(JSON.stringify(event));\n        return event.Result.Notify[0].States[0] === 'Push';\n    }\n\n    /**\n     * Revokes claim attest from blockchain.\n     *\n     * @param gas the cost of the transactoin\n     * @param payer the payer of the cost\n     * @param privateKey Private key to sign the transaction\n     * @param url Websocket endpoint of Ontology node\n     * @param gasPrice gasPrice\n     * @param gasLimit gasLimit\n     * @param payer payer\n     */\n    async revoke(url: string, gasPrice: string,\n                 gasLimit: string, payer: Address, privateKey: PrivateKey): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n        const client = new WebsocketClient(url);\n        const tx = buildRevokeRecordTx(claimId, attesterId, gasPrice, gasLimit, payer);\n        await signTransactionAsync(tx, privateKey);\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\n\n        const event = AttestNotifyEvent.deserialize(response);\n\n        return event.Result.Notify[0].States[0] === 'Push';\n    }\n\n    /**\n     * Gets status of the claim attest.\n     *\n     * @param url Restful endpoint of Ontology node\n     */\n    async getStatus(url: string): Promise<boolean> {\n        const attesterId = this.metadata.issuer;\n        const claimId = this.metadata.messageId;\n        if (claimId === undefined) {\n            throw new Error('Claim id not specified.');\n        }\n\n        const client = new RestClient(url);\n        const tx = buildGetRecordStatusTx(claimId);\n\n        const response = await client.sendRawTransaction(tx.serialize(), true);\n\n        const result = GetStatusResponse.deserialize(response);\n        // tslint:disable-next-line:no-console\n        console.log(result);\n\n        return result.status === Status.ATTESTED && result.issuerId === attesterId;\n    }\n\n    protected payloadToJSON(): any {\n        return {\n            'ver': this.version,\n            '@context': this.context,\n            'clm': this.content,\n            'clm-rev': this.revocation\n        };\n    }\n\n    protected payloadFromJSON(json: any): void {\n        this.version = json.ver;\n        this.context = json['@context'];\n        this.content = json.clm;\n        this.revocation = json['clm-rev'];\n    }\n\n    /**\n     * Serializes the header into JWT/JWT-X encoded header.\n     *\n     * Override default implementation by adding proof if available.\n     *\n     * @param algorithm Signature algorithm used\n     * @param publicKeyId The ID of a signature public key\n     */\n    protected serializeHeader(algorithm: SignatureScheme | undefined, publicKeyId: string | undefined): string {\n        if (this.useProof) {\n            if (algorithm === undefined || publicKeyId === undefined) {\n                throw new Error('Signature is needed fow JWT-X.');\n            } else {\n                const header = {\n                    alg: algorithm.labelJWS,\n                    typ: 'JWT-X',\n                    kid: publicKeyId\n                };\n\n                const stringified = JSON.stringify(header);\n                return b64.encode(stringified, 'utf-8');\n            }\n        } else {\n            return super.serializeHeader(algorithm, publicKeyId);\n        }\n    }\n\n    /**\n     * Serializes the proof into JWT-X.\n     */\n    protected serializeProof(): string {\n        const stringified = JSON.stringify(this.proof);\n        return b64.encode(stringified, 'utf-8');\n    }\n}\n\n/**\n * Helper class for deserializing GetStatus response.\n * fixme: Ontology node changed the response\n */\nexport class GetStatusResponse {\n    static deserialize(r: any): GetStatusResponse {\n        const response = new GetStatusResponse();\n\n        if (r.Result !== undefined && r.Result.Result === '') {\n            response.status = Status.NOTFOUND;\n            return response;\n        }\n        const sr = new StringReader(r.Result.Result);\n        sr.read(1); // data type\n        sr.readNextLen(); // data length\n        sr.read(1); // data type\n        const claimId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        const issuerId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        const subjectId = hexstr2str(sr.readNextBytes());\n        sr.read(1); // data type\n        let status = sr.readNextBytes();\n        response.claimId = claimId;\n        response.issuerId = issuerId;\n        response.subjectId = subjectId;\n        if (!status) {// status is revoked\n            status = '00';\n        }\n        response.status =  status as Status;\n        return response;\n    }\n\n    claimId: string;\n    issuerId: string;\n    subjectId: string;\n    status: Status;\n    // status: Status;\n    // attesterId: string;\n    // time: string;\n}\n\nexport enum Status {\n    REVOKED = '00',\n    ATTESTED = '01',\n    NOTFOUND = '-1'\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { PublicKey } from '../crypto';\nimport { hexstr2str, str2VarBytes, StringReader } from '../utils';\n\n/**\n * Public key representation with recorded id from blockchain.\n *\n */\nexport class PublicKeyWithId {\n    /**\n     * Deserialize from hex string to PublicKeyWithId\n     * @param hexstr\n     */\n    static deserialize(hexstr: string): PublicKeyWithId[] {\n        const sr = new StringReader(hexstr);\n\n        const result: PublicKeyWithId[] = [];\n        while (!sr.isEmpty()) {\n            const index = sr.readUint32();\n            const data = sr.readNextBytes();\n            const p = new PublicKeyWithId();\n            p.id = index;\n            p.pk = PublicKey.deserializeHex(new StringReader(data));\n            result.push(p);\n        }\n        return result;\n    }\n\n    /**\n     * Id of the public key.\n     *\n     * Only numeric part is recorded. Full PublicKeyId will be constucted as follows:\n     * <ONTID>#keys-<id>\n     */\n    id: number;\n    pk: PublicKey;\n}\n\n/**\n * Description attribute of ONT ID\n */\nexport class DDOAttribute {\n    static deserialize(hexstr: string) {\n        const sr = new StringReader(hexstr);\n\n        const result: DDOAttribute[] = [];\n        while (!sr.isEmpty()) {\n            const key = hexstr2str(sr.readNextBytes());\n            const type = hexstr2str(sr.readNextBytes());\n            const value = hexstr2str(sr.readNextBytes());\n            const d = new DDOAttribute();\n            d.key = key;\n            d.type = type;\n            d.value = value;\n            result.push(d);\n        }\n\n        return result;\n    }\n\n    /**\n     * Key of the attribute\n     */\n    key: string;\n    /**\n     * Type of the attribute\n     */\n    type: string;\n    /**\n     * Value of the attribute\n     */\n    value: string;\n\n    /**\n     * Serialize DDO to hex string\n     */\n    serialize(): string {\n        let result = '';\n        result += str2VarBytes(this.key);\n        result += str2VarBytes(this.type);\n        result += str2VarBytes(this.value);\n        return result;\n    }\n}\n\n/**\n * Description object of ONT ID\n */\nexport class DDO {\n    /**\n     * Deserialize from hex string to DDO\n     * @param hexstr Hex encoded string\n     */\n    static deserialize(hexstr: string): DDO {\n        const ss = new StringReader(hexstr);\n\n        const ddo = new DDO();\n        const pkLen = ss.readNextLen();\n\n        if (pkLen > 0) {\n            ddo.publicKeys = PublicKeyWithId.deserialize(ss.read(pkLen));\n        }\n\n        const attrLen = ss.readNextLen();\n        if (attrLen > 0) {\n            ddo.attributes = DDOAttribute.deserialize(ss.read(attrLen));\n        }\n\n        const recoveryLen = ss.readNextLen();\n        if (recoveryLen > 0) {\n            ddo.recovery = ss.read(recoveryLen);\n        }\n        return ddo;\n    }\n\n    /**\n     * Array of public keys\n     */\n    publicKeys: PublicKeyWithId[] = [];\n    /**\n     * Array of attributes\n     */\n    attributes: DDOAttribute[] = [];\n    /**\n     * Recovery of DDO\n     */\n    recovery: string = '';\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Address, JsonKey, PrivateKey } from './crypto';\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\nimport { ScryptParams } from './scrypt';\nimport { Transaction } from './transaction/transaction';\nimport { signTransaction } from './transaction/transactionBuilder';\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\n\n/**\n * Control data of identity\n */\nexport class ControlData {\n    static fromJson(json: any): ControlData {\n        const privateKey = deserializeFromJson(json as JsonKey);\n        const cd = new ControlData(json.id, privateKey, new Address(json.address), json.salt);\n        cd.publicKey = json.publicKey;\n        cd.hash = json.hash;\n        return cd;\n    }\n\n    /**\n     * Id of control data\n     */\n    id: string;\n    /**\n     * Encrypted private key\n     */\n    encryptedKey: PrivateKey;\n    /**\n     * Address of control data\n     */\n    address: Address;\n    /**\n     * Salt of control data\n     */\n    salt: string;\n    /**\n     * hash type\n     */\n    hash: string = 'sha256';\n    /**\n     * The public key\n     */\n    publicKey: string;\n\n    constructor(id: string, encryptedKey: PrivateKey, address: Address, salt: string) {\n        this.id = id;\n        this.encryptedKey = encryptedKey;\n        this.address = address;\n        this.salt = salt;\n    }\n\n    toJson(): object {\n        return {\n            id: this.id,\n            ...this.encryptedKey.serializeJson(),\n            address: this.address.toBase58(),\n            salt: this.salt,\n            ['enc-alg']: 'aes-256-gcm',\n            hash: this.hash,\n            publicKey: this.publicKey\n        };\n    }\n}\n\nexport class Identity {\n    /**\n     * Import identity\n     * @param label Name of identity\n     * @param encryptedPrivateKey Encrypted private key\n     * @param password User's password to decrypt\n     * @param address Address to decrypt\n     * @param saltBase64 Salt to decrypt\n     * @param params Optional params to decrypt\n     */\n    static importIdentity(\n        label: string,\n        encryptedPrivateKey: PrivateKey,\n        password: string,\n        address: Address,\n        saltBase64: string,\n        params?: ScryptParams\n    ): Identity {\n        // create identity\n        const identity = new Identity();\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\n        if (!label) {\n            label = ab2hexstring (generateRandomArray(4));\n        }\n\n        // generate ontid from p\n        const publicKey = privateKey.getPublicKey();\n        identity.ontid = Address.generateOntid(publicKey);\n        identity.label = label;\n        identity.lock = false;\n        identity.isDefault = false;\n\n        // control\n        const control = new ControlData('1', encryptedPrivateKey, Address.fromOntid(identity.ontid), saltBase64);\n        control.publicKey = publicKey.serializeHex();\n        identity.controls.push(control);\n\n        return identity;\n    }\n\n    /**\n     * Creates Identity object encrypting specified private key.\n     *\n     * The identity is not registered on the blockchain. Caller needs to register it.\n     *\n     * @param privateKey Private key associated with the identity\n     * @param keyphrase Password use to encrypt the private key\n     * @param label Custom label\n     * @param params Optional scrypt params\n     */\n    static create(privateKey: PrivateKey, keyphrase: string, label: string, params?: ScryptParams) {\n        const identity = new Identity();\n        identity.ontid = '';\n        identity.label = label;\n        identity.lock = false;\n        identity.isDefault = false;\n\n        // ontid\n        const publicKey = privateKey.getPublicKey();\n        identity.ontid = Address.generateOntid(publicKey);\n        const address = Address.fromOntid(identity.ontid);\n        const salt = randomBytes(16);\n        const encryptedPrivateKey = privateKey.encrypt(keyphrase, address, salt, params);\n        // start from 1\n        const saltBase64 = Buffer.from(salt, 'hex').toString('base64');\n        const control = new ControlData('1', encryptedPrivateKey, address, saltBase64);\n        control.publicKey = publicKey.serializeHex();\n        identity.controls.push(control);\n\n        return identity;\n    }\n\n    static parseJson(json: string): Identity {\n        return Identity.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Identity {\n        const id = new Identity();\n        id.ontid = obj.ontid;\n        id.label = obj.label;\n        id.lock = obj.lock;\n        id.isDefault = obj.isDefault;\n        id.controls = (obj.controls as any[]).map((c) => ControlData.fromJson(c));\n        id.extra = obj.extra;\n        return id;\n    }\n\n    ontid: string;\n    label: string;\n    lock: boolean;\n    isDefault: boolean;\n    controls: ControlData[] = [];\n    extra: null;\n\n    addControl(control: ControlData) {\n        for (const c of this.controls) {\n            if (c.address.toBase58() === control.address.toBase58()) {\n                return;\n            }\n        }\n        control.id = (this.controls.length + 1).toString();\n        this.controls.push(control);\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            ontid: this.ontid,\n            label: this.label,\n            lock: this.lock,\n            isDefault: this.isDefault,\n            controls: this.controls.map((c) => c.toJson()),\n            extra: this.extra\n        };\n        return obj;\n    }\n\n    exportPrivateKey(password: string, params?: ScryptParams) {\n        const encryptedKey = this.controls[0].encryptedKey;\n        const address = this.controls[0].address;\n        const salt = this.controls[0].salt;\n        return encryptedKey.decrypt(password, address, salt, params);\n    }\n\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\n        const pri = this.exportPrivateKey(password, params);\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as cryptoJS from 'crypto-js';\nimport { Signable } from '../crypto/index';\nimport { PrivateKey } from '../crypto/PrivateKey';\nimport { TxType } from '../transaction/transaction';\nimport { SignatureScheme } from './../crypto/SignatureScheme';\nimport { TransactionAttribute } from './../transaction/txAttribute';\nimport { num2hexstring, num2VarInt } from './../utils';\nimport { Program } from './Program';\nimport { TransactionInput } from './TransactionInput';\nimport { TransactionOutput } from './TransactionOutput';\n\n/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport class TransactionNeo implements Signable {\n    /**\n     * Transaction type\n     */\n    type: TxType;\n\n    version: number = 0;\n\n    nonce: string;\n\n    attributes: TransactionAttribute[];\n\n    inputs: TransactionInput[];\n\n    outputs: TransactionOutput[];\n\n    scripts: Program[];\n\n    serialize() {\n        let result = this.serializeUnsigned();\n        result += num2VarInt(this.scripts.length);\n        for (const s of this.scripts) {\n            result += s.serialize();\n        }\n\n        return result;\n\n    }\n\n    serializeUnsigned() {\n        let result = '';\n        result += num2hexstring(this.type);\n        result += num2hexstring(this.version);\n\n        result += this.serializeExclusiveData();\n        result += num2VarInt(this.attributes.length);\n        for (const a of this.attributes) {\n            result += a.serialize();\n        }\n\n        result += num2VarInt(this.inputs.length);\n        for (const i of this.inputs) {\n            result += i.serialize();\n        }\n\n        result += num2VarInt(this.outputs.length);\n        for (const o of this.outputs) {\n            result += o.serialize();\n        }\n        return result;\n    }\n\n    getHash() {\n        const data = this.serializeUnsigned();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    getSignContent() {\n        return this.getHashData();\n    }\n\n    serializeUnsignedData() {\n        return this.getHashData();\n    }\n\n    getHashData() {\n        return this.serializeUnsigned();\n    }\n\n    sign(privateKey: PrivateKey, scheme: SignatureScheme = SignatureScheme.ECDSAwithSHA256) {\n        const sig = privateKey.sign(this.getHashData(), scheme).serializeHex();\n        const signature = sig.substring(2);\n        return signature;\n    }\n\n    protected serializeExclusiveData() {\n        return '';\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { hex2VarBytes } from '../utils';\nimport { TxType } from './../transaction/transaction';\nimport { num2hexstring } from './../utils';\nimport { TransactionNeo } from './TransactionNeo';\n\nexport class InvocationTransaction extends TransactionNeo {\n    script: string;\n    gas: number;\n    constructor() {\n        super();\n        this.type = TxType.Invoke;\n    }\n\n    serializeExclusiveData() {\n        let result = '';\n        result += hex2VarBytes(this.script);\n        result += num2hexstring(this.gas, 8, true);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { Address } from './../crypto/address';\n\nexport class NeoRpc {\n\n    static sendRawTransaction(url: string, data: string) {\n        const req = this.makeRequest('sendrawtransaction', data);\n        return axios.post(url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    static makeRequest(method: string, ...params: any[]) {\n        const request = {\n            jsonrpc: '2.0',\n            method,\n            params,\n            id: 1\n        };\n\n        return request;\n    }\n\n    static getBalance(url: string, contractAddr: Address, address: Address) {\n        const req = this.makeRequest('getstorage', contractAddr.toHexString(), address.serialize());\n        return axios.post(url, req).then((res) => {\n            return res.data;\n        });\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { PublicKey } from '../crypto/PublicKey';\nimport { programFromMultiPubKey, programFromParams, programFromPubKey } from '../transaction/program';\nimport { hex2VarBytes, StringReader } from '../utils';\n\nexport class Program {\n    static deserialize(hexstring: string) {\n        const sr = new StringReader();\n        const program = new Program();\n        program.parameter = sr.readNextBytes();\n        program.code = sr.readNextBytes();\n        return program;\n    }\n\n    static programFromParams(sigData: string[]) {\n        return programFromParams(sigData);\n    }\n\n    static programFromPubKey(publicKey: PublicKey) {\n        return programFromPubKey(publicKey);\n    }\n\n    static programFromMultiPubKey(m: number, pks: PublicKey[]) {\n        return programFromMultiPubKey(pks, m);\n    }\n\n    parameter: string;\n\n    code: string;\n\n    serialize() {\n        let result = '';\n        result += hex2VarBytes(this.parameter);\n        result += hex2VarBytes(this.code);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport AbiFunction from '../smartcontract/abi/abiFunction';\nimport { serializeAbiFunction } from '../transaction/scriptBuilder';\nimport { num2hexstring, randomBytes } from '../utils';\nimport { Address } from './../crypto/address';\nimport { TransactionAttribute, TransactionAttributeUsage } from './../transaction/txAttribute';\nimport { InvocationTransaction } from './InvocationTransaction';\nexport class SmartContract {\n    static makeInvokeTransaction(contractAddr: Address, addr: Address, abiFunction: AbiFunction) {\n        let params = serializeAbiFunction(abiFunction);\n        params += num2hexstring(0x67);\n        params += contractAddr.serialize();\n        const tx = this.makeInvocationTransaction(params, addr);\n        return tx;\n    }\n\n    static makeInvocationTransaction(params: string, addr: Address) {\n        const tx = new InvocationTransaction();\n        tx.version = 1;\n        tx.attributes = [];\n        const attr1 = new TransactionAttribute();\n        attr1.usage = TransactionAttributeUsage.Script;\n        attr1.data = addr.serialize();\n        tx.attributes[0] = attr1;\n        const attr2 = new TransactionAttribute();\n        attr2.usage = TransactionAttributeUsage.DescriptionUrl;\n        attr2.data = randomBytes(16);\n        tx.attributes[1] = attr2;\n        tx.inputs = [];\n        tx.outputs = [];\n        tx.script = params;\n        tx.gas = 0;\n        return tx;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { reverseHex } from '../utils';\nimport { num2hexstring, StringReader } from './../utils';\n\nexport class TransactionInput {\n\n    static deserialize(hexstr: string) {\n        const sr = new StringReader(hexstr);\n        const input = new TransactionInput();\n        input.prevHash = sr.read(20);\n        input.prevIndex = parseInt(reverseHex(sr.read(2)), 16);\n        return input;\n    }\n    /**\n     * 32 bytes\n     */\n    prevHash: string;\n\n    prevIndex: number;\n\n    equals(o: any) {\n        if (o === this) {\n            return true;\n        }\n        if (null === o) {\n            return false;\n        }\n        if (!(o instanceof TransactionInput)) {\n            return false;\n        }\n        return this.prevHash === o.prevHash && this.prevIndex === o.prevIndex;\n    }\n\n    hashCode() {\n        return parseInt(reverseHex(this.prevHash) , 16) + this.prevIndex;\n    }\n\n    serialize() {\n        let result = '';\n        result += this.prevHash;\n        result += num2hexstring(this.prevIndex, 2, true);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Address } from './../crypto/address';\nimport { num2hexstring, StringReader } from './../utils';\nexport class TransactionOutput {\n\n    static deserialize(hexstring: string) {\n        const sr = new StringReader(hexstring);\n        const output = new TransactionOutput();\n        output.assetId = sr.read(32);\n        output.value = sr.readLong();\n        output.scriptHash = new Address(sr.read(20));\n        return output;\n    }\n\n    /**\n     * 32 bytes\n     */\n    assetId: string;\n\n    // long\n    value: number;\n\n    scriptHash: Address;\n\n    serialize() {\n        let result = '';\n        result += this.assetId;\n        result += num2hexstring(this.value, 8, true);\n        result += this.scriptHash.serialize();\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport axios from 'axios';\nimport { TEST_ONT_URL } from '../../consts';\nimport { Address } from '../../crypto/address';\nimport { ERROR_CODE } from '../../error';\n\n/**\n * Wrapper class for RPC apis.\n */\nexport default class RpcClient {\n    /**\n     * Url of the blockchain node\n     */\n    url: string;\n\n    constructor( url ?: string ) {\n        this.url = url || TEST_ONT_URL.RPC_URL;\n    }\n\n    /**\n     * Get the current blockchain node url.\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * Make request base on method and parameters\n     * @param method Method's name\n     * @param params Parameters\n     */\n    makeRequest(method: string, ...params: any[]) {\n        const request = {\n            jsonrpc: '2.0',\n            method,\n            params,\n            id: 1\n        };\n\n        return request;\n    }\n\n    /**\n     * Get the balance of some address.\n     * The result contains ONT and ONG.\n     * @param address Address\n     */\n    getBalance(address: Address): Promise<any> {\n        const req = this.makeRequest('getbalance', address.toBase58());\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Send ran transaction to blockchain.\n     * @param data Hex encoded data.\n     * @param preExec Decides if it is a pre-execute transaction.\n     */\n    sendRawTransaction(data: string, preExec: boolean = false): Promise<any> {\n        let req;\n\n        if (preExec) {\n            req = this.makeRequest('sendrawtransaction', data, 1);\n        } else {\n            req = this.makeRequest('sendrawtransaction', data);\n        }\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get raw transaction by transaction hash.\n     * The result is hex encoded string.\n     * @param txHash Reversed transaction hash\n     */\n    getRawTransaction(txHash: string): Promise<any> {\n        const req = this.makeRequest('getrawtransaction', txHash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get transaction info by transaction hash.\n     * The result is json.\n     * @param txHash Reversed transaction hash.\n     */\n    getRawTransactionJson(txHash: string): Promise<any> {\n        const req = this.makeRequest('getrawtransaction', txHash, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /** Deprecated\n     * Get the generation time for each block.\n     * If the blockchain node runs in vbft, the result is null cause the time is not fixed.\n     */\n    // getGenerateBlockTime(): Promise<any> {\n    //     const req = this.makeRequest('getgenerateblocktime');\n\n    //     return axios.post(this.url, req).then((res) => {\n    //         return res.data;\n    //     });\n    // }\n\n    /**\n     * Get the nodes count.\n     */\n    getNodeCount(): Promise<any> {\n        const req = this.makeRequest('getconnectioncount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get the current block height.\n     */\n    getBlockHeight(): Promise<any> {\n        const req = this.makeRequest('getblockcount');\n\n        return axios.post(this.url, req).then((res) => {\n            if (res.data && res.data.result) {\n                return res.data.result - 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    /**\n     * Get the all blocks count.\n     */\n    getBlockCount(): Promise<any> {\n        const req = this.makeRequest('getblockcount');\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * The result is json.\n     * @param value Block's hash or height\n     */\n    getBlockJson(value: string | number): Promise<any> {\n        const req = this.makeRequest('getblock', value, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by contract' code hash.\n     * The result is hex encoded string.\n     * @param hash Contract's code hash.\n     */\n    getContract(hash: string): Promise<any> {\n        const req = this.makeRequest('getcontractstate', hash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get contract info by contract's code hash.\n     * The result is json.\n     * @param codeHash Contract's code hash.\n     */\n    getContractJson(codeHash: string): Promise<any> {\n        const req = this.makeRequest('getcontractstate', codeHash, 1);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block info by block's height or hash.\n     * The result is hex encoded string.\n     *\n     * @param value Block's height or hash\n     */\n    getBlock(value: string | number): Promise<any> {\n        const req = this.makeRequest('getblock', value);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get smart contract event.\n     * If parameter is transaction's hash, the result is the event of that transaction.\n     * If parameter is block's height, the result is all the events of that block.\n     *\n     * @param value Transaction's hash or block's height\n     */\n    getSmartCodeEvent(value: string | number): Promise<any> {\n        const req = this.makeRequest('getsmartcodeevent', value);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get block height by transaction hash\n     * @param txHash Reversed transaction hash\n     */\n    getBlockHeightByTxHash(txHash: string): Promise<any> {\n        const req = this.makeRequest('getblockheightbytxhash', txHash);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get stored value in smart contract by contract's code hash and the key.\n     * @param codeHash Contract's code hash\n     * @param key Key of stored value\n     */\n    getStorage(codeHash: string, key: string): Promise<any> {\n        const req = this.makeRequest('getstorage', codeHash, key);\n\n        // tslint:disable-next-line:no-console\n        console.log(req);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get merkle proof by transaction hash.\n     * @param hash Reversed transaction hash\n     */\n    getMerkleProof(hash: string): Promise<any> {\n        const req = this.makeRequest('getmerkleproof', hash);\n\n        // tslint:disable-next-line:no-console\n        console.log(this.url);\n        // tslint:disable-next-line:no-console\n        console.log(req);\n\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    /**\n     * Get allowanece\n     * @param asset Asset's type.Only ONT and ONG supported.\n     * @param from Address of allowance's sender.\n     * @param to Address of allowance's receiver.\n     */\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n        if (asset !== 'ont' && asset !== 'ong') {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        const req = this.makeRequest('getallowance', asset, from.toBase58(), to.toBase58());\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getUnboundOng(address: Address): Promise<any> {\n        const req = this.makeRequest('getunboundong', 'ong', address.toBase58(), address.toBase58());\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getBlockTxsByHeight(height: number): Promise<any> {\n        const req = this.makeRequest('getblocktxsbyheight', height);\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getGasPrice(): Promise<any> {\n        const req = this.makeRequest('getgasprice');\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getGrantOng(address: Address): Promise<any> {\n        const req = this.makeRequest('getgrantong', address.toBase58());\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getMempoolTxCount(): Promise<any> {\n        const req = this.makeRequest('getmempooltxcount');\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getMempoolTxState(txHash: string): Promise<any> {\n        const req = this.makeRequest('getmempooltxstate', txHash);\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n    getVersion(): Promise<any> {\n        const req = this.makeRequest('getversion');\n        return axios.post(this.url, req).then((res) => {\n            return res.data;\n        });\n    }\n\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BigNumber } from 'bignumber.js';\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\nimport { num2hexstring } from './../../utils';\nimport { Parameter, ParameterType } from './../abi/parameter';\n\nexport class Oep8State {\n    public from: string;\n    public to: string;\n    public tokenId: string;\n    public value: BigNumber;\n\n    public constructor(from: Address, to: Address, tokenId: number, value: string) {\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.tokenId = num2hexstring(tokenId);\n        this.value = new BigNumber(value);\n    }\n}\n\nexport class TransferFrom {\n    spender: string;\n    from: string;\n    to: string;\n    tokenId: string;\n    value: BigNumber;\n    constructor(spender: Address, from: Address, to: Address, tokenId: number, value: string) {\n        this.spender = spender.serialize();\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.tokenId = num2hexstring(tokenId);\n        this.value = new BigNumber(value);\n    }\n}\n\nconst FunctionNames = {\n    Name: 'name',\n    Symbol: 'symbol',\n    TotalSupply: 'totalSupply',\n    BalanceOf: 'balanceOf',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    ApproveMulti: 'approveMulti',\n    Allowance: 'allowance',\n    TransferFrom: 'transferFrom',\n    TransferFromMulti: 'transferFromMulti',\n    Compound: 'compound',\n    Concatkey: 'concatkey',\n    Init: 'init',\n    CreateMultiKindsPumpkin: 'createMultiKindsPumpkin',\n    CheckTokenPrefix: 'checkTokenPrefix',\n    BalancesOf: 'balancesOf',\n    TotalBalanceOf: 'totalBalanceOf',\n    CheckTokenId: 'checkTokenId'\n};\n\nexport class Oep8TxBuilder {\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    makeInitTx(\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Init;\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferTx(\n        sendAddr: Address,\n        recvAddr: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Transfer;\n        const params = [\n            new Parameter('sender', ParameterType.ByteArray, sendAddr.serialize()),\n            new Parameter('recv', ParameterType.ByteArray, recvAddr.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferMultiTx(\n        states: Oep8State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(FunctionNames.TransferMulti));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeApproveTx(\n        owner: Address,\n        spender: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Approve;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeApproveMulti(\n        states: Oep8State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.ApproveMulti;\n        const list = [];\n        list.push(str2hexstr(func));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromMulti(\n        states: TransferFrom[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TransferFromMulti;\n        const list = [];\n        list.push(str2hexstr(func));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.spender,\n                state.from,\n                state.to,\n                state.tokenId,\n                state.value\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromTx(\n        sender: Address,\n        from: Address,\n        to: Address,\n        tokenId: number,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TransferFrom;\n        const params = [\n            new Parameter('sender', ParameterType.ByteArray, sender.serialize()),\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\n            new Parameter('amount', ParameterType.Long, amount)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Compound tokens\n     * @param account User's address\n     * @param compoundNum 0 - compound all tokens that can be compounded; 1 - compound 1 token of each type.\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeCompoundTx(\n        account: Address,\n        compoundNum: number,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Compound;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize()),\n            new Parameter('compoundNum', ParameterType.Integer, compoundNum)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryAllowanceTx(\n        owner: Address,\n        spender: Address,\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Allowance;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryBalanceOfTx(\n        addr: Address,\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.BalanceOf;\n        const params = [\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize()),\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalSupplyTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.TotalSupply;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryNameTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Name;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryDecimalsTx(): Transaction {\n        const func = FunctionNames.Symbol;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQuerySymbolTx(\n        tokenId: number\n    ): Transaction {\n        const func = FunctionNames.Symbol;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryBalancesTx(\n        account: Address\n    ): Transaction {\n        const func = FunctionNames.BalancesOf;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalBalanceTx(\n        account: Address\n    ): Transaction {\n        const func = FunctionNames.TotalBalanceOf;\n        const params = [\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Account } from './account';\nimport { DEFAULT_SCRYPT } from './consts';\nimport { Identity } from './identity';\n\n/**\n * Class to manage Accounts and Identity\n */\nexport class Wallet {\n\n    static parseJson(json: string): Wallet {\n        return Wallet.parseJsonObj(JSON.parse(json));\n    }\n\n    /**\n     * Deserializes JSON object.\n     *\n     * Object should be real object, not stringified.\n     *\n     * @param obj JSON object\n     */\n    static parseJsonObj(obj: any): Wallet {\n        const wallet = new Wallet();\n        wallet.name = obj.name;\n        wallet.defaultOntid = obj.defaultOntid;\n        wallet.defaultAccountAddress = obj.defaultAccountAddress;\n        wallet.createTime = obj.createTime;\n        wallet.version = obj.version;\n        wallet.scrypt = obj.scrypt;\n        wallet.identities = obj.identities && (obj.identities as any[]).map((i) => Identity.parseJsonObj(i));\n        wallet.accounts = obj.accounts && (obj.accounts as any[]).map((a) => Account.parseJsonObj(a));\n        wallet.extra = obj.extra;\n        return wallet;\n    }\n\n    static fromWalletFile(obj: any): Wallet {\n        const wallet = Wallet.parseJsonObj(obj);\n        return wallet;\n    }\n\n    /**\n     * @example\n     * ```typescript\n     *\n     * import { Wallet } from 'ontology-ts-sdk';\n     * const wallet = Wallet.create('test');\n     * ```\n     *\n     * @param name Wallet's name\n     */\n    static create(name: string): Wallet {\n        const wallet = new Wallet();\n        wallet.name = name;\n\n        // createtime\n        wallet.createTime = (new Date()).toISOString();\n        wallet.version = '1.0';\n        wallet.scrypt = {\n            n: DEFAULT_SCRYPT.cost,\n            r: DEFAULT_SCRYPT.blockSize,\n            p: DEFAULT_SCRYPT.parallel,\n            dkLen: DEFAULT_SCRYPT.size\n        };\n\n        return wallet;\n    }\n\n    name: string;\n    defaultOntid: string = '';\n    defaultAccountAddress: string = '';\n    createTime: string;\n    version: string;\n    scrypt: {\n        n: number;\n        r: number;\n        p: number;\n        dkLen: number;\n    };\n    identities: Identity[] = [];\n    accounts: Account[] = [];\n    extra: null;\n\n    addAccount(account: Account): void {\n        for (const ac of this.accounts) {\n            if (ac.address.toBase58() === account.address.toBase58()) {\n                return;\n            }\n        }\n        this.accounts.push(account);\n    }\n\n    addIdentity(identity: Identity): void {\n        for (const item of this.identities) {\n            if (item.ontid === identity.ontid) {\n                return;\n            }\n        }\n        this.identities.push(identity);\n    }\n\n    setDefaultAccount(address: string): void {\n        this.defaultAccountAddress = address;\n    }\n\n    setDefaultIdentity(ontid: string): void {\n        this.defaultOntid = ontid;\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.toJsonObj());\n    }\n\n    /**\n     * Serializes to JSON object.\n     *\n     * Returned object will not be stringified.\n     *\n     */\n    toJsonObj(): any {\n        const obj = {\n            name: this.name,\n            defaultOntid: this.defaultOntid,\n            defaultAccountAddress: this.defaultAccountAddress,\n            createTime: this.createTime,\n            version: this.version,\n            scrypt: this.scrypt,\n            identities: this.identities.map((i) => i.toJsonObj()),\n            accounts: this.accounts.map((a) => a.toJsonObj()),\n            extra: null\n        };\n\n        return obj;\n    }\n\n    signatureData(): string {\n        return '';\n    }\n\n    /*\n    *generate a wallet file that is compatible with cli wallet.\n    */\n    toWalletFile(): any {\n        const obj = this.toJsonObj();\n        return obj;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport * as Long from 'long';\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { bigIntToBytes, str2hexstr } from '../../utils';\nimport { Parameter, ParameterType } from '../abi/parameter';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\n\nconst functionNames = {\n    Init: 'init',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    TransferFromm: 'transferFrom',\n    Allowance: 'allowance',\n    BalanceOf: 'balanceOf',\n    TotalSupply: 'totalSupply',\n    Symbol: 'symbol',\n    Decimals: 'decimals',\n    Name: 'name'\n};\n\nexport const formatBigNumParameter = (amount: string): Parameter => {\n    // let val = new BigNumber(amount).toString(16);\n    // if (val.length % 2 === 1) {\n    //     val = '0' + val;\n    // }\n    // const valHex = reverseHex(val);\n    const valHex = bigIntToBytes(Long.fromString(amount));\n    const p = new Parameter('value', ParameterType.ByteArray, valHex);\n    return p;\n};\n\nexport class Oep4State  {\n    from: string;\n    to: string;\n    amount: string;\n\n    constructor(from: Address, to: Address, amount: string) {\n        this.from = from.serialize();\n        this.to = to.serialize();\n        this.amount = formatBigNumParameter(amount).value;\n    }\n}\n/**\n * Transaction builder for oep-4 contracts\n */\nexport class Oep4TxBuilder {\n\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    /**\n     * Init the oep-4 smart contract\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer's address to pay for gas\n     */\n    init(gasPrice: string, gasLimit: string, payer?: Address): Transaction {\n        const funcName = functionNames.Init;\n        return makeInvokeTransaction(funcName, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for transfer\n     * @param from Sender's address\n     * @param to Receiver's address\n     * @param amount Amountof asset to transfer\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer's address to pay for gas\n     */\n    makeTransferTx(\n        from: Address,\n        to: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.Transfer;\n        const p1 = new Parameter('from', ParameterType.ByteArray, from.serialize());\n        const p2 = new Parameter('to', ParameterType.ByteArray, to.serialize());\n        const p3 = formatBigNumParameter(amount);\n        return makeInvokeTransaction(funcName, [p1, p2, p3], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for multi transfer.\n     * The transaction needs signatures of each sender in states and the signature of the payer.\n     * @param states Array of State(sender, receiver, amount)\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeTransferMultiTx(\n        states: Oep4State[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(functionNames.TransferMulti));\n        const temp = [];\n        for (const state of states) {\n            temp.push([\n                state.from,\n                state.to,\n                state.amount\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Make transaction for approve\n     * @param owner Owner's address\n     * @param spender Spender's address\n     * @param amount Amount\n     * @param gasPrice Gas price\n     * @param gasLimit Gas limit\n     * @param payer Payer to pay for gas\n     */\n    makeApproveTx(\n        owner: Address,\n        spender: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.Approve;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\n            formatBigNumParameter(amount)\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeTransferFromTx(\n        sender: Address,\n        from: Address,\n        to: Address,\n        amount: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const funcName = functionNames.TransferFromm;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, sender.serialize()),\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\n            formatBigNumParameter(amount)\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryAllowanceTx(\n        owner: Address,\n        spender: Address\n    ): Transaction {\n        const funcName = functionNames.Allowance;\n        const params = [\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize())\n        ];\n        return makeInvokeTransaction(funcName, params, this.contractAddr);\n    }\n\n    /**\n     * Query the balance\n     * @param address Address to query balance\n     */\n    queryBalanceOf(address: Address): Transaction {\n        const funcName = functionNames.BalanceOf;\n        const p1 = new Parameter('from', ParameterType.ByteArray, address.serialize());\n\n        return makeInvokeTransaction(funcName, [p1], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryTotalSupply(): Transaction {\n        const funcName = functionNames.TotalSupply;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryDecimals(): Transaction {\n        const funcName = functionNames.Decimals;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    querySymbol(): Transaction {\n        const funcName = functionNames.Symbol;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n\n    /**\n     * Query the total supply of oep-4 contract\n     */\n    queryName(): Transaction {\n        const funcName = functionNames.Name;\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/*\n********************************* Notice ********************************************\n*************************************************************************************\n* All the methods in this file is only for our native app development!!!\n* We do not recommend you to use these methods directly.\n* You can refer to these methods or the test cases to implement the same methods.\n*************************************************************************************\n*************************************************************************************\n*/\nimport axios from 'axios';\nimport * as bip39 from 'bip39';\nimport { Account } from '../account';\nimport { Claim } from '../claim/claim';\nimport { HTTP_REST_PORT, HTTP_WS_PORT, ONT_BIP44_PATH, REST_API, TEST_NODE } from '../consts';\nimport { Address, PgpSignature, PrivateKey, PublicKey } from '../crypto';\nimport { ERROR_CODE } from '../error';\nimport { Identity } from '../identity';\nimport { NeoRpc } from '../neocore/NeoRpc';\nimport { Program } from '../neocore/Program';\nimport { SmartContract } from '../neocore/SmartContract';\nimport RestClient from '../network/rest/restClient';\nimport { WebsocketClient } from '../network/websocket/websocketClient';\nimport * as scrypt from '../scrypt';\nimport { ScryptParams } from '../scrypt';\nimport AbiInfo from '../smartcontract/abi/abiInfo';\nimport { Parameter } from '../smartcontract/abi/parameter';\nimport { makeTransferTx, makeWithdrawOngTx, ONT_CONTRACT } from '../smartcontract/nativevm/ontAssetTxBuilder';\nimport { buildAddAttributeTx, buildGetDDOTx, buildRegisterOntidTx\n} from '../smartcontract/nativevm/ontidContractTxBuilder';\nimport { Oep8TxBuilder } from '../smartcontract/neovm/oep8TxBuilder';\nimport { DDOAttribute } from '../transaction/ddo';\nimport { Transaction } from '../transaction/transaction';\nimport {\n    buildRestfulParam,\n    sendRawTxRestfulUrl,\n    signTransaction,\n    signTx\n} from '../transaction/transactionBuilder';\nimport { generateMnemonic, hexstr2str, isBase64, isHexString, now, reverseHex,\n    sendBackResult2Native, str2hexstr, StringReader } from '../utils';\nimport { Wallet } from '../wallet';\nimport { Ecies } from './../crypto/Ecies';\nimport { ParameterType } from './../smartcontract/abi/parameter';\nimport { Oep4TxBuilder } from './../smartcontract/neovm/oep4TxBuilder';\n\n// tslint:disable-next-line:no-var-requires\nconst HDKey = require('@ont-community/hdkey-secp256r1');\n\n// tslint:disable:no-unused-expression\n// tslint:disable:no-shadowed-variable\n\n// neo contract\nconst CONTRACT_HASH = 'ceab719b8baa2310f232ee0d277c061704541cfb';\n// neo node\nconst NEO_NODE = 'http://neonode1.ont.network:10332';\n// neo abi\n// tslint:disable-next-line:max-line-length\nconst NEP5_ABI = '{\"hash\":\"0x5bb169f915c916a5e30a3c13a5e0cd228ea26826\",\"entrypoint\":\"Main\",\"functions\":[{\"name\":\"Name\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Symbol\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Decimals\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"String\"},{\"name\":\"args\",\"type\":\"Array\"}],\"returntype\":\"Any\"},{\"name\":\"Init\",\"parameters\":[],\"returntype\":\"Boolean\"},{\"name\":\"TotalSupply\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"ByteArray\"},{\"name\":\"to\",\"type\":\"ByteArray\"},{\"name\":\"value\",\"type\":\"Integer\"}],\"returntype\":\"Boolean\"},{\"name\":\"BalanceOf\",\"parameters\":[{\"name\":\"address\",\"type\":\"ByteArray\"}],\"returntype\":\"Integer\"}],\"events\":[{\"name\":\"transfer\",\"parameters\":[{\"name\":\"arg1\",\"type\":\"ByteArray\"},{\"name\":\"arg2\",\"type\":\"ByteArray\"},{\"name\":\"arg3\",\"type\":\"Integer\"}],\"returntype\":\"Void\"}]}';\n// neo swap address\n// const RECEIVER_ADDR = 'AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM';\n\nconst NEO_TRAN = 100000000;\n\nexport class SDK {\n    static SERVER_NODE: string = TEST_NODE;\n    static REST_PORT: string = HTTP_REST_PORT;\n    static SOCKET_PORT: string = HTTP_WS_PORT;\n    static restClient: RestClient = new RestClient();\n    static socketClient: WebsocketClient = new WebsocketClient();\n\n    static setServerNode(node: string) {\n        if (node) {\n            let url = '';\n            if (node.indexOf('http') > -1) {\n                url = node.substr('http://'.length);\n            } else {\n                url = node;\n            }\n            SDK.SERVER_NODE = url;\n            return;\n        }\n\n        throw new Error('Can not set ' + node + 'as server node');\n    }\n\n    static setRestPort(port: string) {\n        if (port) {\n            SDK.REST_PORT = port;\n            SDK.restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n            return;\n        }\n\n        throw new Error('Can not set ' + port + ' as restful port');\n    }\n\n    static setSocketPort(port: string) {\n        if (port) {\n            SDK.SOCKET_PORT = port;\n            SDK.socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\n            return;\n        }\n        throw new Error('Can not set ' + port + 'as socket port');\n    }\n\n    static getDecryptError(err: any) {\n        return {\n            error: ERROR_CODE.Decrypto_ERROR,\n            result: ''\n        };\n    }\n\n    static transformPassword(password: string) {\n        if (isBase64(password)) {\n            return Buffer.from(password, 'base64').toString();\n        }\n        return password;\n    }\n\n    static createWallet(name: string,\n                        password: string, payer: string, gasPrice: string, gasLimit: string, callback?: string) {\n        const wallet = Wallet.create(name);\n        password = this.transformPassword(password);\n        const privateKey = PrivateKey.random();\n        const identity = Identity.create(privateKey, password, name);\n\n        wallet.defaultOntid = identity.ontid;\n        wallet.addIdentity(identity);\n\n        // let account = new Account()\n        // account.create(privateKey, password, name)\n        // wallet.addAccount(account)\n\n        const walletDataStr = wallet.toJson();\n        let obj: any = {\n            error: 0,\n            result: walletDataStr,\n            tx : ''\n        };\n\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        // add preExec\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            // preExec success, send real request\n            if (res.Result.Result === '01') {\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                obj.tx = tx.serialize();\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            } else {\n                const errResult = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\n                }\n                return errResult;\n            }\n        }).catch((err: any) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static importIdentityWithPrivateKey(\n        label: string = '',\n        privateKey: string,\n        password: string,\n        callback?: string\n    ) {\n        privateKey = privateKey.trim();\n        password = this.transformPassword(password);\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        let obj: any;\n        const pri = new PrivateKey(privateKey);\n        const identity = Identity.create(pri, password, label);\n        obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: identity.toJson()\n        };\n        const tx = buildGetDDOTx(identity.ontid);\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = res.Result;\n            if (result.Result) {\n                //\n            } else {\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                obj.result = '';\n            }\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static importIdentityWithWif(\n        label: string = '',\n        wif: string,\n        password: string,\n        callback?: string\n    ) {\n        wif = wif.trim();\n        password = this.transformPassword(password);\n        let obj: any;\n        let pri: PrivateKey;\n        try {\n            pri = PrivateKey.deserializeWIF(wif);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const identity = Identity.create(pri, password, label);\n        obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: identity.toJson()\n        };\n        const tx = buildGetDDOTx(identity.ontid);\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = res.Result;\n            if (result.Result) {\n                //\n            } else {\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                obj.result = '';\n            }\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static importIdentityWithWifOffChain(\n        label: string = '',\n        wif: string,\n        password: string,\n        callback?: string\n    ) {\n        wif = wif.trim();\n        password = this.transformPassword(password);\n        let obj: any;\n        let pri: PrivateKey;\n        try {\n            pri = PrivateKey.deserializeWIF(wif);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const identity = Identity.create(pri, password, label);\n        obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: identity.toJson()\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        return obj;\n    }\n\n    static importIdentityWithWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        let obj: any;\n        let identity = new Identity();\n        try {\n            // TODO check ontid\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n            const addr = new Address(address);\n            password = this.transformPassword(password);\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\n        } catch (err) {\n            obj  = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }\n        obj = {\n            error : ERROR_CODE.SUCCESS,\n            result : identity.toJson()\n        };\n        // check ontid on chain\n        const tx = buildGetDDOTx(identity.ontid);\n        const param = buildRestfulParam(tx);\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\n        const url = sendRawTxRestfulUrl(restUrl, true);\n        // clear privateKey and password\n        password = '';\n        return axios.post(url, param).then((res: any) => {\n            const result = res.data.Result;\n            if (result.Result) {\n                //\n            } else {\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                obj.result = '';\n            }\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result : ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    // send http post to check\n    static importIdentityAndCreateWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        let identity = new Identity();\n        let error = {};\n        let obj: any;\n        try {\n            password = this.transformPassword(password);\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n            const addr = new Address(address);\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\n            const wallet = Wallet.create(identity.label);\n            wallet.defaultOntid = identity.ontid;\n            wallet.addIdentity(identity);\n            const walletStr = wallet.toJson();\n            obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: walletStr\n            };\n            // check ontid on chain\n            const tx = buildGetDDOTx(identity.ontid);\n            const param = buildRestfulParam(tx);\n            const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\n            const url = sendRawTxRestfulUrl(restUrl, true);\n            return axios.post(url, param).then((res: any) => {\n                const result = res.data.Result;\n                if (result.Result) {\n                    //\n                } else {\n                    obj.error = ERROR_CODE.UNKNOWN_ONTID;\n                    obj.result = '';\n                }\n                // clear privateKey and password\n                password = '';\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }).catch((err) => {\n                obj = {\n                    error: ERROR_CODE.NETWORK_ERROR,\n                    result : ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n            });\n            // callback && sendBackResult2Native(JSON.stringify(obj), callback)\n            // return obj\n        } catch (err) {\n            error = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(error), callback);\n            }\n            return Promise.reject(error);\n        }\n    }\n\n    static createIdentity(label: string, password: string, payer: string,\n                          gasPrice: string, gasLimit: string, callback?: string) {\n        const privateKey = PrivateKey.random();\n        password = this.transformPassword(password);\n        const identity = Identity.create(privateKey, password, label);\n        const result = identity.toJson();\n        let obj: any = {\n            error: ERROR_CODE.SUCCESS,\n            result,\n            tx : ''\n        };\n        // register ontid\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        password = '';\n        privateKey.key = '';\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            // preExec success, send real request\n            if (res.Result.Result === '01') {\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                obj.tx = tx.serialize();\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                privateKey.key = '';\n                password = '';\n                return obj;\n            } else {\n                const errResult = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\n                }\n                return errResult;\n            }\n        }).catch((err: any) => {\n            obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static createAccount(label: string, password: string, callback?: string) {\n        // generate mnemnic\n        let mnemonic = generateMnemonic();\n        password = this.transformPassword(password);\n        const mnemonicHex = str2hexstr(mnemonic);\n        const privateKey = PrivateKey.generateFromMnemonic(mnemonic);\n        const account = Account.create(privateKey, password, label);\n        const addr = account.address;\n        const salt = Buffer.from(account.salt, 'base64').toString('hex');\n        const mnemonicEnc = scrypt.encryptWithGcm(mnemonicHex, addr, salt, password);\n        const result = account.toJson();\n        const obj = {\n            error : ERROR_CODE.SUCCESS,\n            result,\n            mnemonicEnc\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        mnemonic = '';\n        return obj;\n    }\n\n    static decryptMnemonicEnc(mnemonicEnc: string,\n                              address: string, salt: string, password: string, callback?: string) {\n        let obj;\n        password = this.transformPassword(password);\n        const addr = new Address(address);\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\n        const decMneHex = scrypt.decryptWithGcm(mnemonicEnc, addr, saltHex, password);\n        const decMne = hexstr2str(decMneHex);\n        obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: decMne\n        };\n        // tslint:disable-next-line:no-unused-expression\n        callback && sendBackResult2Native(JSON.stringify(obj), callback);\n        return obj;\n    }\n\n    static importAccountWithWallet(\n        label: string,\n        encryptedPrivateKey: string,\n        address: string,\n        salt: string,\n        password: string,\n        callback?: string\n    ) {\n        let account = new Account();\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            account = Account.importAccount(label, encryptedPrivateKeyObj, password, addr, salt);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const obj = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        // add address check\n        if (address !== account.address.toBase58()) {\n            obj.error = ERROR_CODE.INVALID_ADDR,\n            obj.result = '';\n        }\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        password = '';\n        return obj;\n    }\n\n    static signSelfClaim(\n        context: string,\n        claimData: string,\n        ontid: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    )  {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.sendRawTx}`;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        // const claimDataObj = JSON.parse(claimData);\n        const metadata = {\n            issuer: ontid,\n            subject: ontid,\n            issuedAt: now()\n        };\n\n        // todo: pass real public key id\n        const publicKeyId = ontid + '#keys-1';\n        const claim = new Claim(metadata, undefined, undefined);\n        claim.sign(restUrl, publicKeyId, privateKey);\n        const obj = {\n            error : 0,\n            result : claim\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return obj;\n    }\n\n    static decryptEncryptedPrivateKey(\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ) {\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let pri;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const obj = {\n            error : 0,\n            result : pri.key\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        password = '';\n        return obj;\n    }\n\n    static getClaim(\n        claimId: string,\n        context: string,\n        issuer: string,\n        subject: string,\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        payer: string,\n        gasPrice: string,\n        gasLimit: string,\n        callback ?: string\n    ) {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n\n            return result;\n        }\n        const path = 'claim' + claimId;\n        const valueObj = {\n            Type : 'JSON',\n            Value : {\n                Context: context,\n                Issuer: issuer\n            }\n        };\n        // const type = 'JSON';\n        const value = JSON.stringify(valueObj);\n        const attr = new DDOAttribute();\n        attr.key = path;\n        attr.type = 'JSON';\n        attr.value = value;\n        const publicKey = privateKey.getPublicKey();\n        const tx = buildAddAttributeTx(subject, [attr], publicKey, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            if (res.Result.Result === '01') {\n                // user agent will do this\n                // restClient.sendRawTransaction(tx.serialize(), false)\n                // const hash = sha256(sha256(tx.serializeUnsignedData()))\n                const obj = {\n                    error: ERROR_CODE.SUCCESS,\n                    result: '',\n                    tx: tx.serialize()\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                privateKey.key = '';\n                password = '';\n                return obj;\n            } else {\n                const obj = {\n                    error: ERROR_CODE.PreExec_ERROR,\n                    result: ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }\n        }\n        ).catch((err: any) => {\n            const obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n        });\n    }\n\n    static signData(\n        content: string, // hex string\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        callback?: string\n    ): PgpSignature | object {\n        let privateKey: PrivateKey;\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let result;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const signature = privateKey.sign(content);\n        result = signature.serializePgp();\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static getBalance(address: string, callback?: string) {\n        const addressObj = new Address(address);\n        const request = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.getBalance}/${addressObj.toBase58()}`;\n        return axios.get(request).then((res: any) => {\n            if (res.data.Error === 0) {\n                const result = res.data.Result;\n                const obj = {\n                    error : 0,\n                    result\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            } else {\n                const obj = {\n                    error: res.data.Error,\n                    result : ''\n                };\n\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                return obj;\n            }\n        }).catch( (err: any) => {\n            const obj = {\n                error: ERROR_CODE.NETWORK_ERROR,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return Promise.reject(obj);\n        });\n    }\n\n    // pls check balance before transfer\n    static transferAssets(\n        token: string,\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string) {\n\n        let fromAddress: Address;\n        let toAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error : ERROR_CODE.INVALID_PARAMS,\n                result : ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        const tx = makeTransferTx(token, fromAddress, toAddress, value, gasPrice, gasLimit);\n        tx.payer = new Address(payer);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static claimOng(\n        address: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string\n    ) {\n        let addressObj: Address;\n        password = this.transformPassword(password);\n        try {\n            addressObj = new Address(address);\n\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addressObj, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n\n        const tx = makeWithdrawOngTx(addressObj, addressObj, value, new Address(payer), gasPrice, gasLimit);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static exportIdentityToQrcode(identityDataStr: string, callback?: string) {\n        const obj = Identity.parseJson(identityDataStr);\n        let salt = obj.controls[0].salt;\n        if (!isBase64(salt)) {\n            salt = Buffer.from(salt, 'hex').toString('base64');\n        }\n        const result = {\n            type : 'I',\n            label : obj.label,\n            algorithm : 'ECDSA',\n            scrypt : {\n                n : 4096,\n                p : 8,\n                r : 8,\n                dkLen : 64\n            },\n            key : obj.controls[0].encryptedKey.key,\n            salt,\n            address: obj.controls[0].address.toBase58(),\n            parameters : {\n                curve : 'secp256r1'\n            }\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportIdentityToKeystring(identityDataStr: string, callback?: string) {\n        const obj = Identity.parseJson(identityDataStr);\n        const address = obj.controls[0].address.toBase58();\n        const salt = obj.controls[0].salt;\n        const key = obj.controls[0].encryptedKey.key;\n        const result = salt + address + key;\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportAccountToQrcode(accountDataStr: string, callback?: string) {\n        const obj = Account.parseJson(accountDataStr);\n        const result = {\n            type: 'A',\n            label: obj.label,\n            algorithm: 'ECDSA',\n            scrypt: {\n                n: 4096,\n                p: 8,\n                r: 8,\n                dkLen: 64\n            },\n            key: obj.encryptedKey.key,\n            salt: obj.salt,\n            address: obj.address.toBase58(),\n            parameters: {\n                curve: 'secp256r1'\n            }\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static exportAccountToKeystring(accountDataStr: string, callback?: string) {\n        const obj = Account.parseJson(accountDataStr);\n        const salt = obj.salt;\n        const address = obj.address.toBase58();\n        const key = obj.encryptedKey.key;\n        const result = salt + address + key;\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return result;\n    }\n\n    static importAccountMnemonic(label: string, mnemonic: string, password: string, callback?: string) {\n        mnemonic = mnemonic.trim();\n        password = this.transformPassword(password);\n        if (!bip39.validateMnemonic(mnemonic)) {\n            // tslint:disable-next-line:no-shadowed-variable\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            // tslint:disable-next-line:no-unused-expression\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\n        const pri = hdkey.derive(ONT_BIP44_PATH);\n        const key = Buffer.from(pri.privateKey).toString('hex');\n        const privateKey = new PrivateKey(key);\n        const account = Account.create(privateKey, password, label);\n        const result = account.toJson();\n        const obj = {\n            error: ERROR_CODE.SUCCESS,\n            result\n        };\n\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        mnemonic = '';\n        return obj;\n    }\n\n    static exportWifPrivakeKey(encryptedKey: string, password: string,\n                               address: string, salt: string, callback?: string) {\n        if (address.length !== 34 && address.length !== 40) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        password = this.transformPassword(password);\n        const encrypt = new PrivateKey(encryptedKey);\n        const addr = new Address(address);\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\n        const privateKey = encrypt.decrypt(password, addr, saltHex);\n        let wif = privateKey.serializeWIF();\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: {\n                wif,\n                privateKey: privateKey.key\n            }\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        wif = '';\n        password = '';\n        return result;\n    }\n\n    static importAccountWithWif(label: string, wif: string, password: string, callback?: string) {\n        let privateKey;\n        password = this.transformPassword(password);\n        try {\n            privateKey = PrivateKey.deserializeWIF(wif);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const account = Account.create(privateKey, password, label);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static importAccountWithPrivateKey(label: string, privateKey: string, password: string, callback?: string) {\n        privateKey = privateKey.trim();\n        password = this.transformPassword(password);\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        const pri = new PrivateKey(privateKey);\n        const account = Account.create(pri, password, label);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: account.toJson()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey = '';\n        password = '';\n        return result;\n    }\n\n    /**\n     * Actually import with Qrcode\n     */\n    static importAccountWithKeystore(keystore: string, password: string, callback?: string) {\n        let keyStoreObj;\n        password = this.transformPassword(password);\n        try {\n            keyStoreObj = JSON.parse(keystore);\n        } catch (err) {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        }\n        if (keyStoreObj.type !== 'A') {\n            const obj = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\n            return obj;\n        } else {\n            let account = new Account();\n            const encryptedPrivateKeyObj = new PrivateKey(keyStoreObj.key);\n            try {\n                const params = {\n                    cost: keyStoreObj.scrypt.n || 4096,\n                    blockSize: keyStoreObj.scrypt.p || 8,\n                    parallel: keyStoreObj.scrypt.r || 8,\n                    size: keyStoreObj.scrypt.dkLen || 64\n                };\n                const addr = new Address(keyStoreObj.address);\n                account = Account.importAccount(\n                    keyStoreObj.label, encryptedPrivateKeyObj, password, addr, keyStoreObj.salt, params);\n                const obj = {\n                    error: ERROR_CODE.SUCCESS,\n                    result: account.toJson()\n                };\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(obj), callback);\n                }\n                // clear privateKey and password\n                password = '';\n                return obj;\n            } catch (err) {\n                const result = this.getDecryptError(err);\n                if (callback) {\n                    sendBackResult2Native(JSON.stringify(result), callback);\n                }\n                return result;\n            }\n        }\n    }\n\n    static getUnclaimedOng(address: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.getAllowance('ong', new Address(ONT_CONTRACT), new Address(address)).then((res) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: res.Result\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static querySmartCodeEventByTxhash(txHash: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.getSmartCodeEvent(txHash).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static createSharedWallet(requiredSignatureNum: string, allRelatedPks: string, callback?: string) {\n        const M  = parseInt(requiredSignatureNum, 10);\n        let pks = [];\n        let pubs = [];\n        let error = ERROR_CODE.SUCCESS;\n        try {\n            pks = JSON.parse(allRelatedPks);\n            pubs = pks.map((p: string) => PublicKey.deserializeHex(new StringReader(p)));\n        } catch (err) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        if (M < 2 || pks.length < M || pks.length > 12) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        let address = '';\n        try {\n            address = Address.fromMultiPubKeys(M, pubs).toBase58();\n        } catch (err) {\n            error = ERROR_CODE.INVALID_PARAMS;\n        }\n        if (callback) {\n            const result = {\n                error,\n                result: address\n            };\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return address;\n    }\n\n    static adderssFromPublicKey(publicKey: string, callback?: string) {\n        const pk = PublicKey.deserializeHex(new StringReader(publicKey));\n        const address = Address.fromPubKey(pk).toBase58();\n        const result = {\n            error : ERROR_CODE.SUCCESS,\n            result: address\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(result), callback);\n        }\n        return address;\n    }\n\n    static makeMultiSignTransaction(asset: string, from: string, to: string, amount: string, gasPrice: string,\n                                    gasLimit: string, callback?: string) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const tx = makeTransferTx(asset, fromAddress, toAddress, amount, gasPrice, gasLimit);\n        tx.payer = fromAddress;\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            txHash: reverseHex(tx.getSignContent()),\n            txData: tx.serialize()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        return result;\n    }\n\n    static signMultiAddrTransaction(\n        encryptedPrivateKey: string,\n        address: string,\n        salt: string,\n        password: string,\n        allRelatedPks: string,\n        requiredSignatureNum: string,\n        txDada: string,\n        callback?: string) {\n        password = this.transformPassword(password);\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const M = parseInt(requiredSignatureNum, 10);\n        const tx = Transaction.deserialize(txDada);\n        const pubs = JSON.parse(allRelatedPks);\n        const pks = pubs.map((p: string) => new PublicKey(p));\n        signTx(tx, M, pks, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            signedHash: tx.serialize()\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        return tx;\n    }\n\n    /**\n     * Neo transfer\n     */\n    static neoTransfer(\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        callback?: string,\n        params ?: ScryptParams\n    ) {\n        password = this.transformPassword(password);\n        const recv = new Address(to);\n        const addr = new Address(from);\n        const abiInfo = AbiInfo.parseJson(NEP5_ABI);\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\n        const amount = parseInt(value, 10);\n        const func = abiInfo.getFunction('Transfer');\n        func.name = func.name.toLowerCase();\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex, params);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const p1 = new Parameter('from', ParameterType.ByteArray, addr.serialize());\n        const p2 = new Parameter('to', ParameterType.ByteArray, recv.serialize());\n        const p3 = new Parameter('value', ParameterType.Integer, amount * NEO_TRAN);\n        func.setParamsValue(p1, p2, p3);\n        const tx = SmartContract.makeInvokeTransaction(contractAddr, addr, func);\n        const p = new Program();\n        p.parameter = Program.programFromParams([tx.sign(privateKey)]);\n        p.code = Program.programFromPubKey(privateKey.getPublicKey());\n        tx.scripts = [p];\n\n        return NeoRpc.sendRawTransaction(NEO_NODE, tx.serialize()).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: ''\n            };\n            if (res.result) {\n                result.result = reverseHex(tx.getHash());\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\n            } else {\n                result.error = ERROR_CODE.NETWORK_ERROR;\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static getNeoBalance(address: string, callback?: string) {\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\n        const addr = new Address(address);\n        return NeoRpc.getBalance(NEO_NODE, contractAddr, addr).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.result) {\n                const balance = parseInt(reverseHex(res.result), 16);\n                result.result = balance;\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static sendTransaction(txData: string, callback?: string) {\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\n        return restClient.sendRawTransaction(txData).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    static sendTransactionWithWebsocket(txData: string, callback?: string) {\n        const socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\n        return socketClient.sendRawTransaction(txData, false, true).then((res) => {\n            const obj = {\n                error: ERROR_CODE.SUCCESS,\n                result: res\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(obj), callback);\n            }\n            return obj;\n        }).catch((err) => {\n            const result = {\n                error: err.Error,\n                result: ''\n            };\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        });\n    }\n\n    // ope8 apis for ONTO\n    static queryOep8Balance(\n        contractHash: string,\n        account: string,\n        tokenId: number,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryBalanceOfTx(addr, tokenId);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static queryOep8Balances(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryBalancesTx(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: [0, 0, 0, 0, 0, 0, 0, 0]\n            };\n            if (res.Result.Result) {\n                const vals = res.Result.Result.map((v: string) => v ? parseInt(reverseHex(v), 16) : 0);\n                result.result = vals;\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static queryOep8TotalBalance(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep8.makeQueryTotalBalanceTx(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static transferOep8(\n        contractHash: string,\n        from: string,\n        to: string,\n        value: string,\n        tokenId: number,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback?: string\n    ) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        let payerAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n            payerAddress = new Address(payer);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const tx = oep8.makeTransferTx(fromAddress, toAddress, tokenId, value, gasPrice, gasLimit, payerAddress);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static compoundOep8(\n        contractHash: string,\n        account: string,\n        compoundNum: number,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        payer: string,\n        callback: string\n    ) {\n        let addr: Address;\n        password = this.transformPassword(password);\n        try {\n            addr = new Address(account);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep8 = new Oep8TxBuilder(contractAddr);\n        const tx = oep8.makeCompoundTx(addr, compoundNum, gasPrice, gasLimit, addr);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    // ope4 apis for ONTO\n    static queryOep4Balance(\n        contractHash: string,\n        account: string,\n        callback?: string\n    ) {\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep4 = new Oep4TxBuilder(contractAddr);\n        const addr = new Address(account);\n        const tx = oep4.queryBalanceOf(addr);\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\n            const result = {\n                error: ERROR_CODE.SUCCESS,\n                result: 0\n            };\n            if (res.Result.Result) {\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\n            }\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\n            return result;\n        });\n    }\n\n    static transferOep4(\n        contractHash: string,\n        from: string,\n        to: string,\n        value: string,\n        encryptedPrivateKey: string,\n        password: string,\n        salt: string,\n        gasPrice: string,\n        gasLimit: string,\n        callback?: string\n    ) {\n        let fromAddress: Address;\n        let toAddress: Address;\n        password = this.transformPassword(password);\n        try {\n            fromAddress = new Address(from);\n            toAddress = new Address(to);\n        } catch (err) {\n            const result = {\n                error: ERROR_CODE.INVALID_PARAMS,\n                result: ''\n            };\n            return result;\n        }\n\n        let privateKey: PrivateKey;\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        try {\n            const addr = new Address(from);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n            return result;\n        }\n        const contractAddr = new Address(reverseHex(contractHash));\n        const oep4 = new Oep4TxBuilder(contractAddr);\n        const tx = oep4.makeTransferTx(fromAddress, toAddress, value, gasPrice, gasLimit, fromAddress);\n        signTransaction(tx, privateKey);\n        const result = {\n            error: ERROR_CODE.SUCCESS,\n            result: '',\n            tx: tx.serialize(),\n            txHash: reverseHex(tx.getSignContent())\n        };\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\n        // clear privateKey and password\n        privateKey.key = '';\n        password = '';\n        return result;\n    }\n\n    static eciesDecrypt(\n        encryptedPrivateKey: string,\n        password: string,\n        address: string,\n        salt: string,\n        cipher: string,\n        callback?: string\n    ) {\n        password = this.transformPassword(password);\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\n        let pri;\n        try {\n            const addr = new Address(address);\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\n        } catch (err) {\n            const result = this.getDecryptError(err);\n\n            if (callback) {\n                sendBackResult2Native(JSON.stringify(result), callback);\n            }\n            return result;\n        }\n        const ins = new Ecies();\n        const cipherContent = cipher.split('.');\n        ins.setKeyPair(pri.key);\n        const plainBuffer = ins.dec(\n            cipherContent[0],\n            cipherContent[1],\n            cipherContent[2],\n            32\n        );\n\n        const plain = plainBuffer.toString('utf8');\n        const obj = {\n            error: 0,\n            result: plain\n        };\n        if (callback) {\n            sendBackResult2Native(JSON.stringify(obj), callback);\n        }\n        return obj;\n    }\n\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport BigInt from '../../common/bigInt';\nimport { GENESIS_BLOCK_TIMESTAMP } from '../../consts';\nimport { Address } from '../../crypto';\nimport { ERROR_CODE } from '../../error';\nimport RestClient from '../../network/rest/restClient';\nimport { Transaction } from '../../transaction/transaction';\nimport { makeNativeContractTx } from '../../transaction/transactionUtils';\nimport { calcUnboundOng, hex2VarBytes, hexstr2str,\n    num2hexstring, str2hexstr, str2VarBytes, StringReader, varifyPositiveInt } from '../../utils';\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\nimport Struct from '../abi/struct';\n\nconst GOVERNANCE_CONTRACT = '0000000000000000000000000000000000000007';\nconst PEER_ATTRIBUTES = 'peerAttributes';\nconst SPLIT_FEE_ADDRESS = 'splitFeeAddress';\nconst AUTHORIZE_INFO_POOL = 'voteInfoPool';\nconst GLOBAL_PARAM = 'globalParam';\nconst TOTAL_STAKE = 'totalStake';\nconst contractAddress = new Address(GOVERNANCE_CONTRACT);\n\n/* TODO: Test */\n\n// tslint:disable:no-console\n\n/**\n * Register to be candidate node.\n * This tx needs signatures from userAddr and payer if these two address are not the same.\n * @param ontid user's ONT ID, must be assigned with the role.\n * @param peerPubKey public key of user's peer\n * @param userAddr user's address to pledge ONT&ONG. This address must have enough ONT & ONG.\n * @param keyNo user's pk id\n * @param initPos Initial state\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeRegisterCandidateTx(\n    ontid: string,\n    peerPubKey: string,\n    keyNo: number,\n    userAddr: Address,\n    initPos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    varifyPositiveInt(initPos);\n    if (ontid.substr(0, 3) === 'did') {\n        ontid = str2hexstr(ontid);\n    }\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), initPos, ontid, keyNo);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('registerCandidate', params, contractAddress,\n                                     gasPrice, gasLimit, payer);\n}\n\n/**\n *\n * @param userAddr User's address to pledge ONT&ONG.\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeUnregisterCandidateTx(\n    userAddr: Address,\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unRegisterCandidate', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to approve candidate\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeApproveCandidateTx(\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey));\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('approveCandidate', params, contractAddress,\n                                     gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to reject candidate\n * @param peerPubKey Public key of user's peer\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeRejectCandidateTx(\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey));\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('rejectCandidate', params, contractAddress,\n        gasPrice, gasLimit, payer);\n}\n\n/**\n * Creates transaction to vote for some peers.\n * Can only vote for peers that with status 1 or 2\n * This tx needs signatures from userAddr and payer if these two address are not the same.\n * @param userAddr User's address\n * @param peerPubKeys Public keys of peers that to be voted\n * @param posList Array of token that to vote\n * @param payer Address to pay for transaction's gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeVoteForPeerTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== posList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const n of posList) {\n        struct.add(n);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('voteForPeer', params, contractAddress,\n       gasPrice, gasLimit, payer);\n}\n\n/**\n * User unvotes peer nodes\n * @param userAddr user's address\n * @param peerPubKeys peer's pks\n * @param posList amount of ONT to unvote\n * @param payer Address to pay for the gas.\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeUnvoteForPeerTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== posList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const n of posList) {\n        struct.add(n);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unVoteForPeer', params, contractAddress,\n         gasPrice, gasLimit, payer);\n}\n\n/**\n * Withdraw the unvote ONT\n * Need two signatures if userAddr and payer are not the same\n * @param userAddr\n * @param peerPubKeys\n * @param withdrawList\n */\nexport function makeWithdrawTx(\n    userAddr: Address,\n    peerPubKeys: string[],\n    withdrawList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    if (peerPubKeys.length !== withdrawList.length) {\n        throw ERROR_CODE.INVALID_PARAMS;\n    }\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeys.length);\n    for (const p of peerPubKeys) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(withdrawList.length);\n    for (const w of withdrawList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdraw', params, contractAddress,\n        gasPrice, gasLimit, payer);\n}\n\n/** Quit node register\n * Need two signatures if userAddr and payer are not the same\n */\nexport function makeQuitNodeTx(\n    userAddr: Address,\n    peerPubKey: string,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('quitNode', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer change the status of authorization\n * @param peerPubKey Peer's public key\n * @param userAddr User's address\n * @param maxAuthorize Allowed max amount of stake authorization\n * @param payer Payer of the transaction fee\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeChangeAuthorizationTx(\n    peerPubKey: string,\n    userAddr: Address,\n    maxAuthorize: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), maxAuthorize);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('changeMaxAuthorization', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Update allocation proportion of peer\n * @param peerPubKey\n * @param userAddr\n * @param peerCost\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeSetPeerCostTx(\n    peerPubKey: string,\n    userAddr: Address,\n    peerCost: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), peerCost);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('setPeerCost', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Withdraw fee to user's address\n * @param userAddr User's address\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeWithdrawFeeTx(\n    userAddr: Address,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdrawFee', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * User authorize some peers\n * @param userAddr\n * @param peerPubKeyList\n * @param posList\n * @param payer\n * @param gasPrice\n * @param gasLimit\n */\nexport function makeAuthorizeForPeerTx(\n    userAddr: Address,\n    peerPubKeyList: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeyList.length);\n    for (const p of peerPubKeyList) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const w of posList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('authorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * User cancels the authorization of peer\n */\nexport function makeUnauthorizeForPeerTx(\n    userAddr: Address,\n    peerPubKeyList: string[],\n    posList: number[],\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    struct.add(peerPubKeyList.length);\n    for (const p of peerPubKeyList) {\n        struct.add(str2hexstr(p));\n    }\n    struct.add(posList.length);\n    for (const w of posList) {\n        struct.add(w);\n    }\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('unAuthorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer add the init pos\n * @param peerPubkey Peer's public key\n * @param userAddr Stake wallet address\n * @param pos Amount of pos to add\n * @param payer Payer of the transaction\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeAddInitPosTx(\n    peerPubkey: string,\n    userAddr: Address,\n    pos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('addInitPos', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * Peer reduce the init pos\n * @param peerPubkey Peer's public key\n * @param userAddr Stake wallet address\n * @param pos Amount of pos to reduce\n * @param payer Payer of the transaction\n * @param gasPrice Gas price\n * @param gasLimit Gas limit\n */\nexport function makeReduceInitPosTx(\n    peerPubkey: string,\n    userAddr: Address,\n    pos: number,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n): Transaction {\n    const struct = new Struct();\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('reduceInitPos', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\nexport function makeWithdrawPeerUnboundOngTx(\n    userAddr: Address,\n    payer: Address,\n    gasPrice: string,\n    gasLimit: string\n) {\n    const struct = new Struct();\n    struct.add(userAddr.serialize());\n    const params = buildNativeCodeScript([struct]);\n    return makeNativeContractTx('withdrawOng', params, contractAddress, gasPrice, gasLimit, payer);\n}\n\n/**\n * If not set ifAuthorize or cost before, query result will be empty.\n * @param peerPubKey\n * @param url\n */\nexport async function getAttributes(peerPubKey: string, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(PEER_ATTRIBUTES) + peerPubKey;\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return PeerAttributes.deserialize(new StringReader(result));\n    } else {\n        return new PeerAttributes();\n    }\n}\n\n/**\n * Get the reward fee of address\n * @param address User's address\n * @param url Node's restfull url\n */\nexport async function getSplitFeeAddress(address: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(SPLIT_FEE_ADDRESS) + address.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return SplitFeeAddress.deserialize(new StringReader(result));\n    } else {\n        return new SplitFeeAddress();\n    }\n}\n\n/**\n * Get authorization of user's address\n * @param peerPubKey Peer's public key\n * @param address User's address\n * @param url Node's restful url\n */\nexport async function getAuthorizeInfo(peerPubKey: string, address: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(AUTHORIZE_INFO_POOL) + peerPubKey + address.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    const result = res.Result;\n    if (result) {\n        return AuthorizeInfo.deserialize(new StringReader(result));\n    } else {\n        return new AuthorizeInfo();\n    }\n}\n\n/**\n * Query the governance view\n * @param url Url of restful api\n */\nexport async function getGovernanceView(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr('governanceView');\n    const viewRes = await restClient.getStorage(codeHash, key);\n    const view = viewRes.Result;\n    const governanceView = GovernanceView.deserialize(new StringReader(view));\n    return governanceView;\n}\n\n/**\n * Query all the peer's state. The result is a map.\n * @param url Url of blockchain node\n */\nexport async function getPeerPoolMap(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const governanceView = await getGovernanceView(url);\n    const key1 = str2hexstr('peerPool');\n    const key2 = num2hexstring(governanceView.view, 4, true);\n    const keyP = key1 + key2;\n    const res = await restClient.getStorage(codeHash, keyP);\n    const sr = new StringReader(res.Result);\n    const length = sr.readInt();\n    const result: any = {};\n    for (let i = 0; i < length; i++) {\n        const p = PeerPoolItem.deserialize(sr);\n        result[p.peerPubkey] = p;\n    }\n    return result;\n}\n\nexport async function getGlobalParam(url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(GLOBAL_PARAM);\n    const res = await restClient.getStorage(codeHash, key);\n    if (res.Result) {\n        return GlobalParam.deserialize(new StringReader(res.Result));\n    } else {\n        return new GlobalParam();\n    }\n\n}\n\nexport async function getTotalStake(userAddr: Address, url?: string) {\n    const restClient = new RestClient(url);\n    const codeHash = contractAddress.toHexString();\n    const key = str2hexstr(TOTAL_STAKE) + userAddr.serialize();\n    const res = await restClient.getStorage(codeHash, key);\n    if (res.Result) {\n        return TotalStake.deserialize(new StringReader(res.Result));\n    } else {\n        return new TotalStake();\n    }\n}\n\nexport async function getPeerUnboundOng(userAddr: Address, url?: string) {\n    const totalStake = await getTotalStake(userAddr, url);\n    if (!totalStake.address) {\n        return 0;\n    }\n    const restClient = new RestClient(url);\n    const blockHeight = (await restClient.getBlockHeight()).Result;\n    const block = (await restClient.getBlockJson(blockHeight)).Result;\n    const timeStamp = block.Header.Timestamp - GENESIS_BLOCK_TIMESTAMP;\n    return calcUnboundOng(totalStake.stake, totalStake.timeOffset, timeStamp);\n}\n\n/**\n * Use to store governance state.\n */\nexport class GovernanceView {\n    static deserialize(sr: StringReader): GovernanceView {\n        const g = new GovernanceView();\n        g.view = sr.readUint32();\n        g.height = sr.readUint32();\n        g.txhash = sr.read(64); // uint256\n        return g;\n    }\n    view: number = 0;\n    height: number = 0;\n    txhash: string = '';\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.view, 4, true);\n        result += num2hexstring(this.height, 4, true);\n        result += hex2VarBytes(this.txhash);\n        return result;\n    }\n}\n\n/**\n * Describs the peer's state in the pool.\n */\nexport class PeerPoolItem {\n    static deserialize(sr: StringReader): PeerPoolItem {\n        const p = new PeerPoolItem();\n        p.index = sr.readInt();\n        p.peerPubkey = hexstr2str(sr.readNextBytes());\n        p.address = Address.deserialize(sr);\n        p.status = parseInt(sr.read(1), 16);\n        p.initPos = sr.readLong();\n        p.totalPos = sr.readLong();\n        return p;\n    }\n\n    index: number = 0;\n    peerPubkey: string = '';\n    address: Address;\n    status: number = 0;\n    initPos: number = 0;\n    totalPos: number = 0;\n\n    serialize(): string {\n        let result = '';\n        result += num2hexstring(this.index, 4, true);\n        result += str2VarBytes(this.peerPubkey);\n        result += this.address.serialize();\n        result += num2hexstring(this.status);\n        result += num2hexstring(this.initPos, 8, true);\n        result += num2hexstring(this.totalPos, 8, true);\n        return result;\n    }\n}\n\nexport class PeerAttributes {\n    static deserialize(sr: StringReader): PeerAttributes {\n        const pr = new PeerAttributes();\n        pr.peerPubkey = hexstr2str(sr.readNextBytes());\n\n        pr.maxAuthorize = sr.readLong();\n\n        pr.t2PeerCost = sr.readLong();\n        pr.t1PeerCost = sr.readLong();\n        pr.tPeerCost = sr.readLong();\n\n        if (sr.isEmpty) {\n            return pr;\n        }\n        pr.field1 = sr.readNextBytes();\n        pr.field2 = sr.readNextBytes();\n        pr.field3 = sr.readNextBytes();\n        pr.field4 = sr.readNextBytes();\n\n        return pr;\n    }\n    peerPubkey: string = '';\n    maxAuthorize: number = 0;\n    t2PeerCost: number = 100; // peer cost, active in view T + 2\n    t1PeerCost: number = 100; // peer cost, active in view T + 1\n    tPeerCost: number = 0; // peer cost, active in view T\n    field1: string = '';\n    field2: string = '';\n    field3: string = '';\n    field4: string = '';\n\n    serialize(): string {\n        return '';\n    }\n}\n\nexport class SplitFeeAddress {\n    static deserialize(sr: StringReader) {\n        const sfa = new SplitFeeAddress();\n        sfa.address = Address.deserialize(sr);\n        sfa.amount = sr.readLong();\n        return sfa;\n    }\n\n    address: Address;\n    amount: number = 0;\n}\n\nexport class AuthorizeInfo {\n    static deserialize(sr: StringReader) {\n        const ai = new AuthorizeInfo();\n        ai.peerPubkey = hexstr2str(sr.readNextBytes());\n        ai.address = Address.deserialize(sr);\n        ai.consensusPos = sr.readLong();\n        ai.freezePos = sr.readLong();\n        ai.newPos = sr.readLong();\n        ai.withdrawPos = sr.readLong();\n        ai.withdrawFreezePos = sr.readLong();\n        ai.withdrawUnfreezePos = sr.readLong();\n        return ai;\n    }\n\n    peerPubkey: string = '';\n    address: Address;\n    consensusPos: number = 0;\n    freezePos: number = 0;\n    newPos: number = 0;\n    withdrawPos: number = 0;\n    withdrawFreezePos: number = 0;\n    withdrawUnfreezePos: number = 0;\n}\n\nexport class GlobalParam {\n    static deserialize(sr: StringReader) {\n        const gp = new GlobalParam();\n        const feeHexStr = sr.readNextBytes();\n        const candidateFeeStr = BigInt.fromHexstr(feeHexStr).value;\n        gp.candidateFee = Number(candidateFeeStr);\n        const minStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        gp.minInitState = Number(minStr);\n        const candidateNumStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const candidateNum = Number(candidateNumStr);\n        gp.candidateNum = candidateNum;\n        const posLimitStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        gp.posLimit = Number(posLimitStr);\n        const aStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const a = Number(aStr);\n        const bStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const b = Number(bStr);\n        const yStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const yita = Number(yStr);\n        const pStr = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const penalty = Number(pStr);\n        gp.A = a;\n        gp.B = b;\n        gp.yita = yita;\n        gp.penalty = penalty;\n        return gp;\n    }\n\n    candidateFee: number;\n    candidateNum: number;\n    minInitState: number;\n    posLimit: number;\n    A: number;\n    B: number;\n    yita: number;\n    penalty: number;\n}\n\nexport class TotalStake {\n    static deserialize(sr: StringReader): TotalStake {\n        const ts = new TotalStake();\n        ts.address = Address.deserialize(sr);\n        ts.stake = sr.readLong();\n        ts.timeOffset = sr.readUint32();\n        return ts;\n    }\n    address: Address;\n    stake: number;\n    timeOffset: number;\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { BigNumber } from 'bignumber.js';\nimport BigInt from '../../common/bigInt';\nimport { Address } from '../../crypto/address';\nimport { ERROR_CODE } from '../../error';\nimport { hex2VarBytes, hexstr2str, num2hexstring, str2VarBytes, StringReader } from '../../utils';\n\nexport class Transfers {\n    static deserialize(sr: StringReader) {\n        const t = new Transfers();\n        // const version = sr.read(1);\n        // t.version = version;\n        const states = [];\n        const stateLen = sr.readNextLen();\n        for (let i = 0; i < stateLen; i++) {\n            const state = State.deserialize(sr);\n            states.push(state);\n        }\n        t.states = states;\n        return t;\n    }\n\n    // byte\n    // version : string\n    states: State[] = [];\n\n    constructor() {\n        // this.version = '00';\n    }\n\n    serialize() {\n        let result = '';\n        // result += this.version\n        result += num2hexstring(this.states.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.states.length; i++) {\n            result += this.states[i].serialize();\n        }\n        return result;\n    }\n}\n\nexport class TokenTransfer {\n    static deserialize(sr: StringReader) {\n        const tf = new TokenTransfer();\n        tf.states = [];\n        const contract = sr.read(20);\n        tf.contract = contract;\n\n        const len = sr.readNextLen();\n        for (let i = 0; i < len; i++) {\n            const state = State.deserialize(sr);\n            tf.states.push(state);\n        }\n        return tf;\n    }\n\n    // 20 bytes\n    contract: string;\n    states: State[];\n\n    serialize() {\n        let result = '';\n        result += this.contract;\n        const len = num2hexstring(this.states.length);\n        result += len;\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0 ; i < this.states.length; i++) {\n            result += this.states[i].serialize();\n        }\n        return result;\n    }\n}\n\nexport class State {\n    static deserialize(sr: StringReader) {\n        // const version = sr.read(1);\n        const from = new Address(sr.readNextBytes());\n        const to   = new Address(sr.readNextBytes());\n        // const value = (new BigNumber(sr.readNextBytes(), 16)).toString();\n        // const value = sr.read(8);\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\n\n        return new State(from, to, value.toString());\n    }\n\n    // byte\n    // version : string\n    // 20 bytes address\n    from: Address;\n    to: Address;\n    value: string | number;\n\n    constructor(from: Address, to: Address, value: string | number) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n\n    serialize() {\n        let result = '';\n        // result += this.version\n        result += hex2VarBytes(this.from.serialize());\n        result += hex2VarBytes(this.to.serialize());\n        const bi = new BigInt(this.value).toHexstr();\n        result += hex2VarBytes(bi);\n        return result;\n    }\n}\n\nexport class Contract {\n    static deserialize(sr: StringReader) {\n        const c = new Contract();\n        const version = sr.read(1);\n        const address = Address.deserialize(sr);\n        const method = sr.readNextBytes();\n        const args = sr.readNextBytes();\n        c.version = version;\n        c.address = address;\n        c.method = hexstr2str(method);\n        c.args = args;\n        return c;\n    }\n\n    // byte\n    version: string;\n\n    // 20 bytes\n    address: Address;\n\n    method: string;\n\n    // byte\n    args: string;\n\n    constructor() {\n        this.version = '00';\n    }\n\n    serialize() {\n        let result = '';\n        result += this.version;\n\n        result += this.address.serialize();\n\n        result += str2VarBytes(this.method);\n\n        result += hex2VarBytes(this.args);\n\n        return result;\n    }\n}\n\nexport class TransferFrom {\n    static deserialize(sr: StringReader): TransferFrom {\n        // const version = sr.read(1);\n        const sender = new Address(sr.readNextBytes());\n        const from = new Address(sr.readNextBytes());\n        const to = new Address(sr.readNextBytes());\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\n        const tf = new TransferFrom(sender, from, to, value.toString());\n        return tf;\n    }\n\n    // version : string = '00'\n\n    sender: Address;\n\n    from: Address;\n\n    to: Address;\n\n    value: string;\n\n    constructor(sender: Address, from: Address, to: Address, value: string) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || !bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.sender = sender;\n        this.from = from;\n        this.to = to;\n        this.value = value;\n    }\n\n    serialize(): string {\n        let result = '';\n        // result += this.version\n        result += hex2VarBytes(this.sender.serialize());\n        result += hex2VarBytes(this.from.serialize());\n        result += hex2VarBytes(this.to.serialize());\n        const biHex = new BigInt(this.value).toHexstr();\n        result += hex2VarBytes(biHex);\n        return result;\n    }\n}\n","/*\n* Copyright (C) 2018 The ontology Authors\n* This file is part of The ontology library.\n*\n* The ontology is free software: you can redistribute it and/or modify\n* it under the terms of the GNU Lesser General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* The ontology is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU Lesser General Public License for more details.\n*\n* You should have received a copy of the GNU Lesser General Public License\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\nimport { Transaction } from '../../transaction/transaction';\nimport { str2hexstr } from '../../utils';\nimport { Address } from './../../crypto/address';\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\nimport { Parameter, ParameterType } from './../abi/parameter';\n\nexport class Oep5Param {\n    public toAcct: string; // hex string\n    public tokenId: string; // hex string\n\n    public constructor(toAcct: Address, tokenId: string ) {\n        this.toAcct = toAcct.serialize();\n        this.tokenId = tokenId;\n    }\n}\n\nconst FunctionNames = {\n    Init: 'init',\n    Name: 'name',\n    Symbol: 'symbol',\n    TotalSupply: 'totalSupply',\n    BalanceOf: 'balanceOf',\n    OwnerOf: 'ownerOf',\n    Transfer: 'transfer',\n    TransferMulti: 'transferMulti',\n    Approve: 'approve',\n    ApproveMulti: 'approveMulti',\n    TakeOwnership: 'takeOwnership',\n    QueryTokenIDByIndex: 'queryTokenIDByIndex',\n    QueryTokenByID: 'queryTokenByID',\n    GetApproved: 'getApproved',\n    CreateMultiTokens: 'createMultiTokens',\n    CreateOneToken: 'createOneToken'\n};\n\nexport class Oep5TxBuilder {\n    contractAddr: Address;\n\n    constructor(contractAddr: Address) {\n        this.contractAddr = contractAddr;\n    }\n\n    makeInitTx(\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Init;\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeOwnerOfTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.OwnerOf;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    /**\n     * Transfer the control to someone else\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeTransferTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Transfer;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Transfer the control to multi people\n     */\n    makeTransferMultiTx(\n        oep5Params: Oep5Param[],\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const list = [];\n        list.push(str2hexstr(FunctionNames.TransferMulti));\n        const temp = [];\n        for (const param of oep5Params) {\n            temp.push([\n                param.toAcct,\n                param.tokenId\n            ]);\n        }\n        list.push(temp);\n        const params = createCodeParamsScript(list);\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Approve the token to toAcct address, it can overwrite older approved address\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeApproveTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.Approve;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    /**\n     * Take the approved token.\n     * @param oep5Param\n     * @param gasPrice\n     * @param gasLimit\n     * @param payer\n     */\n    makeTakeOwnershipTx(\n        oep5Param: Oep5Param,\n        gasPrice: string,\n        gasLimit: string,\n        payer: Address\n    ): Transaction {\n        const func = FunctionNames.TakeOwnership;\n        const params = [\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\n    }\n\n    makeQueryBalanceOfTx(\n        addr: Address\n    ): Transaction {\n        const func = FunctionNames.BalanceOf;\n        const params = [\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize())\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTotalSupplyTx(): Transaction {\n        const func = FunctionNames.TotalSupply;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQueryTokenIDByIndexTx(\n        index: number\n    ): Transaction {\n        const func = FunctionNames.QueryTokenIDByIndex;\n        const params = [\n            new Parameter('index', ParameterType.Long, index)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryTokenByIDTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.QueryTokenByID;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeGetApprovedTx(\n        tokenId: string\n    ): Transaction {\n        const func = FunctionNames.GetApproved;\n        const params = [\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\n        ];\n        return makeInvokeTransaction(func, params, this.contractAddr);\n    }\n\n    makeQueryNameTx(): Transaction {\n        const func = FunctionNames.Name;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n    makeQuerySymbolTx(): Transaction {\n        const func = FunctionNames.Symbol;\n        return makeInvokeTransaction(func, [], this.contractAddr);\n    }\n\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Account } from './account';\nimport { Claim } from './claim';\nimport * as CONST from './consts';\nimport * as Crypto from './crypto';\nimport { Identity } from './identity';\nimport * as NeoCore from './neocore';\nimport RestClient from './network/rest/restClient';\nimport RpcClient from './network/rpc/rpcClient';\nimport { WebsocketClient } from './network/websocket/websocketClient';\nimport * as scrypt from './scrypt';\nimport { SDK } from './sdk/index';\nimport AbiFunction from './smartcontract/abi/abiFunction';\nimport AbiInfo from './smartcontract/abi/abiInfo';\nimport { Parameter, ParameterType } from './smartcontract/abi/parameter';\nimport Struct from './smartcontract/abi/struct';\nimport * as GovernanceTxBuilder from './smartcontract/nativevm/governanceContractTxBuilder';\nimport * as OntAssetTxBuilder from './smartcontract/nativevm/ontAssetTxBuilder';\nimport * as OntidContract from './smartcontract/nativevm/ontidContractTxBuilder';\nimport * as Token from './smartcontract/nativevm/token';\nimport * as Oep4 from './smartcontract/neovm/oep4TxBuilder';\nimport * as Oep5 from './smartcontract/neovm/oep5TxBuilder';\nimport * as Oep8 from './smartcontract/neovm/oep8TxBuilder';\nimport { DDO, DDOAttribute } from './transaction/ddo';\nimport * as ScriptBuilder from './transaction/scriptBuilder';\nimport { Transaction } from './transaction/transaction';\nimport * as TransactionBuilder from './transaction/transactionBuilder';\nimport { Transfer } from './transaction/transfer';\nimport { TxSignature } from './transaction/txSignature';\nimport * as utils from './utils';\nimport { Wallet } from './wallet';\n\nclass ONT {\n    Account: any;\n    Identity: any;\n    Claim: any;\n    DDO: any;\n    DDOAttribute: any;\n    Transaction: any;\n    Transfer: any;\n    TxSignature: any;\n    TransactionBuilder: any;\n    OntAssetTxBuilder: any;\n    Parameter: any;\n    ParameterType: any;\n    AbiFunction: any;\n    AbiInfo: any;\n    utils: any;\n    scrypt: any;\n    CONST: any;\n    Wallet: any;\n    SDK: any;\n    Token: any;\n    OntidContract: any;\n    GovernanceTxBuilder: any;\n    RestClient: any;\n    RpcClient: any;\n    WebsocketClient: any;\n    Crypto: any;\n    Struct: any;\n    ScriptBuilder: any;\n    NeoCore: any;\n    Oep4: any;\n    Oep8: any;\n    Oep5: any;\n\n    constructor() {\n        this.Account = Account;\n        this.Identity = Identity;\n        this.Claim = Claim;\n        this.DDO = DDO;\n        this.DDOAttribute = DDOAttribute;\n        this.Transaction = Transaction;\n        this.Transfer = Transfer;\n        this.TxSignature = TxSignature;\n        this.TransactionBuilder = TransactionBuilder;\n        this.OntAssetTxBuilder = OntAssetTxBuilder;\n        this.GovernanceTxBuilder = GovernanceTxBuilder;\n        this.Parameter = Parameter;\n        this.ParameterType = ParameterType;\n        this.AbiFunction = AbiFunction;\n        this.AbiInfo = AbiInfo;\n        this.utils = utils;\n        this.scrypt = scrypt;\n        this.CONST = CONST;\n        this.Wallet = Wallet;\n        this.SDK = SDK;\n        this.Token = Token;\n        this.OntidContract = OntidContract;\n        this.RestClient = RestClient;\n        this.RpcClient = RpcClient;\n        this.WebsocketClient = WebsocketClient;\n        this.Crypto = Crypto;\n        this.Struct = Struct;\n        this.ScriptBuilder = ScriptBuilder;\n        this.NeoCore = NeoCore;\n        this.Oep4 = Oep4;\n        this.Oep8 = Oep8;\n        this.Oep5 = Oep5;\n    }\n    setNode(url: string) {\n        this.CONST.TEST_NODE = url;\n    }\n\n    setRpcPort(port: string) {\n        this.CONST.HTTP_JSON_PORT = port;\n    }\n\n    setRestPort(port: string) {\n        this.CONST.HTTP_REST_PORT = port;\n    }\n\n    setSocketPort(port: string) {\n        this.CONST.HTTP_WS_PORT = port;\n    }\n}\n\nexport default ONT;\n\nexport {\n    Account,\n    Identity,\n    Claim,\n    DDO,\n    DDOAttribute,\n    Transaction,\n    Transfer,\n    TxSignature,\n    Parameter,\n    ParameterType,\n    AbiFunction,\n    AbiInfo,\n    TransactionBuilder,\n    OntAssetTxBuilder,\n    GovernanceTxBuilder,\n    utils,\n    scrypt,\n    CONST,\n    Wallet,\n    SDK,\n    Token,\n    OntidContract,\n    RestClient,\n    RpcClient,\n    WebsocketClient,\n    Crypto,\n    Struct,\n    ScriptBuilder,\n    NeoCore,\n    Oep4,\n    Oep8,\n    Oep5\n};\n"],"sourceRoot":""}